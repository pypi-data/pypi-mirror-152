# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List, Dict, Any


class AiotDevice(TeaModel):
    def __init__(
        self,
        ipaddr: str = None,
        latitude: float = None,
        longitude: float = None,
        name: str = None,
        place: str = None,
        port: int = None,
    ):
        # ip地址
        self.ipaddr = ipaddr
        # 纬度
        self.latitude = latitude
        # 经度
        self.longitude = longitude
        # 名称
        self.name = name
        # 安装位置
        self.place = place
        # 端口
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ipaddr is not None:
            result['IPAddr'] = self.ipaddr
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.name is not None:
            result['Name'] = self.name
        if self.place is not None:
            result['Place'] = self.place
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IPAddr') is not None:
            self.ipaddr = m.get('IPAddr')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Place') is not None:
            self.place = m.get('Place')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class AddAiotDevicesRequestAiotDeviceList(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        ipaddr: str = None,
        latitude: float = None,
        longitude: float = None,
        name: str = None,
        place: str = None,
        port: int = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.ipaddr = ipaddr
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.place = place
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.ipaddr is not None:
            result['IPAddr'] = self.ipaddr
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.name is not None:
            result['Name'] = self.name
        if self.place is not None:
            result['Place'] = self.place
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('IPAddr') is not None:
            self.ipaddr = m.get('IPAddr')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Place') is not None:
            self.place = m.get('Place')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class AddAiotDevicesRequest(TeaModel):
    def __init__(
        self,
        aiot_device_list: List[AddAiotDevicesRequestAiotDeviceList] = None,
    ):
        self.aiot_device_list = aiot_device_list

    def validate(self):
        if self.aiot_device_list:
            for k in self.aiot_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AiotDeviceList'] = []
        if self.aiot_device_list is not None:
            for k in self.aiot_device_list:
                result['AiotDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.aiot_device_list = []
        if m.get('AiotDeviceList') is not None:
            for k in m.get('AiotDeviceList'):
                temp_model = AddAiotDevicesRequestAiotDeviceList()
                self.aiot_device_list.append(temp_model.from_map(k))
        return self


class AddAiotDevicesShrinkRequest(TeaModel):
    def __init__(
        self,
        aiot_device_list_shrink: str = None,
    ):
        self.aiot_device_list_shrink = aiot_device_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_device_list_shrink is not None:
            result['AiotDeviceList'] = self.aiot_device_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotDeviceList') is not None:
            self.aiot_device_list_shrink = m.get('AiotDeviceList')
        return self


class AddAiotDevicesResponseBodyResultList(TeaModel):
    def __init__(
        self,
        code: str = None,
        device_id: str = None,
        id: str = None,
        message: str = None,
        password: str = None,
        server_host: str = None,
        server_host_internal: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_ip_internal: str = None,
        server_port: str = None,
        server_wss_port: str = None,
        user_id: str = None,
    ):
        self.code = code
        self.device_id = device_id
        self.id = id
        self.message = message
        self.password = password
        self.server_host = server_host
        self.server_host_internal = server_host_internal
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_ip_internal = server_ip_internal
        self.server_port = server_port
        self.server_wss_port = server_wss_port
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.id is not None:
            result['Id'] = self.id
        if self.message is not None:
            result['Message'] = self.message
        if self.password is not None:
            result['Password'] = self.password
        if self.server_host is not None:
            result['ServerHost'] = self.server_host
        if self.server_host_internal is not None:
            result['ServerHostInternal'] = self.server_host_internal
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_ip_internal is not None:
            result['ServerIpInternal'] = self.server_ip_internal
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_wss_port is not None:
            result['ServerWssPort'] = self.server_wss_port
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerHost') is not None:
            self.server_host = m.get('ServerHost')
        if m.get('ServerHostInternal') is not None:
            self.server_host_internal = m.get('ServerHostInternal')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerIpInternal') is not None:
            self.server_ip_internal = m.get('ServerIpInternal')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerWssPort') is not None:
            self.server_wss_port = m.get('ServerWssPort')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class AddAiotDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_list: List[AddAiotDevicesResponseBodyResultList] = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_list = result_list

    def validate(self):
        if self.result_list:
            for k in self.result_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ResultList'] = []
        if self.result_list is not None:
            for k in self.result_list:
                result['ResultList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_list = []
        if m.get('ResultList') is not None:
            for k in m.get('ResultList'):
                temp_model = AddAiotDevicesResponseBodyResultList()
                self.result_list.append(temp_model.from_map(k))
        return self


class AddAiotDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAiotDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAiotDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAiotPersonTableRequestPersonTable(TeaModel):
    def __init__(
        self,
        name: str = None,
        person_table_id: str = None,
        type: int = None,
        verification_model_list: List[int] = None,
    ):
        self.name = name
        self.person_table_id = person_table_id
        self.type = type
        self.verification_model_list = verification_model_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.type is not None:
            result['Type'] = self.type
        if self.verification_model_list is not None:
            result['VerificationModelList'] = self.verification_model_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('VerificationModelList') is not None:
            self.verification_model_list = m.get('VerificationModelList')
        return self


class AddAiotPersonTableRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table: AddAiotPersonTableRequestPersonTable = None,
    ):
        self.id = id
        self.person_table = person_table

    def validate(self):
        if self.person_table:
            self.person_table.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table is not None:
            result['PersonTable'] = self.person_table.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTable') is not None:
            temp_model = AddAiotPersonTableRequestPersonTable()
            self.person_table = temp_model.from_map(m['PersonTable'])
        return self


class AddAiotPersonTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table_id: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table_id = person_table_id
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddAiotPersonTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAiotPersonTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAiotPersonTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList(TeaModel):
    def __init__(
        self,
        number: str = None,
        type: int = None,
    ):
        self.number = number
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        algorithm_version: str = None,
        feature_data: str = None,
        image_id: str = None,
        object_id: str = None,
        tab_ied: str = None,
        vendor: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.algorithm_version = algorithm_version
        self.feature_data = feature_data
        self.image_id = image_id
        self.object_id = object_id
        self.tab_ied = tab_ied
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithm_version is not None:
            result['AlgorithmVersion'] = self.algorithm_version
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.tab_ied is not None:
            result['TabIed'] = self.tab_ied
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AlgorithmVersion') is not None:
            self.algorithm_version = m.get('AlgorithmVersion')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('TabIed') is not None:
            self.tab_ied = m.get('TabIed')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class AddAiotPersonTableItemsRequestPersonTableItemListImageList(TeaModel):
    def __init__(
        self,
        data: str = None,
        device_id: str = None,
        event_sort: str = None,
        feature_info: AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo = None,
        file_format: str = None,
        height: int = None,
        image_id: str = None,
        shot_time: str = None,
        size: int = None,
        storage_path: str = None,
        type: str = None,
        width: int = None,
    ):
        self.data = data
        self.device_id = device_id
        self.event_sort = event_sort
        self.feature_info = feature_info
        self.file_format = file_format
        self.height = height
        self.image_id = image_id
        self.shot_time = shot_time
        self.size = size
        self.storage_path = storage_path
        self.type = type
        self.width = width

    def validate(self):
        if self.feature_info:
            self.feature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_sort is not None:
            result['EventSort'] = self.event_sort
        if self.feature_info is not None:
            result['FeatureInfo'] = self.feature_info.to_map()
        if self.file_format is not None:
            result['FileFormat'] = self.file_format
        if self.height is not None:
            result['Height'] = self.height
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.size is not None:
            result['Size'] = self.size
        if self.storage_path is not None:
            result['StoragePath'] = self.storage_path
        if self.type is not None:
            result['Type'] = self.type
        if self.width is not None:
            result['Width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventSort') is not None:
            self.event_sort = m.get('EventSort')
        if m.get('FeatureInfo') is not None:
            temp_model = AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo()
            self.feature_info = temp_model.from_map(m['FeatureInfo'])
        if m.get('FileFormat') is not None:
            self.file_format = m.get('FileFormat')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StoragePath') is not None:
            self.storage_path = m.get('StoragePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Width') is not None:
            self.width = m.get('Width')
        return self


class AddAiotPersonTableItemsRequestPersonTableItemList(TeaModel):
    def __init__(
        self,
        identification_list: List[AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList] = None,
        identification_num: int = None,
        image_list: List[AddAiotPersonTableItemsRequestPersonTableItemListImageList] = None,
        image_num: int = None,
        person_code: str = None,
        person_id: str = None,
        person_name: str = None,
        remarks: str = None,
    ):
        self.identification_list = identification_list
        self.identification_num = identification_num
        self.image_list = image_list
        self.image_num = image_num
        self.person_code = person_code
        self.person_id = person_id
        self.person_name = person_name
        self.remarks = remarks

    def validate(self):
        if self.identification_list:
            for k in self.identification_list:
                if k:
                    k.validate()
        if self.image_list:
            for k in self.image_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IdentificationList'] = []
        if self.identification_list is not None:
            for k in self.identification_list:
                result['IdentificationList'].append(k.to_map() if k else None)
        if self.identification_num is not None:
            result['IdentificationNum'] = self.identification_num
        result['ImageList'] = []
        if self.image_list is not None:
            for k in self.image_list:
                result['ImageList'].append(k.to_map() if k else None)
        if self.image_num is not None:
            result['ImageNum'] = self.image_num
        if self.person_code is not None:
            result['PersonCode'] = self.person_code
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_name is not None:
            result['PersonName'] = self.person_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.identification_list = []
        if m.get('IdentificationList') is not None:
            for k in m.get('IdentificationList'):
                temp_model = AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList()
                self.identification_list.append(temp_model.from_map(k))
        if m.get('IdentificationNum') is not None:
            self.identification_num = m.get('IdentificationNum')
        self.image_list = []
        if m.get('ImageList') is not None:
            for k in m.get('ImageList'):
                temp_model = AddAiotPersonTableItemsRequestPersonTableItemListImageList()
                self.image_list.append(temp_model.from_map(k))
        if m.get('ImageNum') is not None:
            self.image_num = m.get('ImageNum')
        if m.get('PersonCode') is not None:
            self.person_code = m.get('PersonCode')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonName') is not None:
            self.person_name = m.get('PersonName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class AddAiotPersonTableItemsRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id: str = None,
        person_table_item_list: List[AddAiotPersonTableItemsRequestPersonTableItemList] = None,
    ):
        self.id = id
        self.person_table_id = person_table_id
        self.person_table_item_list = person_table_item_list

    def validate(self):
        if self.person_table_item_list:
            for k in self.person_table_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        result['PersonTableItemList'] = []
        if self.person_table_item_list is not None:
            for k in self.person_table_item_list:
                result['PersonTableItemList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        self.person_table_item_list = []
        if m.get('PersonTableItemList') is not None:
            for k in m.get('PersonTableItemList'):
                temp_model = AddAiotPersonTableItemsRequestPersonTableItemList()
                self.person_table_item_list.append(temp_model.from_map(k))
        return self


class AddAiotPersonTableItemsResponseBodyResultList(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table_item_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table_item_id = person_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.person_table_item_id is not None:
            result['PersonTableItemId'] = self.person_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PersonTableItemId') is not None:
            self.person_table_item_id = m.get('PersonTableItemId')
        return self


class AddAiotPersonTableItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_list: List[AddAiotPersonTableItemsResponseBodyResultList] = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_list = result_list

    def validate(self):
        if self.result_list:
            for k in self.result_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ResultList'] = []
        if self.result_list is not None:
            for k in self.result_list:
                result['ResultList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_list = []
        if m.get('ResultList') is not None:
            for k in m.get('ResultList'):
                temp_model = AddAiotPersonTableItemsResponseBodyResultList()
                self.result_list.append(temp_model.from_map(k))
        return self


class AddAiotPersonTableItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAiotPersonTableItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAiotPersonTableItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList(TeaModel):
    def __init__(
        self,
        number: str = None,
        type: int = None,
    ):
        self.number = number
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        algorithm_version: str = None,
        feature_data: str = None,
        image_id: str = None,
        object_id: str = None,
        tab_ied: str = None,
        vendor: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.algorithm_version = algorithm_version
        self.feature_data = feature_data
        self.image_id = image_id
        self.object_id = object_id
        self.tab_ied = tab_ied
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithm_version is not None:
            result['AlgorithmVersion'] = self.algorithm_version
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.tab_ied is not None:
            result['TabIed'] = self.tab_ied
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AlgorithmVersion') is not None:
            self.algorithm_version = m.get('AlgorithmVersion')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('TabIed') is not None:
            self.tab_ied = m.get('TabIed')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList(TeaModel):
    def __init__(
        self,
        data: str = None,
        device_id: str = None,
        event_sort: str = None,
        feature_info: AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo = None,
        file_format: str = None,
        height: int = None,
        image_id: str = None,
        shot_time: str = None,
        size: int = None,
        storage_path: str = None,
        type: str = None,
        width: int = None,
    ):
        self.data = data
        self.device_id = device_id
        self.event_sort = event_sort
        self.feature_info = feature_info
        self.file_format = file_format
        self.height = height
        self.image_id = image_id
        self.shot_time = shot_time
        self.size = size
        self.storage_path = storage_path
        self.type = type
        self.width = width

    def validate(self):
        if self.feature_info:
            self.feature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_sort is not None:
            result['EventSort'] = self.event_sort
        if self.feature_info is not None:
            result['FeatureInfo'] = self.feature_info.to_map()
        if self.file_format is not None:
            result['FileFormat'] = self.file_format
        if self.height is not None:
            result['Height'] = self.height
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.size is not None:
            result['Size'] = self.size
        if self.storage_path is not None:
            result['StoragePath'] = self.storage_path
        if self.type is not None:
            result['Type'] = self.type
        if self.width is not None:
            result['Width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventSort') is not None:
            self.event_sort = m.get('EventSort')
        if m.get('FeatureInfo') is not None:
            temp_model = AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo()
            self.feature_info = temp_model.from_map(m['FeatureInfo'])
        if m.get('FileFormat') is not None:
            self.file_format = m.get('FileFormat')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StoragePath') is not None:
            self.storage_path = m.get('StoragePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Width') is not None:
            self.width = m.get('Width')
        return self


class AddAiotPersonTableItemsForTablesRequestPersonTableItemList(TeaModel):
    def __init__(
        self,
        identification_list: List[AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList] = None,
        identification_num: int = None,
        image_list: List[AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList] = None,
        image_num: int = None,
        person_code: str = None,
        person_id: str = None,
        person_name: str = None,
        remarks: str = None,
    ):
        self.identification_list = identification_list
        self.identification_num = identification_num
        self.image_list = image_list
        self.image_num = image_num
        self.person_code = person_code
        self.person_id = person_id
        self.person_name = person_name
        self.remarks = remarks

    def validate(self):
        if self.identification_list:
            for k in self.identification_list:
                if k:
                    k.validate()
        if self.image_list:
            for k in self.image_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IdentificationList'] = []
        if self.identification_list is not None:
            for k in self.identification_list:
                result['IdentificationList'].append(k.to_map() if k else None)
        if self.identification_num is not None:
            result['IdentificationNum'] = self.identification_num
        result['ImageList'] = []
        if self.image_list is not None:
            for k in self.image_list:
                result['ImageList'].append(k.to_map() if k else None)
        if self.image_num is not None:
            result['ImageNum'] = self.image_num
        if self.person_code is not None:
            result['PersonCode'] = self.person_code
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_name is not None:
            result['PersonName'] = self.person_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.identification_list = []
        if m.get('IdentificationList') is not None:
            for k in m.get('IdentificationList'):
                temp_model = AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList()
                self.identification_list.append(temp_model.from_map(k))
        if m.get('IdentificationNum') is not None:
            self.identification_num = m.get('IdentificationNum')
        self.image_list = []
        if m.get('ImageList') is not None:
            for k in m.get('ImageList'):
                temp_model = AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList()
                self.image_list.append(temp_model.from_map(k))
        if m.get('ImageNum') is not None:
            self.image_num = m.get('ImageNum')
        if m.get('PersonCode') is not None:
            self.person_code = m.get('PersonCode')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonName') is not None:
            self.person_name = m.get('PersonName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class AddAiotPersonTableItemsForTablesRequestPersonTableList(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id: str = None,
    ):
        self.id = id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class AddAiotPersonTableItemsForTablesRequest(TeaModel):
    def __init__(
        self,
        person_table_item_list: List[AddAiotPersonTableItemsForTablesRequestPersonTableItemList] = None,
        person_table_list: List[AddAiotPersonTableItemsForTablesRequestPersonTableList] = None,
    ):
        self.person_table_item_list = person_table_item_list
        self.person_table_list = person_table_list

    def validate(self):
        if self.person_table_item_list:
            for k in self.person_table_item_list:
                if k:
                    k.validate()
        if self.person_table_list:
            for k in self.person_table_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PersonTableItemList'] = []
        if self.person_table_item_list is not None:
            for k in self.person_table_item_list:
                result['PersonTableItemList'].append(k.to_map() if k else None)
        result['PersonTableList'] = []
        if self.person_table_list is not None:
            for k in self.person_table_list:
                result['PersonTableList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.person_table_item_list = []
        if m.get('PersonTableItemList') is not None:
            for k in m.get('PersonTableItemList'):
                temp_model = AddAiotPersonTableItemsForTablesRequestPersonTableItemList()
                self.person_table_item_list.append(temp_model.from_map(k))
        self.person_table_list = []
        if m.get('PersonTableList') is not None:
            for k in m.get('PersonTableList'):
                temp_model = AddAiotPersonTableItemsForTablesRequestPersonTableList()
                self.person_table_list.append(temp_model.from_map(k))
        return self


class AddAiotPersonTableItemsForTablesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddAiotPersonTableItemsForTablesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAiotPersonTableItemsForTablesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAiotPersonTableItemsForTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAiotVehicleTableItemsRequestVehicleTableItem(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
        owner_name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        remarks: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time
        self.owner_name = owner_name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.remarks = remarks
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class AddAiotVehicleTableItemsRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item: AddAiotVehicleTableItemsRequestVehicleTableItem = None,
    ):
        self.id = id
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item = vehicle_table_item

    def validate(self):
        if self.vehicle_table_item:
            self.vehicle_table_item.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item is not None:
            result['VehicleTableItem'] = self.vehicle_table_item.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItem') is not None:
            temp_model = AddAiotVehicleTableItemsRequestVehicleTableItem()
            self.vehicle_table_item = temp_model.from_map(m['VehicleTableItem'])
        return self


class AddAiotVehicleTableItemsShrinkRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item_shrink: str = None,
    ):
        self.id = id
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_shrink = vehicle_table_item_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_shrink is not None:
            result['VehicleTableItem'] = self.vehicle_table_item_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItem') is not None:
            self.vehicle_table_item_shrink = m.get('VehicleTableItem')
        return self


class AddAiotVehicleTableItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddAiotVehicleTableItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAiotVehicleTableItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAiotVehicleTableItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddCameraForInstanceRequest(TeaModel):
    def __init__(
        self,
        camera_ids: List[str] = None,
        instance_id: str = None,
    ):
        # 设备Id
        self.camera_ids = camera_ids
        # 实例Id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.camera_ids is not None:
            result['CameraIds'] = self.camera_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CameraIds') is not None:
            self.camera_ids = m.get('CameraIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class AddCameraForInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        camera_ids_shrink: str = None,
        instance_id: str = None,
    ):
        # 设备Id
        self.camera_ids_shrink = camera_ids_shrink
        # 实例Id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.camera_ids_shrink is not None:
            result['CameraIds'] = self.camera_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CameraIds') is not None:
            self.camera_ids_shrink = m.get('CameraIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class AddCameraForInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        # code码
        self.code = code
        # 返回结果消息
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddCameraForInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddCameraForInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddCameraForInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddChannelRequest(TeaModel):
    def __init__(
        self,
        parent_device_gb_id: str = None,
    ):
        self.parent_device_gb_id = parent_device_gb_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.parent_device_gb_id is not None:
            result['ParentDeviceGbId'] = self.parent_device_gb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ParentDeviceGbId') is not None:
            self.parent_device_gb_id = m.get('ParentDeviceGbId')
        return self


class AddChannelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDataSourceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_name: str = None,
        data_source_type: str = None,
        description: str = None,
        url: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_name = data_source_name
        self.data_source_type = data_source_type
        self.description = description
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.description is not None:
            result['Description'] = self.description
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class AddDataSourceResponseBodyData(TeaModel):
    def __init__(
        self,
        data_source_id: str = None,
        kafka_topic: str = None,
        oss_path: str = None,
    ):
        self.data_source_id = data_source_id
        self.kafka_topic = kafka_topic
        self.oss_path = oss_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.kafka_topic is not None:
            result['KafkaTopic'] = self.kafka_topic
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('KafkaTopic') is not None:
            self.kafka_topic = m.get('KafkaTopic')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        return self


class AddDataSourceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddDataSourceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddDataSourceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddDataSourceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDataSourceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDeviceRequest(TeaModel):
    def __init__(
        self,
        bit_rate: str = None,
        corp_id: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_name: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_type: str = None,
        gb_id: str = None,
        vendor: str = None,
    ):
        self.bit_rate = bit_rate
        self.corp_id = corp_id
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_name = device_name
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_type = device_type
        self.gb_id = gb_id
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class AddDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList(TeaModel):
    def __init__(
        self,
        person_id: str = None,
        person_table_id: str = None,
    ):
        self.person_id = person_id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class AddDoubleVerificationGroupsRequestDoubleVerificationGroupList(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        interval: int = None,
        member_number: int = None,
        person_id_list: List[AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList] = None,
    ):
        self.group_id = group_id
        self.interval = interval
        self.member_number = member_number
        self.person_id_list = person_id_list

    def validate(self):
        if self.person_id_list:
            for k in self.person_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.member_number is not None:
            result['MemberNumber'] = self.member_number
        result['PersonIdList'] = []
        if self.person_id_list is not None:
            for k in self.person_id_list:
                result['PersonIdList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('MemberNumber') is not None:
            self.member_number = m.get('MemberNumber')
        self.person_id_list = []
        if m.get('PersonIdList') is not None:
            for k in m.get('PersonIdList'):
                temp_model = AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList()
                self.person_id_list.append(temp_model.from_map(k))
        return self


class AddDoubleVerificationGroupsRequest(TeaModel):
    def __init__(
        self,
        double_verification_group_list: List[AddDoubleVerificationGroupsRequestDoubleVerificationGroupList] = None,
        id: str = None,
    ):
        self.double_verification_group_list = double_verification_group_list
        self.id = id

    def validate(self):
        if self.double_verification_group_list:
            for k in self.double_verification_group_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DoubleVerificationGroupList'] = []
        if self.double_verification_group_list is not None:
            for k in self.double_verification_group_list:
                result['DoubleVerificationGroupList'].append(k.to_map() if k else None)
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.double_verification_group_list = []
        if m.get('DoubleVerificationGroupList') is not None:
            for k in m.get('DoubleVerificationGroupList'):
                temp_model = AddDoubleVerificationGroupsRequestDoubleVerificationGroupList()
                self.double_verification_group_list.append(temp_model.from_map(k))
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class AddDoubleVerificationGroupsResponseBodyResultList(TeaModel):
    def __init__(
        self,
        code: str = None,
        group_id: str = None,
        message: str = None,
    ):
        self.code = code
        self.group_id = group_id
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class AddDoubleVerificationGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result_list: List[AddDoubleVerificationGroupsResponseBodyResultList] = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.result_list = result_list

    def validate(self):
        if self.result_list:
            for k in self.result_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ResultList'] = []
        if self.result_list is not None:
            for k in self.result_list:
                result['ResultList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_list = []
        if m.get('ResultList') is not None:
            for k in m.get('ResultList'):
                temp_model = AddDoubleVerificationGroupsResponseBodyResultList()
                self.result_list.append(temp_model.from_map(k))
        return self


class AddDoubleVerificationGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDoubleVerificationGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDoubleVerificationGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddMonitorRequest(TeaModel):
    def __init__(
        self,
        algorithm_vendor: str = None,
        batch_indicator: int = None,
        corp_id: str = None,
        description: str = None,
        monitor_type: str = None,
        notifier_app_secret: str = None,
        notifier_extend_values: str = None,
        notifier_time_out: int = None,
        notifier_type: str = None,
        notifier_url: str = None,
    ):
        self.algorithm_vendor = algorithm_vendor
        self.batch_indicator = batch_indicator
        self.corp_id = corp_id
        self.description = description
        self.monitor_type = monitor_type
        self.notifier_app_secret = notifier_app_secret
        self.notifier_extend_values = notifier_extend_values
        self.notifier_time_out = notifier_time_out
        self.notifier_type = notifier_type
        self.notifier_url = notifier_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_vendor is not None:
            result['AlgorithmVendor'] = self.algorithm_vendor
        if self.batch_indicator is not None:
            result['BatchIndicator'] = self.batch_indicator
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.description is not None:
            result['Description'] = self.description
        if self.monitor_type is not None:
            result['MonitorType'] = self.monitor_type
        if self.notifier_app_secret is not None:
            result['NotifierAppSecret'] = self.notifier_app_secret
        if self.notifier_extend_values is not None:
            result['NotifierExtendValues'] = self.notifier_extend_values
        if self.notifier_time_out is not None:
            result['NotifierTimeOut'] = self.notifier_time_out
        if self.notifier_type is not None:
            result['NotifierType'] = self.notifier_type
        if self.notifier_url is not None:
            result['NotifierUrl'] = self.notifier_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmVendor') is not None:
            self.algorithm_vendor = m.get('AlgorithmVendor')
        if m.get('BatchIndicator') is not None:
            self.batch_indicator = m.get('BatchIndicator')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('MonitorType') is not None:
            self.monitor_type = m.get('MonitorType')
        if m.get('NotifierAppSecret') is not None:
            self.notifier_app_secret = m.get('NotifierAppSecret')
        if m.get('NotifierExtendValues') is not None:
            self.notifier_extend_values = m.get('NotifierExtendValues')
        if m.get('NotifierTimeOut') is not None:
            self.notifier_time_out = m.get('NotifierTimeOut')
        if m.get('NotifierType') is not None:
            self.notifier_type = m.get('NotifierType')
        if m.get('NotifierUrl') is not None:
            self.notifier_url = m.get('NotifierUrl')
        return self


class AddMonitorResponseBodyData(TeaModel):
    def __init__(
        self,
        task_id: str = None,
    ):
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class AddMonitorResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddMonitorResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddMonitorResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddMonitorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddMonitorResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddMonitorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddProfileRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        corp_id: str = None,
        face_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.corp_id = corp_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.name = name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class AddProfileResponseBodyData(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        face_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        profile_id: int = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.name = name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.profile_id = profile_id
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class AddProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddProfileResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddProfileResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddProfileCatalogRequest(TeaModel):
    def __init__(
        self,
        catalog_name: str = None,
        corp_id: str = None,
        isv_sub_id: str = None,
        parent_catalog_id: int = None,
    ):
        self.catalog_name = catalog_name
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.parent_catalog_id = parent_catalog_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_name is not None:
            result['CatalogName'] = self.catalog_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_catalog_id is not None:
            result['ParentCatalogId'] = self.parent_catalog_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogName') is not None:
            self.catalog_name = m.get('CatalogName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCatalogId') is not None:
            self.parent_catalog_id = m.get('ParentCatalogId')
        return self


class AddProfileCatalogResponseBodyData(TeaModel):
    def __init__(
        self,
        catalog_id: int = None,
        catalog_name: str = None,
        isv_sub_id: str = None,
    ):
        self.catalog_id = catalog_id
        self.catalog_name = catalog_name
        self.isv_sub_id = isv_sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.catalog_name is not None:
            result['CatalogName'] = self.catalog_name
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CatalogName') is not None:
            self.catalog_name = m.get('CatalogName')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        return self


class AddProfileCatalogResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddProfileCatalogResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddProfileCatalogResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddProfileCatalogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddProfileCatalogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddProfileCatalogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddSearchItemsRequestSearchItemList(TeaModel):
    def __init__(
        self,
        item_image_url: str = None,
        search_item_id: str = None,
        search_item_name: str = None,
    ):
        self.item_image_url = item_image_url
        self.search_item_id = search_item_id
        self.search_item_name = search_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.search_item_id is not None:
            result['SearchItemId'] = self.search_item_id
        if self.search_item_name is not None:
            result['SearchItemName'] = self.search_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('SearchItemId') is not None:
            self.search_item_id = m.get('SearchItemId')
        if m.get('SearchItemName') is not None:
            self.search_item_name = m.get('SearchItemName')
        return self


class AddSearchItemsRequest(TeaModel):
    def __init__(
        self,
        search_item_list: List[AddSearchItemsRequestSearchItemList] = None,
        search_table_id: str = None,
    ):
        self.search_item_list = search_item_list
        self.search_table_id = search_table_id

    def validate(self):
        if self.search_item_list:
            for k in self.search_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SearchItemList'] = []
        if self.search_item_list is not None:
            for k in self.search_item_list:
                result['SearchItemList'].append(k.to_map() if k else None)
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.search_item_list = []
        if m.get('SearchItemList') is not None:
            for k in m.get('SearchItemList'):
                temp_model = AddSearchItemsRequestSearchItemList()
                self.search_item_list.append(temp_model.from_map(k))
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        return self


class AddSearchItemsShrinkRequest(TeaModel):
    def __init__(
        self,
        search_item_list_shrink: str = None,
        search_table_id: str = None,
    ):
        self.search_item_list_shrink = search_item_list_shrink
        self.search_table_id = search_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_item_list_shrink is not None:
            result['SearchItemList'] = self.search_item_list_shrink
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SearchItemList') is not None:
            self.search_item_list_shrink = m.get('SearchItemList')
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        return self


class AddSearchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        added_item_ids: str = None,
        failed_item_ids: str = None,
    ):
        self.added_item_ids = added_item_ids
        self.failed_item_ids = failed_item_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.added_item_ids is not None:
            result['AddedItemIds'] = self.added_item_ids
        if self.failed_item_ids is not None:
            result['FailedItemIds'] = self.failed_item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddedItemIds') is not None:
            self.added_item_ids = m.get('AddedItemIds')
        if m.get('FailedItemIds') is not None:
            self.failed_item_ids = m.get('FailedItemIds')
        return self


class AddSearchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddSearchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddSearchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddSearchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddSearchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddSearchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddWatchItemsRequestWatchItemList(TeaModel):
    def __init__(
        self,
        item_attributes: str = None,
        item_image_url: str = None,
        watch_item_id: str = None,
        watch_item_name: str = None,
    ):
        self.item_attributes = item_attributes
        self.item_image_url = item_image_url
        self.watch_item_id = watch_item_id
        self.watch_item_name = watch_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_attributes is not None:
            result['ItemAttributes'] = self.item_attributes
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.watch_item_id is not None:
            result['WatchItemId'] = self.watch_item_id
        if self.watch_item_name is not None:
            result['WatchItemName'] = self.watch_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemAttributes') is not None:
            self.item_attributes = m.get('ItemAttributes')
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('WatchItemId') is not None:
            self.watch_item_id = m.get('WatchItemId')
        if m.get('WatchItemName') is not None:
            self.watch_item_name = m.get('WatchItemName')
        return self


class AddWatchItemsRequest(TeaModel):
    def __init__(
        self,
        watch_item_list: List[AddWatchItemsRequestWatchItemList] = None,
        watch_policy_id: str = None,
    ):
        self.watch_item_list = watch_item_list
        self.watch_policy_id = watch_policy_id

    def validate(self):
        if self.watch_item_list:
            for k in self.watch_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['WatchItemList'] = []
        if self.watch_item_list is not None:
            for k in self.watch_item_list:
                result['WatchItemList'].append(k.to_map() if k else None)
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.watch_item_list = []
        if m.get('WatchItemList') is not None:
            for k in m.get('WatchItemList'):
                temp_model = AddWatchItemsRequestWatchItemList()
                self.watch_item_list.append(temp_model.from_map(k))
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        return self


class AddWatchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        added_item_ids: str = None,
        failed_item_ids: str = None,
    ):
        self.added_item_ids = added_item_ids
        self.failed_item_ids = failed_item_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.added_item_ids is not None:
            result['AddedItemIds'] = self.added_item_ids
        if self.failed_item_ids is not None:
            result['FailedItemIds'] = self.failed_item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddedItemIds') is not None:
            self.added_item_ids = m.get('AddedItemIds')
        if m.get('FailedItemIds') is not None:
            self.failed_item_ids = m.get('FailedItemIds')
        return self


class AddWatchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AddWatchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = AddWatchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddWatchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddWatchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddWatchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchDeleteInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_ids: List[str] = None,
        project_id: str = None,
    ):
        self.instance_ids = instance_ids
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_ids is not None:
            result['InstanceIds'] = self.instance_ids
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceIds') is not None:
            self.instance_ids = m.get('InstanceIds')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class BatchDeleteInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_ids_shrink: str = None,
        project_id: str = None,
    ):
        self.instance_ids_shrink = instance_ids_shrink
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_ids_shrink is not None:
            result['InstanceIds'] = self.instance_ids_shrink
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceIds') is not None:
            self.instance_ids_shrink = m.get('InstanceIds')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class BatchDeleteInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BatchDeleteInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BatchDeleteInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchDeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BindCorpGroupRequest(TeaModel):
    def __init__(
        self,
        corp_group_id: str = None,
        corp_id: str = None,
    ):
        self.corp_group_id = corp_group_id
        self.corp_id = corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_group_id is not None:
            result['CorpGroupId'] = self.corp_group_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpGroupId') is not None:
            self.corp_group_id = m.get('CorpGroupId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        return self


class BindCorpGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BindCorpGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BindCorpGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindCorpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BindDevicesRequestSubDeviceList(TeaModel):
    def __init__(
        self,
        access_protocol: str = None,
        login_name: str = None,
        pin: str = None,
        sub_device_ip: str = None,
        sub_device_name: str = None,
        sub_device_port: str = None,
    ):
        self.access_protocol = access_protocol
        self.login_name = login_name
        self.pin = pin
        self.sub_device_ip = sub_device_ip
        self.sub_device_name = sub_device_name
        self.sub_device_port = sub_device_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_protocol is not None:
            result['AccessProtocol'] = self.access_protocol
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.pin is not None:
            result['PIN'] = self.pin
        if self.sub_device_ip is not None:
            result['SubDeviceIp'] = self.sub_device_ip
        if self.sub_device_name is not None:
            result['SubDeviceName'] = self.sub_device_name
        if self.sub_device_port is not None:
            result['SubDevicePort'] = self.sub_device_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessProtocol') is not None:
            self.access_protocol = m.get('AccessProtocol')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('PIN') is not None:
            self.pin = m.get('PIN')
        if m.get('SubDeviceIp') is not None:
            self.sub_device_ip = m.get('SubDeviceIp')
        if m.get('SubDeviceName') is not None:
            self.sub_device_name = m.get('SubDeviceName')
        if m.get('SubDevicePort') is not None:
            self.sub_device_port = m.get('SubDevicePort')
        return self


class BindDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        sub_device_list: List[BindDevicesRequestSubDeviceList] = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.sub_device_list = sub_device_list

    def validate(self):
        if self.sub_device_list:
            for k in self.sub_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        result['SubDeviceList'] = []
        if self.sub_device_list is not None:
            for k in self.sub_device_list:
                result['SubDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        self.sub_device_list = []
        if m.get('SubDeviceList') is not None:
            for k in m.get('SubDeviceList'):
                temp_model = BindDevicesRequestSubDeviceList()
                self.sub_device_list.append(temp_model.from_map(k))
        return self


class BindDevicesShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        sub_device_list_shrink: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.sub_device_list_shrink = sub_device_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.sub_device_list_shrink is not None:
            result['SubDeviceList'] = self.sub_device_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('SubDeviceList') is not None:
            self.sub_device_list_shrink = m.get('SubDeviceList')
        return self


class BindDevicesResponseBodyDataSubDeviceList(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        sub_device_id: str = None,
        sub_device_ip: str = None,
        sub_device_name: str = None,
        sub_device_num: str = None,
        sub_device_port: str = None,
    ):
        self.code = code
        self.message = message
        self.sub_device_id = sub_device_id
        self.sub_device_ip = sub_device_ip
        self.sub_device_name = sub_device_name
        self.sub_device_num = sub_device_num
        self.sub_device_port = sub_device_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.sub_device_id is not None:
            result['SubDeviceId'] = self.sub_device_id
        if self.sub_device_ip is not None:
            result['SubDeviceIp'] = self.sub_device_ip
        if self.sub_device_name is not None:
            result['SubDeviceName'] = self.sub_device_name
        if self.sub_device_num is not None:
            result['SubDeviceNum'] = self.sub_device_num
        if self.sub_device_port is not None:
            result['SubDevicePort'] = self.sub_device_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('SubDeviceId') is not None:
            self.sub_device_id = m.get('SubDeviceId')
        if m.get('SubDeviceIp') is not None:
            self.sub_device_ip = m.get('SubDeviceIp')
        if m.get('SubDeviceName') is not None:
            self.sub_device_name = m.get('SubDeviceName')
        if m.get('SubDeviceNum') is not None:
            self.sub_device_num = m.get('SubDeviceNum')
        if m.get('SubDevicePort') is not None:
            self.sub_device_port = m.get('SubDevicePort')
        return self


class BindDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        sub_device_list: List[BindDevicesResponseBodyDataSubDeviceList] = None,
    ):
        self.sub_device_list = sub_device_list

    def validate(self):
        if self.sub_device_list:
            for k in self.sub_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SubDeviceList'] = []
        if self.sub_device_list is not None:
            for k in self.sub_device_list:
                result['SubDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sub_device_list = []
        if m.get('SubDeviceList') is not None:
            for k in m.get('SubDeviceList'):
                temp_model = BindDevicesResponseBodyDataSubDeviceList()
                self.sub_device_list.append(temp_model.from_map(k))
        return self


class BindDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: BindDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = BindDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class BindDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BindDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BindPersonRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        person_id: str = None,
        person_matching_rate: str = None,
        profile_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.person_id = person_id
        self.person_matching_rate = person_matching_rate
        self.profile_id = profile_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_matching_rate is not None:
            result['PersonMatchingRate'] = self.person_matching_rate
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonMatchingRate') is not None:
            self.person_matching_rate = m.get('PersonMatchingRate')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        return self


class BindPersonResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class BindPersonResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BindPersonResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindPersonResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BindUserRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        matching_rate: str = None,
        person_id: str = None,
        user_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.matching_rate = matching_rate
        self.person_id = person_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.matching_rate is not None:
            result['MatchingRate'] = self.matching_rate
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('MatchingRate') is not None:
            self.matching_rate = m.get('MatchingRate')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class BindUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class BindUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BindUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckAIInstanceNameRequest(TeaModel):
    def __init__(
        self,
        instance_name: str = None,
        instance_type: str = None,
        project_id: str = None,
    ):
        # 实例名称
        self.instance_name = instance_name
        # 实例类型
        self.instance_type = instance_type
        # 所属项目Id
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class CheckAIInstanceNameResponseBodyData(TeaModel):
    def __init__(
        self,
        available: bool = None,
    ):
        self.available = available

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.available is not None:
            result['Available'] = self.available
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Available') is not None:
            self.available = m.get('Available')
        return self


class CheckAIInstanceNameResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CheckAIInstanceNameResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        # 返回code码
        self.code = code
        # 返回数据
        self.data = data
        # 错误信息
        self.message = message
        # 请求id
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CheckAIInstanceNameResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CheckAIInstanceNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CheckAIInstanceNameResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckAIInstanceNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckSLRRequest(TeaModel):
    def __init__(
        self,
        service_name: str = None,
    ):
        self.service_name = service_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.service_name is not None:
            result['ServiceName'] = self.service_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ServiceName') is not None:
            self.service_name = m.get('ServiceName')
        return self


class CheckSLRResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CheckSLRResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CheckSLRResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckSLRResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ControlAiotDeviceRequestMiFareCard(TeaModel):
    def __init__(
        self,
        area_code: int = None,
        area_deviate: int = None,
        area_len: int = None,
        enabled: str = None,
        key_type: int = None,
        last_change: str = None,
        secret_key: str = None,
    ):
        self.area_code = area_code
        self.area_deviate = area_deviate
        self.area_len = area_len
        self.enabled = enabled
        self.key_type = key_type
        self.last_change = last_change
        self.secret_key = secret_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.area_code is not None:
            result['AreaCode'] = self.area_code
        if self.area_deviate is not None:
            result['AreaDeviate'] = self.area_deviate
        if self.area_len is not None:
            result['AreaLen'] = self.area_len
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.key_type is not None:
            result['KeyType'] = self.key_type
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.secret_key is not None:
            result['SecretKey'] = self.secret_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AreaCode') is not None:
            self.area_code = m.get('AreaCode')
        if m.get('AreaDeviate') is not None:
            self.area_deviate = m.get('AreaDeviate')
        if m.get('AreaLen') is not None:
            self.area_len = m.get('AreaLen')
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('KeyType') is not None:
            self.key_type = m.get('KeyType')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('SecretKey') is not None:
            self.secret_key = m.get('SecretKey')
        return self


class ControlAiotDeviceRequest(TeaModel):
    def __init__(
        self,
        associated_device_id: str = None,
        associated_ipaddr: str = None,
        associated_port: int = None,
        associated_verification_enable: str = None,
        barrier_command: int = None,
        check_enabled: str = None,
        command_type: int = None,
        double_verification_group_enabled: str = None,
        gate_ctl_status: int = None,
        id: str = None,
        identity_number: str = None,
        is_proxy: bool = None,
        mi_fare_card: ControlAiotDeviceRequestMiFareCard = None,
        name: str = None,
        reboot_device: str = None,
        single_interval: int = None,
        super_password: str = None,
        upgrade_file_url: str = None,
    ):
        self.associated_device_id = associated_device_id
        self.associated_ipaddr = associated_ipaddr
        self.associated_port = associated_port
        self.associated_verification_enable = associated_verification_enable
        self.barrier_command = barrier_command
        self.check_enabled = check_enabled
        self.command_type = command_type
        self.double_verification_group_enabled = double_verification_group_enabled
        self.gate_ctl_status = gate_ctl_status
        self.id = id
        self.identity_number = identity_number
        self.is_proxy = is_proxy
        self.mi_fare_card = mi_fare_card
        self.name = name
        self.reboot_device = reboot_device
        self.single_interval = single_interval
        self.super_password = super_password
        self.upgrade_file_url = upgrade_file_url

    def validate(self):
        if self.mi_fare_card:
            self.mi_fare_card.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.associated_device_id is not None:
            result['AssociatedDeviceId'] = self.associated_device_id
        if self.associated_ipaddr is not None:
            result['AssociatedIPAddr'] = self.associated_ipaddr
        if self.associated_port is not None:
            result['AssociatedPort'] = self.associated_port
        if self.associated_verification_enable is not None:
            result['AssociatedVerificationEnable'] = self.associated_verification_enable
        if self.barrier_command is not None:
            result['BarrierCommand'] = self.barrier_command
        if self.check_enabled is not None:
            result['CheckEnabled'] = self.check_enabled
        if self.command_type is not None:
            result['CommandType'] = self.command_type
        if self.double_verification_group_enabled is not None:
            result['DoubleVerificationGroupEnabled'] = self.double_verification_group_enabled
        if self.gate_ctl_status is not None:
            result['GateCtlStatus'] = self.gate_ctl_status
        if self.id is not None:
            result['Id'] = self.id
        if self.identity_number is not None:
            result['IdentityNumber'] = self.identity_number
        if self.is_proxy is not None:
            result['IsProxy'] = self.is_proxy
        if self.mi_fare_card is not None:
            result['MiFareCard'] = self.mi_fare_card.to_map()
        if self.name is not None:
            result['Name'] = self.name
        if self.reboot_device is not None:
            result['RebootDevice'] = self.reboot_device
        if self.single_interval is not None:
            result['SingleInterval'] = self.single_interval
        if self.super_password is not None:
            result['SuperPassword'] = self.super_password
        if self.upgrade_file_url is not None:
            result['UpgradeFileURL'] = self.upgrade_file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AssociatedDeviceId') is not None:
            self.associated_device_id = m.get('AssociatedDeviceId')
        if m.get('AssociatedIPAddr') is not None:
            self.associated_ipaddr = m.get('AssociatedIPAddr')
        if m.get('AssociatedPort') is not None:
            self.associated_port = m.get('AssociatedPort')
        if m.get('AssociatedVerificationEnable') is not None:
            self.associated_verification_enable = m.get('AssociatedVerificationEnable')
        if m.get('BarrierCommand') is not None:
            self.barrier_command = m.get('BarrierCommand')
        if m.get('CheckEnabled') is not None:
            self.check_enabled = m.get('CheckEnabled')
        if m.get('CommandType') is not None:
            self.command_type = m.get('CommandType')
        if m.get('DoubleVerificationGroupEnabled') is not None:
            self.double_verification_group_enabled = m.get('DoubleVerificationGroupEnabled')
        if m.get('GateCtlStatus') is not None:
            self.gate_ctl_status = m.get('GateCtlStatus')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IdentityNumber') is not None:
            self.identity_number = m.get('IdentityNumber')
        if m.get('IsProxy') is not None:
            self.is_proxy = m.get('IsProxy')
        if m.get('MiFareCard') is not None:
            temp_model = ControlAiotDeviceRequestMiFareCard()
            self.mi_fare_card = temp_model.from_map(m['MiFareCard'])
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RebootDevice') is not None:
            self.reboot_device = m.get('RebootDevice')
        if m.get('SingleInterval') is not None:
            self.single_interval = m.get('SingleInterval')
        if m.get('SuperPassword') is not None:
            self.super_password = m.get('SuperPassword')
        if m.get('UpgradeFileURL') is not None:
            self.upgrade_file_url = m.get('UpgradeFileURL')
        return self


class ControlAiotDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ControlAiotDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ControlAiotDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ControlAiotDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAIInstanceRequestDataSourceTimes(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        start_time: str = None,
    ):
        # 视频结束时间
        self.end_time = end_time
        # 视频开始时间
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class CreateAIInstanceRequestScheduleTimes(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        start_time: str = None,
    ):
        # 结束执行时间
        self.end_time = end_time
        # 开始执行时间
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class CreateAIInstanceRequest(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        algorithm_name: str = None,
        compute_type: str = None,
        data_source: str = None,
        data_source_times: List[CreateAIInstanceRequestDataSourceTimes] = None,
        data_type: str = None,
        instance_name: str = None,
        instance_type: str = None,
        project_id: str = None,
        schedule_cycle_dates: List[int] = None,
        schedule_times: List[CreateAIInstanceRequestScheduleTimes] = None,
        schedule_type: str = None,
        spf: int = None,
    ):
        # 算子Id
        self.algorithm_id = algorithm_id
        # 算法名称
        self.algorithm_name = algorithm_name
        # 计算类型
        self.compute_type = compute_type
        # 数据来源
        self.data_source = data_source
        # 数据源时间段
        self.data_source_times = data_source_times
        # 数据类型
        self.data_type = data_type
        # 实例名称
        self.instance_name = instance_name
        # 实例类型
        self.instance_type = instance_type
        # 所属项目Id
        self.project_id = project_id
        # ScheduleType为EVERY_WEEK、EVERY_MONTH时必填
        self.schedule_cycle_dates = schedule_cycle_dates
        # 执行时间段，支持多段，指定多段时不能重合交错。
        self.schedule_times = schedule_times
        # 调度类型
        self.schedule_type = schedule_type
        # 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
        self.spf = spf

    def validate(self):
        if self.data_source_times:
            for k in self.data_source_times:
                if k:
                    k.validate()
        if self.schedule_times:
            for k in self.schedule_times:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_name is not None:
            result['AlgorithmName'] = self.algorithm_name
        if self.compute_type is not None:
            result['ComputeType'] = self.compute_type
        if self.data_source is not None:
            result['DataSource'] = self.data_source
        result['DataSourceTimes'] = []
        if self.data_source_times is not None:
            for k in self.data_source_times:
                result['DataSourceTimes'].append(k.to_map() if k else None)
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.schedule_cycle_dates is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates
        result['ScheduleTimes'] = []
        if self.schedule_times is not None:
            for k in self.schedule_times:
                result['ScheduleTimes'].append(k.to_map() if k else None)
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.spf is not None:
            result['Spf'] = self.spf
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmName') is not None:
            self.algorithm_name = m.get('AlgorithmName')
        if m.get('ComputeType') is not None:
            self.compute_type = m.get('ComputeType')
        if m.get('DataSource') is not None:
            self.data_source = m.get('DataSource')
        self.data_source_times = []
        if m.get('DataSourceTimes') is not None:
            for k in m.get('DataSourceTimes'):
                temp_model = CreateAIInstanceRequestDataSourceTimes()
                self.data_source_times.append(temp_model.from_map(k))
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates = m.get('ScheduleCycleDates')
        self.schedule_times = []
        if m.get('ScheduleTimes') is not None:
            for k in m.get('ScheduleTimes'):
                temp_model = CreateAIInstanceRequestScheduleTimes()
                self.schedule_times.append(temp_model.from_map(k))
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('Spf') is not None:
            self.spf = m.get('Spf')
        return self


class CreateAIInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        algorithm_name: str = None,
        compute_type: str = None,
        data_source: str = None,
        data_source_times_shrink: str = None,
        data_type: str = None,
        instance_name: str = None,
        instance_type: str = None,
        project_id: str = None,
        schedule_cycle_dates_shrink: str = None,
        schedule_times_shrink: str = None,
        schedule_type: str = None,
        spf: int = None,
    ):
        # 算子Id
        self.algorithm_id = algorithm_id
        # 算法名称
        self.algorithm_name = algorithm_name
        # 计算类型
        self.compute_type = compute_type
        # 数据来源
        self.data_source = data_source
        # 数据源时间段
        self.data_source_times_shrink = data_source_times_shrink
        # 数据类型
        self.data_type = data_type
        # 实例名称
        self.instance_name = instance_name
        # 实例类型
        self.instance_type = instance_type
        # 所属项目Id
        self.project_id = project_id
        # ScheduleType为EVERY_WEEK、EVERY_MONTH时必填
        self.schedule_cycle_dates_shrink = schedule_cycle_dates_shrink
        # 执行时间段，支持多段，指定多段时不能重合交错。
        self.schedule_times_shrink = schedule_times_shrink
        # 调度类型
        self.schedule_type = schedule_type
        # 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
        self.spf = spf

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_name is not None:
            result['AlgorithmName'] = self.algorithm_name
        if self.compute_type is not None:
            result['ComputeType'] = self.compute_type
        if self.data_source is not None:
            result['DataSource'] = self.data_source
        if self.data_source_times_shrink is not None:
            result['DataSourceTimes'] = self.data_source_times_shrink
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.schedule_cycle_dates_shrink is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates_shrink
        if self.schedule_times_shrink is not None:
            result['ScheduleTimes'] = self.schedule_times_shrink
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.spf is not None:
            result['Spf'] = self.spf
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmName') is not None:
            self.algorithm_name = m.get('AlgorithmName')
        if m.get('ComputeType') is not None:
            self.compute_type = m.get('ComputeType')
        if m.get('DataSource') is not None:
            self.data_source = m.get('DataSource')
        if m.get('DataSourceTimes') is not None:
            self.data_source_times_shrink = m.get('DataSourceTimes')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates_shrink = m.get('ScheduleCycleDates')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times_shrink = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('Spf') is not None:
            self.spf = m.get('Spf')
        return self


class CreateAIInstanceResponseBodyData(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        instance_id: str = None,
    ):
        # 当前实例ACU使用量
        self.acu_used = acu_used
        # 实例Id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateAIInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateAIInstanceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        # 返回code码
        self.code = code
        # 返回数据
        self.data = data
        # 错误信息
        self.message = message
        # 请求id
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateAIInstanceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateAIInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAIInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAIInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateComputeInstanceRequestAlgorithms(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        algorithm_name: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.algorithm_name = algorithm_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_name is not None:
            result['AlgorithmName'] = self.algorithm_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmName') is not None:
            self.algorithm_name = m.get('AlgorithmName')
        return self


class CreateComputeInstanceRequestDevices(TeaModel):
    def __init__(
        self,
        bit_rate: str = None,
        coding_format: str = None,
        device_id: str = None,
        region_id: str = None,
        resolving_power: str = None,
        start_stream: bool = None,
    ):
        self.bit_rate = bit_rate
        self.coding_format = coding_format
        self.device_id = device_id
        self.region_id = region_id
        self.resolving_power = resolving_power
        self.start_stream = start_stream

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        if self.coding_format is not None:
            result['CodingFormat'] = self.coding_format
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resolving_power is not None:
            result['ResolvingPower'] = self.resolving_power
        if self.start_stream is not None:
            result['StartStream'] = self.start_stream
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        if m.get('CodingFormat') is not None:
            self.coding_format = m.get('CodingFormat')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResolvingPower') is not None:
            self.resolving_power = m.get('ResolvingPower')
        if m.get('StartStream') is not None:
            self.start_stream = m.get('StartStream')
        return self


class CreateComputeInstanceRequest(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        algorithm_type: str = None,
        algorithms: List[CreateComputeInstanceRequestAlgorithms] = None,
        compute_picture_type: str = None,
        compute_picture_value: str = None,
        datasource_type: str = None,
        devices: List[CreateComputeInstanceRequestDevices] = None,
        instance_name: str = None,
        is_frame_extraction: str = None,
        is_polling: bool = None,
        overall_execution_time: str = None,
        pic_topic: str = None,
        pic_type: str = None,
        polling_configs: str = None,
        project_id: str = None,
        schedule_cycle_date: str = None,
        schedule_day: str = None,
        schedule_day_size: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        slice_execution_time: str = None,
        storage_used: str = None,
    ):
        self.acu_used = acu_used
        self.algorithm_type = algorithm_type
        self.algorithms = algorithms
        self.compute_picture_type = compute_picture_type
        self.compute_picture_value = compute_picture_value
        self.datasource_type = datasource_type
        self.devices = devices
        self.instance_name = instance_name
        self.is_frame_extraction = is_frame_extraction
        self.is_polling = is_polling
        self.overall_execution_time = overall_execution_time
        self.pic_topic = pic_topic
        self.pic_type = pic_type
        self.polling_configs = polling_configs
        self.project_id = project_id
        self.schedule_cycle_date = schedule_cycle_date
        self.schedule_day = schedule_day
        self.schedule_day_size = schedule_day_size
        self.schedule_times = schedule_times
        self.schedule_type = schedule_type
        self.slice_execution_time = slice_execution_time
        self.storage_used = storage_used

    def validate(self):
        if self.algorithms:
            for k in self.algorithms:
                if k:
                    k.validate()
        if self.devices:
            for k in self.devices:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        result['Algorithms'] = []
        if self.algorithms is not None:
            for k in self.algorithms:
                result['Algorithms'].append(k.to_map() if k else None)
        if self.compute_picture_type is not None:
            result['ComputePictureType'] = self.compute_picture_type
        if self.compute_picture_value is not None:
            result['ComputePictureValue'] = self.compute_picture_value
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        result['Devices'] = []
        if self.devices is not None:
            for k in self.devices:
                result['Devices'].append(k.to_map() if k else None)
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_frame_extraction is not None:
            result['IsFrameExtraction'] = self.is_frame_extraction
        if self.is_polling is not None:
            result['IsPolling'] = self.is_polling
        if self.overall_execution_time is not None:
            result['OverallExecutionTime'] = self.overall_execution_time
        if self.pic_topic is not None:
            result['PicTopic'] = self.pic_topic
        if self.pic_type is not None:
            result['PicType'] = self.pic_type
        if self.polling_configs is not None:
            result['PollingConfigs'] = self.polling_configs
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.schedule_cycle_date is not None:
            result['ScheduleCycleDate'] = self.schedule_cycle_date
        if self.schedule_day is not None:
            result['ScheduleDay'] = self.schedule_day
        if self.schedule_day_size is not None:
            result['ScheduleDaySize'] = self.schedule_day_size
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.slice_execution_time is not None:
            result['SliceExecutionTime'] = self.slice_execution_time
        if self.storage_used is not None:
            result['StorageUsed'] = self.storage_used
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        self.algorithms = []
        if m.get('Algorithms') is not None:
            for k in m.get('Algorithms'):
                temp_model = CreateComputeInstanceRequestAlgorithms()
                self.algorithms.append(temp_model.from_map(k))
        if m.get('ComputePictureType') is not None:
            self.compute_picture_type = m.get('ComputePictureType')
        if m.get('ComputePictureValue') is not None:
            self.compute_picture_value = m.get('ComputePictureValue')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        self.devices = []
        if m.get('Devices') is not None:
            for k in m.get('Devices'):
                temp_model = CreateComputeInstanceRequestDevices()
                self.devices.append(temp_model.from_map(k))
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsFrameExtraction') is not None:
            self.is_frame_extraction = m.get('IsFrameExtraction')
        if m.get('IsPolling') is not None:
            self.is_polling = m.get('IsPolling')
        if m.get('OverallExecutionTime') is not None:
            self.overall_execution_time = m.get('OverallExecutionTime')
        if m.get('PicTopic') is not None:
            self.pic_topic = m.get('PicTopic')
        if m.get('PicType') is not None:
            self.pic_type = m.get('PicType')
        if m.get('PollingConfigs') is not None:
            self.polling_configs = m.get('PollingConfigs')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ScheduleCycleDate') is not None:
            self.schedule_cycle_date = m.get('ScheduleCycleDate')
        if m.get('ScheduleDay') is not None:
            self.schedule_day = m.get('ScheduleDay')
        if m.get('ScheduleDaySize') is not None:
            self.schedule_day_size = m.get('ScheduleDaySize')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('SliceExecutionTime') is not None:
            self.slice_execution_time = m.get('SliceExecutionTime')
        if m.get('StorageUsed') is not None:
            self.storage_used = m.get('StorageUsed')
        return self


class CreateComputeInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        algorithm_type: str = None,
        algorithms_shrink: str = None,
        compute_picture_type: str = None,
        compute_picture_value: str = None,
        datasource_type: str = None,
        devices_shrink: str = None,
        instance_name: str = None,
        is_frame_extraction: str = None,
        is_polling: bool = None,
        overall_execution_time: str = None,
        pic_topic: str = None,
        pic_type: str = None,
        polling_configs: str = None,
        project_id: str = None,
        schedule_cycle_date: str = None,
        schedule_day: str = None,
        schedule_day_size: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        slice_execution_time: str = None,
        storage_used: str = None,
    ):
        self.acu_used = acu_used
        self.algorithm_type = algorithm_type
        self.algorithms_shrink = algorithms_shrink
        self.compute_picture_type = compute_picture_type
        self.compute_picture_value = compute_picture_value
        self.datasource_type = datasource_type
        self.devices_shrink = devices_shrink
        self.instance_name = instance_name
        self.is_frame_extraction = is_frame_extraction
        self.is_polling = is_polling
        self.overall_execution_time = overall_execution_time
        self.pic_topic = pic_topic
        self.pic_type = pic_type
        self.polling_configs = polling_configs
        self.project_id = project_id
        self.schedule_cycle_date = schedule_cycle_date
        self.schedule_day = schedule_day
        self.schedule_day_size = schedule_day_size
        self.schedule_times = schedule_times
        self.schedule_type = schedule_type
        self.slice_execution_time = slice_execution_time
        self.storage_used = storage_used

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithms_shrink is not None:
            result['Algorithms'] = self.algorithms_shrink
        if self.compute_picture_type is not None:
            result['ComputePictureType'] = self.compute_picture_type
        if self.compute_picture_value is not None:
            result['ComputePictureValue'] = self.compute_picture_value
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.devices_shrink is not None:
            result['Devices'] = self.devices_shrink
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_frame_extraction is not None:
            result['IsFrameExtraction'] = self.is_frame_extraction
        if self.is_polling is not None:
            result['IsPolling'] = self.is_polling
        if self.overall_execution_time is not None:
            result['OverallExecutionTime'] = self.overall_execution_time
        if self.pic_topic is not None:
            result['PicTopic'] = self.pic_topic
        if self.pic_type is not None:
            result['PicType'] = self.pic_type
        if self.polling_configs is not None:
            result['PollingConfigs'] = self.polling_configs
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.schedule_cycle_date is not None:
            result['ScheduleCycleDate'] = self.schedule_cycle_date
        if self.schedule_day is not None:
            result['ScheduleDay'] = self.schedule_day
        if self.schedule_day_size is not None:
            result['ScheduleDaySize'] = self.schedule_day_size
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.slice_execution_time is not None:
            result['SliceExecutionTime'] = self.slice_execution_time
        if self.storage_used is not None:
            result['StorageUsed'] = self.storage_used
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('Algorithms') is not None:
            self.algorithms_shrink = m.get('Algorithms')
        if m.get('ComputePictureType') is not None:
            self.compute_picture_type = m.get('ComputePictureType')
        if m.get('ComputePictureValue') is not None:
            self.compute_picture_value = m.get('ComputePictureValue')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('Devices') is not None:
            self.devices_shrink = m.get('Devices')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsFrameExtraction') is not None:
            self.is_frame_extraction = m.get('IsFrameExtraction')
        if m.get('IsPolling') is not None:
            self.is_polling = m.get('IsPolling')
        if m.get('OverallExecutionTime') is not None:
            self.overall_execution_time = m.get('OverallExecutionTime')
        if m.get('PicTopic') is not None:
            self.pic_topic = m.get('PicTopic')
        if m.get('PicType') is not None:
            self.pic_type = m.get('PicType')
        if m.get('PollingConfigs') is not None:
            self.polling_configs = m.get('PollingConfigs')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ScheduleCycleDate') is not None:
            self.schedule_cycle_date = m.get('ScheduleCycleDate')
        if m.get('ScheduleDay') is not None:
            self.schedule_day = m.get('ScheduleDay')
        if m.get('ScheduleDaySize') is not None:
            self.schedule_day_size = m.get('ScheduleDaySize')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('SliceExecutionTime') is not None:
            self.slice_execution_time = m.get('SliceExecutionTime')
        if m.get('StorageUsed') is not None:
            self.storage_used = m.get('StorageUsed')
        return self


class CreateComputeInstanceResponseBodyData(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        instance_id: str = None,
    ):
        self.acu_used = acu_used
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateComputeInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateComputeInstanceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateComputeInstanceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateComputeInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateComputeInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateComputeInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCorpRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        app_name: str = None,
        corp_name: str = None,
        description: str = None,
        icon_path: str = None,
        isv_sub_id: str = None,
        parent_corp_id: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.app_name = app_name
        self.corp_name = corp_name
        self.description = description
        self.icon_path = icon_path
        self.isv_sub_id = isv_sub_id
        self.parent_corp_id = parent_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.corp_name is not None:
            result['CorpName'] = self.corp_name
        if self.description is not None:
            result['Description'] = self.description
        if self.icon_path is not None:
            result['IconPath'] = self.icon_path
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_corp_id is not None:
            result['ParentCorpId'] = self.parent_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('CorpName') is not None:
            self.corp_name = m.get('CorpName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('IconPath') is not None:
            self.icon_path = m.get('IconPath')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCorpId') is not None:
            self.parent_corp_id = m.get('ParentCorpId')
        return self


class CreateCorpResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        corp_id: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.corp_id = corp_id
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateCorpResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCorpResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCorpResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCorpGroupRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        corp_id: str = None,
        group_id: str = None,
    ):
        self.client_token = client_token
        self.corp_id = corp_id
        self.group_id = group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        return self


class CreateCorpGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCorpGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCorpGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCorpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDeviceRequest(TeaModel):
    def __init__(
        self,
        activate_code: str = None,
        audio_enable: str = None,
        city_code: str = None,
        corp_id: str = None,
        data_source_type: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_id: str = None,
        device_model: str = None,
        device_name: str = None,
        device_rate: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_sn: str = None,
        device_type: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        parent_device_id: str = None,
        sub_device_count: int = None,
        sub_device_id_list: str = None,
        up_stream_mode: str = None,
        vendor: str = None,
    ):
        self.activate_code = activate_code
        self.audio_enable = audio_enable
        self.city_code = city_code
        self.corp_id = corp_id
        self.data_source_type = data_source_type
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_id = device_id
        self.device_model = device_model
        self.device_name = device_name
        self.device_rate = device_rate
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_sn = device_sn
        self.device_type = device_type
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.parent_device_id = parent_device_id
        self.sub_device_count = sub_device_count
        self.sub_device_id_list = sub_device_id_list
        self.up_stream_mode = up_stream_mode
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activate_code is not None:
            result['ActivateCode'] = self.activate_code
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.city_code is not None:
            result['CityCode'] = self.city_code
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.parent_device_id is not None:
            result['ParentDeviceId'] = self.parent_device_id
        if self.sub_device_count is not None:
            result['SubDeviceCount'] = self.sub_device_count
        if self.sub_device_id_list is not None:
            result['SubDeviceIdList'] = self.sub_device_id_list
        if self.up_stream_mode is not None:
            result['UpStreamMode'] = self.up_stream_mode
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActivateCode') is not None:
            self.activate_code = m.get('ActivateCode')
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('CityCode') is not None:
            self.city_code = m.get('CityCode')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('ParentDeviceId') is not None:
            self.parent_device_id = m.get('ParentDeviceId')
        if m.get('SubDeviceCount') is not None:
            self.sub_device_count = m.get('SubDeviceCount')
        if m.get('SubDeviceIdList') is not None:
            self.sub_device_id_list = m.get('SubDeviceIdList')
        if m.get('UpStreamMode') is not None:
            self.up_stream_mode = m.get('UpStreamMode')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateDeviceResponseBodyDataSubDeviceInfo(TeaModel):
    def __init__(
        self,
        sub_device_id: str = None,
    ):
        self.sub_device_id = sub_device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sub_device_id is not None:
            result['SubDeviceId'] = self.sub_device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SubDeviceId') is not None:
            self.sub_device_id = m.get('SubDeviceId')
        return self


class CreateDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        server_realm: str = None,
        sub_device_info: List[CreateDeviceResponseBodyDataSubDeviceInfo] = None,
    ):
        self.device_id = device_id
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_realm = server_realm
        self.sub_device_info = sub_device_info

    def validate(self):
        if self.sub_device_info:
            for k in self.sub_device_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_realm is not None:
            result['ServerRealm'] = self.server_realm
        result['SubDeviceInfo'] = []
        if self.sub_device_info is not None:
            for k in self.sub_device_info:
                result['SubDeviceInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerRealm') is not None:
            self.server_realm = m.get('ServerRealm')
        self.sub_device_info = []
        if m.get('SubDeviceInfo') is not None:
            for k in m.get('SubDeviceInfo'):
                temp_model = CreateDeviceResponseBodyDataSubDeviceInfo()
                self.sub_device_info.append(temp_model.from_map(k))
        return self


class CreateDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateDeviceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateDeviceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateModelServiceRequest(TeaModel):
    def __init__(
        self,
        algorithm_code: str = None,
        client_token: str = None,
        instance_name: str = None,
        qpsrequired: int = None,
    ):
        self.algorithm_code = algorithm_code
        self.client_token = client_token
        self.instance_name = instance_name
        self.qpsrequired = qpsrequired

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_code is not None:
            result['AlgorithmCode'] = self.algorithm_code
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.qpsrequired is not None:
            result['QPSRequired'] = self.qpsrequired
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmCode') is not None:
            self.algorithm_code = m.get('AlgorithmCode')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('QPSRequired') is not None:
            self.qpsrequired = m.get('QPSRequired')
        return self


class CreateModelServiceResponseBodyDataModelApiList(TeaModel):
    def __init__(
        self,
        algorithm_api_code: str = None,
        api_id: str = None,
        api_name: str = None,
        api_path: str = None,
        create_time: str = None,
    ):
        self.algorithm_api_code = algorithm_api_code
        self.api_id = api_id
        self.api_name = api_name
        self.api_path = api_path
        self.create_time = create_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_api_code is not None:
            result['AlgorithmApiCode'] = self.algorithm_api_code
        if self.api_id is not None:
            result['ApiId'] = self.api_id
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.api_path is not None:
            result['ApiPath'] = self.api_path
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmApiCode') is not None:
            self.algorithm_api_code = m.get('AlgorithmApiCode')
        if m.get('ApiId') is not None:
            self.api_id = m.get('ApiId')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('ApiPath') is not None:
            self.api_path = m.get('ApiPath')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        return self


class CreateModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        app_code: str = None,
        model_api_list: List[CreateModelServiceResponseBodyDataModelApiList] = None,
        model_service_instance_id: str = None,
        model_service_status: str = None,
        qps_required: int = None,
    ):
        self.app_code = app_code
        self.model_api_list = model_api_list
        self.model_service_instance_id = model_service_instance_id
        self.model_service_status = model_service_status
        self.qps_required = qps_required

    def validate(self):
        if self.model_api_list:
            for k in self.model_api_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        result['ModelApiList'] = []
        if self.model_api_list is not None:
            for k in self.model_api_list:
                result['ModelApiList'].append(k.to_map() if k else None)
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        if self.qps_required is not None:
            result['QpsRequired'] = self.qps_required
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        self.model_api_list = []
        if m.get('ModelApiList') is not None:
            for k in m.get('ModelApiList'):
                temp_model = CreateModelServiceResponseBodyDataModelApiList()
                self.model_api_list.append(temp_model.from_map(k))
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        if m.get('QpsRequired') is not None:
            self.qps_required = m.get('QpsRequired')
        return self


class CreateModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNewDeviceRequest(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        corp_id: str = None,
        data_source_type: str = None,
        device_address: str = None,
        device_id: str = None,
        device_model: str = None,
        device_name: str = None,
        device_type: str = None,
        file_path: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        sub_device_count: int = None,
        vendor: str = None,
    ):
        self.city_code = city_code
        self.corp_id = corp_id
        self.data_source_type = data_source_type
        self.device_address = device_address
        self.device_id = device_id
        self.device_model = device_model
        self.device_name = device_name
        self.device_type = device_type
        self.file_path = file_path
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.sub_device_count = sub_device_count
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['CityCode'] = self.city_code
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.sub_device_count is not None:
            result['SubDeviceCount'] = self.sub_device_count
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CityCode') is not None:
            self.city_code = m.get('CityCode')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('SubDeviceCount') is not None:
            self.sub_device_count = m.get('SubDeviceCount')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateNewDeviceResponseBodyDataSubDeviceInfo(TeaModel):
    def __init__(
        self,
        channel_device_id: str = None,
    ):
        self.channel_device_id = channel_device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_device_id is not None:
            result['ChannelDeviceId'] = self.channel_device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelDeviceId') is not None:
            self.channel_device_id = m.get('ChannelDeviceId')
        return self


class CreateNewDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        sip_realm: str = None,
        sub_device_info: List[CreateNewDeviceResponseBodyDataSubDeviceInfo] = None,
    ):
        self.device_id = device_id
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.sip_realm = sip_realm
        self.sub_device_info = sub_device_info

    def validate(self):
        if self.sub_device_info:
            for k in self.sub_device_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.sip_realm is not None:
            result['SipRealm'] = self.sip_realm
        result['SubDeviceInfo'] = []
        if self.sub_device_info is not None:
            for k in self.sub_device_info:
                result['SubDeviceInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('SipRealm') is not None:
            self.sip_realm = m.get('SipRealm')
        self.sub_device_info = []
        if m.get('SubDeviceInfo') is not None:
            for k in m.get('SubDeviceInfo'):
                temp_model = CreateNewDeviceResponseBodyDataSubDeviceInfo()
                self.sub_device_info.append(temp_model.from_map(k))
        return self


class CreateNewDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateNewDeviceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateNewDeviceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateNewDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateNewDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNewDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScanDeviceRequest(TeaModel):
    def __init__(
        self,
        audio_enable: str = None,
        city_code: str = None,
        corp_id: str = None,
        data_source_type: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_id: str = None,
        device_model: str = None,
        device_name: str = None,
        device_rate: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_sn: str = None,
        device_type: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        sub_device_count: int = None,
        vendor: str = None,
    ):
        self.audio_enable = audio_enable
        self.city_code = city_code
        self.corp_id = corp_id
        self.data_source_type = data_source_type
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_id = device_id
        self.device_model = device_model
        self.device_name = device_name
        self.device_rate = device_rate
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_sn = device_sn
        self.device_type = device_type
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.sub_device_count = sub_device_count
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.city_code is not None:
            result['CityCode'] = self.city_code
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.sub_device_count is not None:
            result['SubDeviceCount'] = self.sub_device_count
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('CityCode') is not None:
            self.city_code = m.get('CityCode')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('SubDeviceCount') is not None:
            self.sub_device_count = m.get('SubDeviceCount')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateScanDeviceResponseBodyDataSubDeviceInfo(TeaModel):
    def __init__(
        self,
        channel_device_id: str = None,
    ):
        self.channel_device_id = channel_device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_device_id is not None:
            result['ChannelDeviceId'] = self.channel_device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelDeviceId') is not None:
            self.channel_device_id = m.get('ChannelDeviceId')
        return self


class CreateScanDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        device_sn: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        server_realm: str = None,
        sip_device_gb_id: str = None,
        sub_device_info: List[CreateScanDeviceResponseBodyDataSubDeviceInfo] = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.device_sn = device_sn
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_realm = server_realm
        self.sip_device_gb_id = sip_device_gb_id
        self.sub_device_info = sub_device_info

    def validate(self):
        if self.sub_device_info:
            for k in self.sub_device_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_realm is not None:
            result['ServerRealm'] = self.server_realm
        if self.sip_device_gb_id is not None:
            result['SipDeviceGbId'] = self.sip_device_gb_id
        result['SubDeviceInfo'] = []
        if self.sub_device_info is not None:
            for k in self.sub_device_info:
                result['SubDeviceInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerRealm') is not None:
            self.server_realm = m.get('ServerRealm')
        if m.get('SipDeviceGbId') is not None:
            self.sip_device_gb_id = m.get('SipDeviceGbId')
        self.sub_device_info = []
        if m.get('SubDeviceInfo') is not None:
            for k in m.get('SubDeviceInfo'):
                temp_model = CreateScanDeviceResponseBodyDataSubDeviceInfo()
                self.sub_device_info.append(temp_model.from_map(k))
        return self


class CreateScanDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateScanDeviceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateScanDeviceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateScanDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateScanDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScanDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSearchTableRequest(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        search_table_name: str = None,
        target_type: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.search_table_name = search_table_name
        self.target_type = target_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.search_table_name is not None:
            result['SearchTableName'] = self.search_table_name
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('SearchTableName') is not None:
            self.search_table_name = m.get('SearchTableName')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        return self


class CreateSearchTableResponseBodyData(TeaModel):
    def __init__(
        self,
        search_table_id: str = None,
    ):
        self.search_table_id = search_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        return self


class CreateSearchTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateSearchTableResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateSearchTableResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSearchTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSearchTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSearchTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubscribeRequest(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        push_config: str = None,
    ):
        self.device_id = device_id
        self.push_config = push_config

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.push_config is not None:
            result['PushConfig'] = self.push_config
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('PushConfig') is not None:
            self.push_config = m.get('PushConfig')
        return self


class CreateSubscribeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateSubscribeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSubscribeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSubscribeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateUserRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: int = None,
        attachment: str = None,
        biz_id: str = None,
        corp_id: str = None,
        face_image_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.corp_id = corp_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class CreateUserResponseBodyData(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: str = None,
        attachment: str = None,
        biz_id: str = None,
        face_image_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_id: int = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class CreateUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateUserResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateUserResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateUserGroupRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        parent_user_group_id: int = None,
        user_group_name: str = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.parent_user_group_id = parent_user_group_id
        self.user_group_name = user_group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_user_group_id is not None:
            result['ParentUserGroupId'] = self.parent_user_group_id
        if self.user_group_name is not None:
            result['UserGroupName'] = self.user_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentUserGroupId') is not None:
            self.parent_user_group_id = m.get('ParentUserGroupId')
        if m.get('UserGroupName') is not None:
            self.user_group_name = m.get('UserGroupName')
        return self


class CreateUserGroupResponseBodyData(TeaModel):
    def __init__(
        self,
        isv_sub_id: str = None,
        user_group_id: int = None,
        user_group_name: str = None,
    ):
        self.isv_sub_id = isv_sub_id
        self.user_group_id = user_group_id
        self.user_group_name = user_group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_group_name is not None:
            result['UserGroupName'] = self.user_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserGroupName') is not None:
            self.user_group_name = m.get('UserGroupName')
        return self


class CreateUserGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateUserGroupResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateUserGroupResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateUserGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateUserGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateUserGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVideoComposeTaskRequest(TeaModel):
    def __init__(
        self,
        audio_file_name: str = None,
        bucket_name: str = None,
        corp_id: str = None,
        domain_name: str = None,
        image_file_names: str = None,
        image_parameters: str = None,
        video_format: str = None,
        video_frame_rate: int = None,
    ):
        self.audio_file_name = audio_file_name
        self.bucket_name = bucket_name
        self.corp_id = corp_id
        self.domain_name = domain_name
        self.image_file_names = image_file_names
        self.image_parameters = image_parameters
        self.video_format = video_format
        self.video_frame_rate = video_frame_rate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_file_name is not None:
            result['AudioFileName'] = self.audio_file_name
        if self.bucket_name is not None:
            result['BucketName'] = self.bucket_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.image_file_names is not None:
            result['ImageFileNames'] = self.image_file_names
        if self.image_parameters is not None:
            result['ImageParameters'] = self.image_parameters
        if self.video_format is not None:
            result['VideoFormat'] = self.video_format
        if self.video_frame_rate is not None:
            result['VideoFrameRate'] = self.video_frame_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioFileName') is not None:
            self.audio_file_name = m.get('AudioFileName')
        if m.get('BucketName') is not None:
            self.bucket_name = m.get('BucketName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('ImageFileNames') is not None:
            self.image_file_names = m.get('ImageFileNames')
        if m.get('ImageParameters') is not None:
            self.image_parameters = m.get('ImageParameters')
        if m.get('VideoFormat') is not None:
            self.video_format = m.get('VideoFormat')
        if m.get('VideoFrameRate') is not None:
            self.video_frame_rate = m.get('VideoFrameRate')
        return self


class CreateVideoComposeTaskResponseBody(TeaModel):
    def __init__(
        self,
        bucket_name: str = None,
        code: str = None,
        domain_name: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.bucket_name = bucket_name
        self.code = code
        self.domain_name = domain_name
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bucket_name is not None:
            result['BucketName'] = self.bucket_name
        if self.code is not None:
            result['Code'] = self.code
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BucketName') is not None:
            self.bucket_name = m.get('BucketName')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateVideoComposeTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateVideoComposeTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateVideoComposeTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVideoSummaryTaskRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        end_time_stamp: int = None,
        live_video_summary: str = None,
        option_list: str = None,
        start_time_stamp: int = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.end_time_stamp = end_time_stamp
        self.live_video_summary = live_video_summary
        self.option_list = option_list
        self.start_time_stamp = start_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end_time_stamp is not None:
            result['EndTimeStamp'] = self.end_time_stamp
        if self.live_video_summary is not None:
            result['LiveVideoSummary'] = self.live_video_summary
        if self.option_list is not None:
            result['OptionList'] = self.option_list
        if self.start_time_stamp is not None:
            result['StartTimeStamp'] = self.start_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EndTimeStamp') is not None:
            self.end_time_stamp = m.get('EndTimeStamp')
        if m.get('LiveVideoSummary') is not None:
            self.live_video_summary = m.get('LiveVideoSummary')
        if m.get('OptionList') is not None:
            self.option_list = m.get('OptionList')
        if m.get('StartTimeStamp') is not None:
            self.start_time_stamp = m.get('StartTimeStamp')
        return self


class CreateVideoSummaryTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateVideoSummaryTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateVideoSummaryTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateVideoSummaryTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWatchPolicyRequest(TeaModel):
    def __init__(
        self,
        item_match_type: str = None,
        similarity_threshold: float = None,
        target_type: str = None,
        watch_mode: str = None,
        watch_policy_name: str = None,
    ):
        self.item_match_type = item_match_type
        self.similarity_threshold = similarity_threshold
        self.target_type = target_type
        self.watch_mode = watch_mode
        self.watch_policy_name = watch_policy_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_match_type is not None:
            result['ItemMatchType'] = self.item_match_type
        if self.similarity_threshold is not None:
            result['SimilarityThreshold'] = self.similarity_threshold
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        if self.watch_mode is not None:
            result['WatchMode'] = self.watch_mode
        if self.watch_policy_name is not None:
            result['WatchPolicyName'] = self.watch_policy_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemMatchType') is not None:
            self.item_match_type = m.get('ItemMatchType')
        if m.get('SimilarityThreshold') is not None:
            self.similarity_threshold = m.get('SimilarityThreshold')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        if m.get('WatchMode') is not None:
            self.watch_mode = m.get('WatchMode')
        if m.get('WatchPolicyName') is not None:
            self.watch_policy_name = m.get('WatchPolicyName')
        return self


class CreateWatchPolicyResponseBodyData(TeaModel):
    def __init__(
        self,
        watch_policy_id: str = None,
    ):
        self.watch_policy_id = watch_policy_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        return self


class CreateWatchPolicyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateWatchPolicyResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateWatchPolicyResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateWatchPolicyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateWatchPolicyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWatchPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWatchTaskRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        description: str = None,
        device_list: str = None,
        message_receiver: str = None,
        schedule_cycle_dates: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        task_name: str = None,
        watch_policy_ids: str = None,
    ):
        self.corp_id = corp_id
        self.description = description
        self.device_list = device_list
        self.message_receiver = message_receiver
        self.schedule_cycle_dates = schedule_cycle_dates
        self.schedule_times = schedule_times
        self.schedule_type = schedule_type
        self.task_name = task_name
        self.watch_policy_ids = watch_policy_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.description is not None:
            result['Description'] = self.description
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.message_receiver is not None:
            result['MessageReceiver'] = self.message_receiver
        if self.schedule_cycle_dates is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.watch_policy_ids is not None:
            result['WatchPolicyIds'] = self.watch_policy_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('MessageReceiver') is not None:
            self.message_receiver = m.get('MessageReceiver')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates = m.get('ScheduleCycleDates')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('WatchPolicyIds') is not None:
            self.watch_policy_ids = m.get('WatchPolicyIds')
        return self


class CreateWatchTaskResponseBodyData(TeaModel):
    def __init__(
        self,
        watch_task_id: str = None,
    ):
        self.watch_task_id = watch_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.watch_task_id is not None:
            result['WatchTaskId'] = self.watch_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WatchTaskId') is not None:
            self.watch_task_id = m.get('WatchTaskId')
        return self


class CreateWatchTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateWatchTaskResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateWatchTaskResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateWatchTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateWatchTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWatchTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAIInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_ids: List[str] = None,
    ):
        # 需要删除的计算实例id
        self.instance_ids = instance_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_ids is not None:
            result['InstanceIds'] = self.instance_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceIds') is not None:
            self.instance_ids = m.get('InstanceIds')
        return self


class DeleteAIInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_ids_shrink: str = None,
    ):
        # 需要删除的计算实例id
        self.instance_ids_shrink = instance_ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_ids_shrink is not None:
            result['InstanceIds'] = self.instance_ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceIds') is not None:
            self.instance_ids_shrink = m.get('InstanceIds')
        return self


class DeleteAIInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        # 返回code码
        self.code = code
        # 错误信息
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteAIInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAIInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAIInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAiotDeviceRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DeleteAiotDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteAiotDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAiotDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAiotDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAiotPersonTableRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id: str = None,
    ):
        self.id = id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class DeleteAiotPersonTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteAiotPersonTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAiotPersonTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAiotPersonTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAiotPersonTableItemRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id: str = None,
        person_table_item_id: str = None,
    ):
        self.id = id
        self.person_table_id = person_table_id
        self.person_table_item_id = person_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.person_table_item_id is not None:
            result['PersonTableItemId'] = self.person_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('PersonTableItemId') is not None:
            self.person_table_item_id = m.get('PersonTableItemId')
        return self


class DeleteAiotPersonTableItemResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteAiotPersonTableItemResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAiotPersonTableItemResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAiotPersonTableItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAiotVehicleTableItemRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.id = id
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class DeleteAiotVehicleTableItemResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteAiotVehicleTableItemResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAiotVehicleTableItemResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAiotVehicleTableItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteChannelRequest(TeaModel):
    def __init__(
        self,
        device_codes: str = None,
    ):
        self.device_codes = device_codes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_codes is not None:
            result['DeviceCodes'] = self.device_codes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCodes') is not None:
            self.device_codes = m.get('DeviceCodes')
        return self


class DeleteChannelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCorpGroupRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        group_id: str = None,
    ):
        self.corp_id = corp_id
        self.group_id = group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        return self


class DeleteCorpGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteCorpGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteCorpGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCorpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDataSourceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        return self


class DeleteDataSourceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class DeleteDataSourceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDataSourceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDataSourcesRequest(TeaModel):
    def __init__(
        self,
        data_source_id_list: str = None,
    ):
        self.data_source_id_list = data_source_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_id_list is not None:
            result['DataSourceIdList'] = self.data_source_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataSourceIdList') is not None:
            self.data_source_id_list = m.get('DataSourceIdList')
        return self


class DeleteDataSourcesResponseBodyData(TeaModel):
    def __init__(
        self,
        code: str = None,
        data_source_id: str = None,
        message: str = None,
    ):
        self.code = code
        self.data_source_id = data_source_id
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class DeleteDataSourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[DeleteDataSourcesResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DeleteDataSourcesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDataSourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDataSourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDataSourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeviceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        gb_id: str = None,
    ):
        self.corp_id = corp_id
        self.gb_id = gb_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        return self


class DeleteDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeviceForInstanceRequestDevices(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        region_id: str = None,
    ):
        self.device_id = device_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DeleteDeviceForInstanceRequest(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        delete_instance_flag: bool = None,
        device_count: str = None,
        devices: List[DeleteDeviceForInstanceRequestDevices] = None,
        instance_id: str = None,
        project_id: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.delete_instance_flag = delete_instance_flag
        self.device_count = device_count
        self.devices = devices
        self.instance_id = instance_id
        self.project_id = project_id

    def validate(self):
        if self.devices:
            for k in self.devices:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.delete_instance_flag is not None:
            result['DeleteInstanceFlag'] = self.delete_instance_flag
        if self.device_count is not None:
            result['DeviceCount'] = self.device_count
        result['Devices'] = []
        if self.devices is not None:
            for k in self.devices:
                result['Devices'].append(k.to_map() if k else None)
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('DeleteInstanceFlag') is not None:
            self.delete_instance_flag = m.get('DeleteInstanceFlag')
        if m.get('DeviceCount') is not None:
            self.device_count = m.get('DeviceCount')
        self.devices = []
        if m.get('Devices') is not None:
            for k in m.get('Devices'):
                temp_model = DeleteDeviceForInstanceRequestDevices()
                self.devices.append(temp_model.from_map(k))
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DeleteDeviceForInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        delete_instance_flag: bool = None,
        device_count: str = None,
        devices_shrink: str = None,
        instance_id: str = None,
        project_id: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.delete_instance_flag = delete_instance_flag
        self.device_count = device_count
        self.devices_shrink = devices_shrink
        self.instance_id = instance_id
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.delete_instance_flag is not None:
            result['DeleteInstanceFlag'] = self.delete_instance_flag
        if self.device_count is not None:
            result['DeviceCount'] = self.device_count
        if self.devices_shrink is not None:
            result['Devices'] = self.devices_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('DeleteInstanceFlag') is not None:
            self.delete_instance_flag = m.get('DeleteInstanceFlag')
        if m.get('DeviceCount') is not None:
            self.device_count = m.get('DeviceCount')
        if m.get('Devices') is not None:
            self.devices_shrink = m.get('Devices')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DeleteDeviceForInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteDeviceForInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDeviceForInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeviceForInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDevicesRequest(TeaModel):
    def __init__(
        self,
        device_id_list: str = None,
    ):
        self.device_id_list = device_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        return self


class DeleteDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        code: str = None,
        description: str = None,
        device_id: str = None,
    ):
        self.code = code
        self.description = description
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class DeleteDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[DeleteDevicesResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DeleteDevicesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDoubleVerificationGroupRequest(TeaModel):
    def __init__(
        self,
        double_verification_group_id: str = None,
        id: str = None,
    ):
        self.double_verification_group_id = double_verification_group_id
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.double_verification_group_id is not None:
            result['DoubleVerificationGroupId'] = self.double_verification_group_id
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DoubleVerificationGroupId') is not None:
            self.double_verification_group_id = m.get('DoubleVerificationGroupId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DeleteDoubleVerificationGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDoubleVerificationGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDoubleVerificationGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDoubleVerificationGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteIPCDeviceRequest(TeaModel):
    def __init__(
        self,
        device_codes: str = None,
    ):
        self.device_codes = device_codes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_codes is not None:
            result['DeviceCodes'] = self.device_codes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCodes') is not None:
            self.device_codes = m.get('DeviceCodes')
        return self


class DeleteIPCDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteIPCDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteIPCDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteIPCDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteModelServiceRequest(TeaModel):
    def __init__(
        self,
        model_service_id: str = None,
    ):
        self.model_service_id = model_service_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_id is not None:
            result['ModelServiceId'] = self.model_service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceId') is not None:
            self.model_service_id = m.get('ModelServiceId')
        return self


class DeleteModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        model_service_instance_id: str = None,
        model_service_instance_name: int = None,
        model_service_status: str = None,
    ):
        self.model_service_instance_id = model_service_instance_id
        self.model_service_instance_name = model_service_instance_name
        self.model_service_status = model_service_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_instance_name is not None:
            result['ModelServiceInstanceName'] = self.model_service_instance_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceInstanceName') is not None:
            self.model_service_instance_name = m.get('ModelServiceInstanceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        return self


class DeleteModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DeleteModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DeleteModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteNVRDeviceRequest(TeaModel):
    def __init__(
        self,
        device_codes: str = None,
    ):
        self.device_codes = device_codes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_codes is not None:
            result['DeviceCodes'] = self.device_codes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCodes') is not None:
            self.device_codes = m.get('DeviceCodes')
        return self


class DeleteNVRDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteNVRDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteNVRDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteNVRDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteProfileRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        profile_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.profile_id = profile_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        return self


class DeleteProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteProfileCatalogRequest(TeaModel):
    def __init__(
        self,
        catalog_id: str = None,
        corp_id: str = None,
        isv_sub_id: str = None,
    ):
        self.catalog_id = catalog_id
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        return self


class DeleteProfileCatalogResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteProfileCatalogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteProfileCatalogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteProfileCatalogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteProjectRequest(TeaModel):
    def __init__(
        self,
        project_ids: str = None,
    ):
        # 项目id,多个以”,“隔开
        self.project_ids = project_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.project_ids is not None:
            result['ProjectIds'] = self.project_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProjectIds') is not None:
            self.project_ids = m.get('ProjectIds')
        return self


class DeleteProjectResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteRecordsRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        attribute_name: str = None,
        corp_id: str = None,
        operator_type: str = None,
        value: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.attribute_name = attribute_name
        self.corp_id = corp_id
        self.operator_type = operator_type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.attribute_name is not None:
            result['AttributeName'] = self.attribute_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.operator_type is not None:
            result['OperatorType'] = self.operator_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AttributeName') is not None:
            self.attribute_name = m.get('AttributeName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('OperatorType') is not None:
            self.operator_type = m.get('OperatorType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteRecordsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteRecordsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteRecordsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSearchTablesRequest(TeaModel):
    def __init__(
        self,
        search_table_ids: str = None,
    ):
        self.search_table_ids = search_table_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_table_ids is not None:
            result['SearchTableIds'] = self.search_table_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SearchTableIds') is not None:
            self.search_table_ids = m.get('SearchTableIds')
        return self


class DeleteSearchTablesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSearchTablesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteSearchTablesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSearchTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSubscribeRequest(TeaModel):
    def __init__(
        self,
        device_id: str = None,
    ):
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class DeleteSubscribeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteSubscribeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteSubscribeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSubscribeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteUserRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        user_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DeleteUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteUserGroupRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        user_group_id: str = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.user_group_id = user_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        return self


class DeleteUserGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteUserGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteUserGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteUserGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteVideoSummaryTaskRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        task_id: str = None,
    ):
        self.corp_id = corp_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DeleteVideoSummaryTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteVideoSummaryTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteVideoSummaryTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteVideoSummaryTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteWatchPoliciesRequest(TeaModel):
    def __init__(
        self,
        watch_policy_ids: str = None,
    ):
        self.watch_policy_ids = watch_policy_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.watch_policy_ids is not None:
            result['WatchPolicyIds'] = self.watch_policy_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WatchPolicyIds') is not None:
            self.watch_policy_ids = m.get('WatchPolicyIds')
        return self


class DeleteWatchPoliciesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteWatchPoliciesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteWatchPoliciesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteWatchPoliciesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteWatchTasksRequest(TeaModel):
    def __init__(
        self,
        watch_task_ids: str = None,
    ):
        self.watch_task_ids = watch_task_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.watch_task_ids is not None:
            result['WatchTaskIds'] = self.watch_task_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WatchTaskIds') is not None:
            self.watch_task_ids = m.get('WatchTaskIds')
        return self


class DeleteWatchTasksResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteWatchTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteWatchTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteWatchTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAIInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_name: str = None,
        instance_type: str = None,
        page_number: int = None,
        page_size: int = None,
        project_id: str = None,
    ):
        # 实例id
        self.instance_id = instance_id
        # 实例名称
        self.instance_name = instance_name
        # 实例类型
        self.instance_type = instance_type
        # 当前页序号
        self.page_number = page_number
        # 每页显示多少条数据
        self.page_size = page_size
        # 项目id
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DescribeAIInstanceResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        algorithm_id: str = None,
        algorithm_name: str = None,
        camera_number: int = None,
        compute_type: str = None,
        create_date_time: str = None,
        data_source: str = None,
        data_source_times: str = None,
        data_type: str = None,
        instance_id: str = None,
        instance_name: str = None,
        instance_type: str = None,
        schedule_cycle_dates: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        spf: int = None,
        status: str = None,
        storage: float = None,
    ):
        # ACU使用数量
        self.acu_used = acu_used
        # 算子ID
        self.algorithm_id = algorithm_id
        # 算子名称
        self.algorithm_name = algorithm_name
        # 实例中计算的摄像机数量。 仅当DataSource是Camera时返回。
        self.camera_number = camera_number
        # 计算类型
        self.compute_type = compute_type
        # 实例创建时间
        self.create_date_time = create_date_time
        # 数据来源
        self.data_source = data_source
        # 数据源时间段
        self.data_source_times = data_source_times
        # 数据类型
        self.data_type = data_type
        # 实例ID
        self.instance_id = instance_id
        # 实例名称
        self.instance_name = instance_name
        self.instance_type = instance_type
        # 含义随ScheduleType取值不同
        self.schedule_cycle_dates = schedule_cycle_dates
        # 执行时间段
        self.schedule_times = schedule_times
        # 调度类型
        self.schedule_type = schedule_type
        # 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
        self.spf = spf
        # 实力状态
        self.status = status
        # 预计存储量
        self.storage = storage

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_name is not None:
            result['AlgorithmName'] = self.algorithm_name
        if self.camera_number is not None:
            result['CameraNumber'] = self.camera_number
        if self.compute_type is not None:
            result['ComputeType'] = self.compute_type
        if self.create_date_time is not None:
            result['CreateDateTime'] = self.create_date_time
        if self.data_source is not None:
            result['DataSource'] = self.data_source
        if self.data_source_times is not None:
            result['DataSourceTimes'] = self.data_source_times
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.schedule_cycle_dates is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.spf is not None:
            result['Spf'] = self.spf
        if self.status is not None:
            result['Status'] = self.status
        if self.storage is not None:
            result['Storage'] = self.storage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmName') is not None:
            self.algorithm_name = m.get('AlgorithmName')
        if m.get('CameraNumber') is not None:
            self.camera_number = m.get('CameraNumber')
        if m.get('ComputeType') is not None:
            self.compute_type = m.get('ComputeType')
        if m.get('CreateDateTime') is not None:
            self.create_date_time = m.get('CreateDateTime')
        if m.get('DataSource') is not None:
            self.data_source = m.get('DataSource')
        if m.get('DataSourceTimes') is not None:
            self.data_source_times = m.get('DataSourceTimes')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates = m.get('ScheduleCycleDates')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('Spf') is not None:
            self.spf = m.get('Spf')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Storage') is not None:
            self.storage = m.get('Storage')
        return self


class DescribeAIInstanceResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[DescribeAIInstanceResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        # 当前页序号
        self.page_number = page_number
        # 每页显示多少条
        self.page_size = page_size
        # 返回数据条目
        self.records = records
        # 总数据数
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeAIInstanceResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAIInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeAIInstanceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        # 返回错误码
        self.code = code
        # 返回数据
        self.data = data
        # 错误信息
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeAIInstanceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeAIInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAIInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAIInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAiotDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        id_list: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.id_list = id_list
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.id_list is not None:
            result['IdList'] = self.id_list
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('IdList') is not None:
            self.id_list = m.get('IdList')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList(TeaModel):
    def __init__(
        self,
        cap_direction: str = None,
        corp_id: str = None,
        device_id: str = None,
        device_type: str = None,
        firmware_version: str = None,
        ipaddr: str = None,
        ipv6addr: str = None,
        ipv_4gateway: str = None,
        ipv_4netmask: str = None,
        id: str = None,
        is_online: str = None,
        latitude: float = None,
        longitude: float = None,
        mac: str = None,
        manufacturer: str = None,
        model: str = None,
        monitor_area_desc: str = None,
        monitor_direction: str = None,
        name: str = None,
        org_code: str = None,
        owner_aps_id: str = None,
        password: str = None,
        place: str = None,
        place_code: str = None,
        port: int = None,
        serial_nuber: str = None,
        user_id: str = None,
    ):
        self.cap_direction = cap_direction
        self.corp_id = corp_id
        self.device_id = device_id
        self.device_type = device_type
        self.firmware_version = firmware_version
        self.ipaddr = ipaddr
        self.ipv6addr = ipv6addr
        self.ipv_4gateway = ipv_4gateway
        self.ipv_4netmask = ipv_4netmask
        self.id = id
        self.is_online = is_online
        self.latitude = latitude
        self.longitude = longitude
        self.mac = mac
        self.manufacturer = manufacturer
        self.model = model
        self.monitor_area_desc = monitor_area_desc
        self.monitor_direction = monitor_direction
        self.name = name
        self.org_code = org_code
        self.owner_aps_id = owner_aps_id
        self.password = password
        self.place = place
        self.place_code = place_code
        self.port = port
        self.serial_nuber = serial_nuber
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cap_direction is not None:
            result['CapDirection'] = self.cap_direction
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.firmware_version is not None:
            result['FirmwareVersion'] = self.firmware_version
        if self.ipaddr is not None:
            result['IPAddr'] = self.ipaddr
        if self.ipv6addr is not None:
            result['IPV6Addr'] = self.ipv6addr
        if self.ipv_4gateway is not None:
            result['IPv4Gateway'] = self.ipv_4gateway
        if self.ipv_4netmask is not None:
            result['IPv4Netmask'] = self.ipv_4netmask
        if self.id is not None:
            result['Id'] = self.id
        if self.is_online is not None:
            result['IsOnline'] = self.is_online
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.mac is not None:
            result['MAC'] = self.mac
        if self.manufacturer is not None:
            result['Manufacturer'] = self.manufacturer
        if self.model is not None:
            result['Model'] = self.model
        if self.monitor_area_desc is not None:
            result['MonitorAreaDesc'] = self.monitor_area_desc
        if self.monitor_direction is not None:
            result['MonitorDirection'] = self.monitor_direction
        if self.name is not None:
            result['Name'] = self.name
        if self.org_code is not None:
            result['OrgCode'] = self.org_code
        if self.owner_aps_id is not None:
            result['OwnerApsID'] = self.owner_aps_id
        if self.password is not None:
            result['Password'] = self.password
        if self.place is not None:
            result['Place'] = self.place
        if self.place_code is not None:
            result['PlaceCode'] = self.place_code
        if self.port is not None:
            result['Port'] = self.port
        if self.serial_nuber is not None:
            result['SerialNuber'] = self.serial_nuber
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapDirection') is not None:
            self.cap_direction = m.get('CapDirection')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('FirmwareVersion') is not None:
            self.firmware_version = m.get('FirmwareVersion')
        if m.get('IPAddr') is not None:
            self.ipaddr = m.get('IPAddr')
        if m.get('IPV6Addr') is not None:
            self.ipv6addr = m.get('IPV6Addr')
        if m.get('IPv4Gateway') is not None:
            self.ipv_4gateway = m.get('IPv4Gateway')
        if m.get('IPv4Netmask') is not None:
            self.ipv_4netmask = m.get('IPv4Netmask')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsOnline') is not None:
            self.is_online = m.get('IsOnline')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('MAC') is not None:
            self.mac = m.get('MAC')
        if m.get('Manufacturer') is not None:
            self.manufacturer = m.get('Manufacturer')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('MonitorAreaDesc') is not None:
            self.monitor_area_desc = m.get('MonitorAreaDesc')
        if m.get('MonitorDirection') is not None:
            self.monitor_direction = m.get('MonitorDirection')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrgCode') is not None:
            self.org_code = m.get('OrgCode')
        if m.get('OwnerApsID') is not None:
            self.owner_aps_id = m.get('OwnerApsID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Place') is not None:
            self.place = m.get('Place')
        if m.get('PlaceCode') is not None:
            self.place_code = m.get('PlaceCode')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('SerialNuber') is not None:
            self.serial_nuber = m.get('SerialNuber')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DescribeAiotDevicesResponseBodyAiotDevices(TeaModel):
    def __init__(
        self,
        aiot_device_list: List[DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList] = None,
        page_num: int = None,
        page_size: int = None,
        total_num: int = None,
    ):
        self.aiot_device_list = aiot_device_list
        self.page_num = page_num
        self.page_size = page_size
        self.total_num = total_num

    def validate(self):
        if self.aiot_device_list:
            for k in self.aiot_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AiotDeviceList'] = []
        if self.aiot_device_list is not None:
            for k in self.aiot_device_list:
                result['AiotDeviceList'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_num is not None:
            result['TotalNum'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.aiot_device_list = []
        if m.get('AiotDeviceList') is not None:
            for k in m.get('AiotDeviceList'):
                temp_model = DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList()
                self.aiot_device_list.append(temp_model.from_map(k))
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalNum') is not None:
            self.total_num = m.get('TotalNum')
        return self


class DescribeAiotDevicesResponseBody(TeaModel):
    def __init__(
        self,
        aiot_devices: DescribeAiotDevicesResponseBodyAiotDevices = None,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.aiot_devices = aiot_devices
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.aiot_devices:
            self.aiot_devices.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_devices is not None:
            result['AiotDevices'] = self.aiot_devices.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotDevices') is not None:
            temp_model = DescribeAiotDevicesResponseBodyAiotDevices()
            self.aiot_devices = temp_model.from_map(m['AiotDevices'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeAiotDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAiotDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAiotDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAiotPersonTableItemsRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        page_num: int = None,
        page_size: int = None,
        person_table_id: str = None,
        person_table_item_id: str = None,
    ):
        self.id = id
        self.page_num = page_num
        self.page_size = page_size
        self.person_table_id = person_table_id
        self.person_table_item_id = person_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.person_table_item_id is not None:
            result['PersonTableItemId'] = self.person_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('PersonTableItemId') is not None:
            self.person_table_item_id = m.get('PersonTableItemId')
        return self


class DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList(TeaModel):
    def __init__(
        self,
        number: str = None,
        type: int = None,
    ):
        self.number = number
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        algorithm_version: str = None,
        feature_data: str = None,
        image_id: str = None,
        object_id: str = None,
        table_id: str = None,
        vendor: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.algorithm_version = algorithm_version
        self.feature_data = feature_data
        self.image_id = image_id
        self.object_id = object_id
        self.table_id = table_id
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithm_version is not None:
            result['AlgorithmVersion'] = self.algorithm_version
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.table_id is not None:
            result['TableId'] = self.table_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AlgorithmVersion') is not None:
            self.algorithm_version = m.get('AlgorithmVersion')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('TableId') is not None:
            self.table_id = m.get('TableId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList(TeaModel):
    def __init__(
        self,
        data: str = None,
        device_id: str = None,
        event_sort: str = None,
        feature_info: DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo = None,
        file_format: str = None,
        height: int = None,
        image_id: str = None,
        shot_time: str = None,
        size: int = None,
        storage_path: str = None,
        type: str = None,
        width: int = None,
    ):
        self.data = data
        self.device_id = device_id
        self.event_sort = event_sort
        self.feature_info = feature_info
        self.file_format = file_format
        self.height = height
        self.image_id = image_id
        self.shot_time = shot_time
        self.size = size
        self.storage_path = storage_path
        self.type = type
        self.width = width

    def validate(self):
        if self.feature_info:
            self.feature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_sort is not None:
            result['EventSort'] = self.event_sort
        if self.feature_info is not None:
            result['FeatureInfo'] = self.feature_info.to_map()
        if self.file_format is not None:
            result['FileFormat'] = self.file_format
        if self.height is not None:
            result['Height'] = self.height
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.size is not None:
            result['Size'] = self.size
        if self.storage_path is not None:
            result['StoragePath'] = self.storage_path
        if self.type is not None:
            result['Type'] = self.type
        if self.width is not None:
            result['Width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventSort') is not None:
            self.event_sort = m.get('EventSort')
        if m.get('FeatureInfo') is not None:
            temp_model = DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo()
            self.feature_info = temp_model.from_map(m['FeatureInfo'])
        if m.get('FileFormat') is not None:
            self.file_format = m.get('FileFormat')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StoragePath') is not None:
            self.storage_path = m.get('StoragePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Width') is not None:
            self.width = m.get('Width')
        return self


class DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList(TeaModel):
    def __init__(
        self,
        identification_list: List[DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList] = None,
        identification_num: int = None,
        image_list: List[DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList] = None,
        image_num: int = None,
        last_change: str = None,
        person_code: str = None,
        person_id: str = None,
        person_name: str = None,
        person_table_id: str = None,
        remarks: str = None,
    ):
        self.identification_list = identification_list
        self.identification_num = identification_num
        self.image_list = image_list
        self.image_num = image_num
        self.last_change = last_change
        self.person_code = person_code
        self.person_id = person_id
        self.person_name = person_name
        self.person_table_id = person_table_id
        self.remarks = remarks

    def validate(self):
        if self.identification_list:
            for k in self.identification_list:
                if k:
                    k.validate()
        if self.image_list:
            for k in self.image_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IdentificationList'] = []
        if self.identification_list is not None:
            for k in self.identification_list:
                result['IdentificationList'].append(k.to_map() if k else None)
        if self.identification_num is not None:
            result['IdentificationNum'] = self.identification_num
        result['ImageList'] = []
        if self.image_list is not None:
            for k in self.image_list:
                result['ImageList'].append(k.to_map() if k else None)
        if self.image_num is not None:
            result['ImageNum'] = self.image_num
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.person_code is not None:
            result['PersonCode'] = self.person_code
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_name is not None:
            result['PersonName'] = self.person_name
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.identification_list = []
        if m.get('IdentificationList') is not None:
            for k in m.get('IdentificationList'):
                temp_model = DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList()
                self.identification_list.append(temp_model.from_map(k))
        if m.get('IdentificationNum') is not None:
            self.identification_num = m.get('IdentificationNum')
        self.image_list = []
        if m.get('ImageList') is not None:
            for k in m.get('ImageList'):
                temp_model = DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList()
                self.image_list.append(temp_model.from_map(k))
        if m.get('ImageNum') is not None:
            self.image_num = m.get('ImageNum')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('PersonCode') is not None:
            self.person_code = m.get('PersonCode')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonName') is not None:
            self.person_name = m.get('PersonName')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DescribeAiotPersonTableItemsResponseBodyPersonTableItems(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        person_table_item_list: List[DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList] = None,
        total_num: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.person_table_item_list = person_table_item_list
        self.total_num = total_num

    def validate(self):
        if self.person_table_item_list:
            for k in self.person_table_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['PersonTableItemList'] = []
        if self.person_table_item_list is not None:
            for k in self.person_table_item_list:
                result['PersonTableItemList'].append(k.to_map() if k else None)
        if self.total_num is not None:
            result['TotalNum'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.person_table_item_list = []
        if m.get('PersonTableItemList') is not None:
            for k in m.get('PersonTableItemList'):
                temp_model = DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList()
                self.person_table_item_list.append(temp_model.from_map(k))
        if m.get('TotalNum') is not None:
            self.total_num = m.get('TotalNum')
        return self


class DescribeAiotPersonTableItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table_items: DescribeAiotPersonTableItemsResponseBodyPersonTableItems = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table_items = person_table_items
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.person_table_items:
            self.person_table_items.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.person_table_items is not None:
            result['PersonTableItems'] = self.person_table_items.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PersonTableItems') is not None:
            temp_model = DescribeAiotPersonTableItemsResponseBodyPersonTableItems()
            self.person_table_items = temp_model.from_map(m['PersonTableItems'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeAiotPersonTableItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAiotPersonTableItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAiotPersonTableItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAiotPersonTablesRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id_list: str = None,
    ):
        self.id = id
        self.person_table_id_list = person_table_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id_list is not None:
            result['PersonTableIdList'] = self.person_table_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableIdList') is not None:
            self.person_table_id_list = m.get('PersonTableIdList')
        return self


class DescribeAiotPersonTablesResponseBodyPersonTableList(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        face_num: int = None,
        last_change: str = None,
        name: str = None,
        person_num: int = None,
        person_table_id: str = None,
        total_person_num: int = None,
        type: int = None,
        verification_model_list: List[int] = None,
    ):
        self.device_id = device_id
        self.face_num = face_num
        self.last_change = last_change
        self.name = name
        self.person_num = person_num
        self.person_table_id = person_table_id
        self.total_person_num = total_person_num
        self.type = type
        self.verification_model_list = verification_model_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.face_num is not None:
            result['FaceNum'] = self.face_num
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.name is not None:
            result['Name'] = self.name
        if self.person_num is not None:
            result['PersonNum'] = self.person_num
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.total_person_num is not None:
            result['TotalPersonNum'] = self.total_person_num
        if self.type is not None:
            result['Type'] = self.type
        if self.verification_model_list is not None:
            result['VerificationModelList'] = self.verification_model_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('FaceNum') is not None:
            self.face_num = m.get('FaceNum')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonNum') is not None:
            self.person_num = m.get('PersonNum')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('TotalPersonNum') is not None:
            self.total_person_num = m.get('TotalPersonNum')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('VerificationModelList') is not None:
            self.verification_model_list = m.get('VerificationModelList')
        return self


class DescribeAiotPersonTablesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table_list: List[DescribeAiotPersonTablesResponseBodyPersonTableList] = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table_list = person_table_list
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.person_table_list:
            for k in self.person_table_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        result['PersonTableList'] = []
        if self.person_table_list is not None:
            for k in self.person_table_list:
                result['PersonTableList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        self.person_table_list = []
        if m.get('PersonTableList') is not None:
            for k in m.get('PersonTableList'):
                temp_model = DescribeAiotPersonTablesResponseBodyPersonTableList()
                self.person_table_list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeAiotPersonTablesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAiotPersonTablesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAiotPersonTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAiotVehicleTableItemsRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        page_num: int = None,
        page_size: int = None,
        vehicle_table_id: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.id = id
        self.page_num = page_num
        self.page_size = page_size
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
        owner_name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        remarks: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time
        self.owner_name = owner_name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.remarks = remarks
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        total_num: int = None,
        vehicle_table_item_list: List[DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList] = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.total_num = total_num
        self.vehicle_table_item_list = vehicle_table_item_list

    def validate(self):
        if self.vehicle_table_item_list:
            for k in self.vehicle_table_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_num is not None:
            result['TotalNum'] = self.total_num
        result['VehicleTableItemList'] = []
        if self.vehicle_table_item_list is not None:
            for k in self.vehicle_table_item_list:
                result['VehicleTableItemList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalNum') is not None:
            self.total_num = m.get('TotalNum')
        self.vehicle_table_item_list = []
        if m.get('VehicleTableItemList') is not None:
            for k in m.get('VehicleTableItemList'):
                temp_model = DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList()
                self.vehicle_table_item_list.append(temp_model.from_map(k))
        return self


class DescribeAiotVehicleTableItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        vehicle_table_items: DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.vehicle_table_items = vehicle_table_items

    def validate(self):
        if self.vehicle_table_items:
            self.vehicle_table_items.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.vehicle_table_items is not None:
            result['VehicleTableItems'] = self.vehicle_table_items.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('VehicleTableItems') is not None:
            temp_model = DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems()
            self.vehicle_table_items = temp_model.from_map(m['VehicleTableItems'])
        return self


class DescribeAiotVehicleTableItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAiotVehicleTableItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAiotVehicleTableItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAiotVehicleTablesRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id_list: str = None,
    ):
        self.id = id
        self.vehicle_table_id_list = vehicle_table_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id_list is not None:
            result['VehicleTableIdList'] = self.vehicle_table_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableIdList') is not None:
            self.vehicle_table_id_list = m.get('VehicleTableIdList')
        return self


class DescribeAiotVehicleTablesResponseBodyVehicleTableList(TeaModel):
    def __init__(
        self,
        vehicle_table_id: str = None,
        vehicle_table_name: str = None,
    ):
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_name = vehicle_table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_name is not None:
            result['VehicleTableName'] = self.vehicle_table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableName') is not None:
            self.vehicle_table_name = m.get('VehicleTableName')
        return self


class DescribeAiotVehicleTablesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        vehicle_table_list: List[DescribeAiotVehicleTablesResponseBodyVehicleTableList] = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.vehicle_table_list = vehicle_table_list

    def validate(self):
        if self.vehicle_table_list:
            for k in self.vehicle_table_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['VehicleTableList'] = []
        if self.vehicle_table_list is not None:
            for k in self.vehicle_table_list:
                result['VehicleTableList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.vehicle_table_list = []
        if m.get('VehicleTableList') is not None:
            for k in m.get('VehicleTableList'):
                temp_model = DescribeAiotVehicleTablesResponseBodyVehicleTableList()
                self.vehicle_table_list.append(temp_model.from_map(k))
        return self


class DescribeAiotVehicleTablesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAiotVehicleTablesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAiotVehicleTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCameraForInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # 实例id
        self.instance_id = instance_id
        # 当前页序号
        self.page_number = page_number
        # 每页显示多少条数据
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeCameraForInstanceResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        camera_address: str = None,
        camera_id: str = None,
        camera_name: str = None,
        camera_status: int = None,
    ):
        # 设备地址
        self.camera_address = camera_address
        # 设备编号
        self.camera_id = camera_id
        # 设备名称
        self.camera_name = camera_name
        # 设备在线状态。 1表示在线，0表示离线, 2表示待注册
        self.camera_status = camera_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.camera_address is not None:
            result['CameraAddress'] = self.camera_address
        if self.camera_id is not None:
            result['CameraId'] = self.camera_id
        if self.camera_name is not None:
            result['CameraName'] = self.camera_name
        if self.camera_status is not None:
            result['CameraStatus'] = self.camera_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CameraAddress') is not None:
            self.camera_address = m.get('CameraAddress')
        if m.get('CameraId') is not None:
            self.camera_id = m.get('CameraId')
        if m.get('CameraName') is not None:
            self.camera_name = m.get('CameraName')
        if m.get('CameraStatus') is not None:
            self.camera_status = m.get('CameraStatus')
        return self


class DescribeCameraForInstanceResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[DescribeCameraForInstanceResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        # 当前页序号
        self.page_number = page_number
        # 每页显示多少条
        self.page_size = page_size
        # 返回数据条目
        self.records = records
        # 总数据数
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeCameraForInstanceResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeCameraForInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeCameraForInstanceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        # 返回错误码
        self.code = code
        # 返回数据
        self.data = data
        # 错误信息
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeCameraForInstanceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeCameraForInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCameraForInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCameraForInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChannelsRequest(TeaModel):
    def __init__(
        self,
        device_filter: str = None,
        device_status: str = None,
        nvr_id: str = None,
        page_num: int = None,
        page_size: int = None,
        show_un_config: int = None,
    ):
        self.device_filter = device_filter
        self.device_status = device_status
        self.nvr_id = nvr_id
        self.page_num = page_num
        self.page_size = page_size
        self.show_un_config = show_un_config

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_filter is not None:
            result['DeviceFilter'] = self.device_filter
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.nvr_id is not None:
            result['NvrId'] = self.nvr_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.show_un_config is not None:
            result['ShowUnConfig'] = self.show_un_config
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceFilter') is not None:
            self.device_filter = m.get('DeviceFilter')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('NvrId') is not None:
            self.nvr_id = m.get('NvrId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ShowUnConfig') is not None:
            self.show_un_config = m.get('ShowUnConfig')
        return self


class DescribeChannelsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        audio_enable: str = None,
        corp_id: str = None,
        create_time: str = None,
        datasource_type: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_id: str = None,
        device_ip: str = None,
        device_model: str = None,
        device_name: str = None,
        device_rate: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_sub_type: str = None,
        device_type: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        modify_time: str = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        parent_device_id: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        server_realm: str = None,
        stream_action: str = None,
        stream_status: str = None,
        vap: str = None,
        vendor: str = None,
    ):
        self.audio_enable = audio_enable
        self.corp_id = corp_id
        self.create_time = create_time
        self.datasource_type = datasource_type
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_id = device_id
        self.device_ip = device_ip
        self.device_model = device_model
        self.device_name = device_name
        self.device_rate = device_rate
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_sub_type = device_sub_type
        self.device_type = device_type
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.modify_time = modify_time
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.parent_device_id = parent_device_id
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_realm = server_realm
        self.stream_action = stream_action
        self.stream_status = stream_status
        self.vap = vap
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_ip is not None:
            result['DeviceIp'] = self.device_ip
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_sub_type is not None:
            result['DeviceSubType'] = self.device_sub_type
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.parent_device_id is not None:
            result['ParentDeviceId'] = self.parent_device_id
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_realm is not None:
            result['ServerRealm'] = self.server_realm
        if self.stream_action is not None:
            result['StreamAction'] = self.stream_action
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        if self.vap is not None:
            result['Vap'] = self.vap
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceIp') is not None:
            self.device_ip = m.get('DeviceIp')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceSubType') is not None:
            self.device_sub_type = m.get('DeviceSubType')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('ParentDeviceId') is not None:
            self.parent_device_id = m.get('ParentDeviceId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerRealm') is not None:
            self.server_realm = m.get('ServerRealm')
        if m.get('StreamAction') is not None:
            self.stream_action = m.get('StreamAction')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        if m.get('Vap') is not None:
            self.vap = m.get('Vap')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DescribeChannelsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeChannelsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
        un_config_list: List[str] = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page
        self.un_config_list = un_config_list

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        if self.un_config_list is not None:
            result['UnConfigList'] = self.un_config_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeChannelsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        if m.get('UnConfigList') is not None:
            self.un_config_list = m.get('UnConfigList')
        return self


class DescribeChannelsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeChannelsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeChannelsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeChannelsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChannelsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChannelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataSourcesRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        data_source_category: str = None,
        data_source_filter: str = None,
        data_source_id_list: str = None,
        data_source_type: str = None,
        page_num: int = None,
        page_size: int = None,
        stream_status: str = None,
    ):
        self.corp_id_list = corp_id_list
        self.data_source_category = data_source_category
        self.data_source_filter = data_source_filter
        self.data_source_id_list = data_source_id_list
        self.data_source_type = data_source_type
        self.page_num = page_num
        self.page_size = page_size
        self.stream_status = stream_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.data_source_category is not None:
            result['DataSourceCategory'] = self.data_source_category
        if self.data_source_filter is not None:
            result['DataSourceFilter'] = self.data_source_filter
        if self.data_source_id_list is not None:
            result['DataSourceIdList'] = self.data_source_id_list
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DataSourceCategory') is not None:
            self.data_source_category = m.get('DataSourceCategory')
        if m.get('DataSourceFilter') is not None:
            self.data_source_filter = m.get('DataSourceFilter')
        if m.get('DataSourceIdList') is not None:
            self.data_source_id_list = m.get('DataSourceIdList')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        return self


class DescribeDataSourcesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        action: str = None,
        corp_id: str = None,
        create_time: str = None,
        data_source_id: str = None,
        data_source_name: str = None,
        data_source_type: str = None,
        description: str = None,
        kafka_topic: str = None,
        oss_path: str = None,
        stream_status: str = None,
        url: str = None,
    ):
        self.action = action
        self.corp_id = corp_id
        self.create_time = create_time
        self.data_source_id = data_source_id
        self.data_source_name = data_source_name
        self.data_source_type = data_source_type
        self.description = description
        self.kafka_topic = kafka_topic
        self.oss_path = oss_path
        self.stream_status = stream_status
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.description is not None:
            result['Description'] = self.description
        if self.kafka_topic is not None:
            result['KafkaTopic'] = self.kafka_topic
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('KafkaTopic') is not None:
            self.kafka_topic = m.get('KafkaTopic')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class DescribeDataSourcesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeDataSourcesResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeDataSourcesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeDataSourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeDataSourcesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeDataSourcesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeDataSourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDataSourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataSourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_id_list: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_id_list = device_id_list
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeDevicesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        captured_picture_id: str = None,
        corp_id: str = None,
        create_time: str = None,
        device_address: str = None,
        device_id: str = None,
        device_name: str = None,
        device_type: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        password: str = None,
        status: str = None,
        vendor: str = None,
    ):
        self.captured_picture_id = captured_picture_id
        self.corp_id = corp_id
        self.create_time = create_time
        self.device_address = device_address
        self.device_id = device_id
        self.device_name = device_name
        self.device_type = device_type
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.password = password
        self.status = status
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.captured_picture_id is not None:
            result['CapturedPictureId'] = self.captured_picture_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.password is not None:
            result['Password'] = self.password
        if self.status is not None:
            result['Status'] = self.status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapturedPictureId') is not None:
            self.captured_picture_id = m.get('CapturedPictureId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DescribeDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeDevicesResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeDevicesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeIpcsRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_filter: str = None,
        device_id_list: str = None,
        device_status: str = None,
        nvr_id_list: str = None,
        page_num: int = None,
        page_size: int = None,
        parent_device_type: str = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_filter = device_filter
        self.device_id_list = device_id_list
        self.device_status = device_status
        self.nvr_id_list = nvr_id_list
        self.page_num = page_num
        self.page_size = page_size
        self.parent_device_type = parent_device_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_filter is not None:
            result['DeviceFilter'] = self.device_filter
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.nvr_id_list is not None:
            result['NvrIdList'] = self.nvr_id_list
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.parent_device_type is not None:
            result['ParentDeviceType'] = self.parent_device_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceFilter') is not None:
            self.device_filter = m.get('DeviceFilter')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('NvrIdList') is not None:
            self.nvr_id_list = m.get('NvrIdList')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ParentDeviceType') is not None:
            self.parent_device_type = m.get('ParentDeviceType')
        return self


class DescribeIpcsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        audio_enable: str = None,
        corp_id: str = None,
        create_time: str = None,
        datasource_type: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_id: str = None,
        device_ip: str = None,
        device_model: str = None,
        device_name: str = None,
        device_rate: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_sub_type: str = None,
        device_type: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        modify_time: str = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        parent_device_id: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        server_realm: str = None,
        stream_action: str = None,
        stream_status: str = None,
        vap: str = None,
        vendor: str = None,
    ):
        self.audio_enable = audio_enable
        self.corp_id = corp_id
        self.create_time = create_time
        self.datasource_type = datasource_type
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_id = device_id
        self.device_ip = device_ip
        self.device_model = device_model
        self.device_name = device_name
        self.device_rate = device_rate
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_sub_type = device_sub_type
        self.device_type = device_type
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.modify_time = modify_time
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.parent_device_id = parent_device_id
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_realm = server_realm
        self.stream_action = stream_action
        self.stream_status = stream_status
        self.vap = vap
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_ip is not None:
            result['DeviceIp'] = self.device_ip
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_sub_type is not None:
            result['DeviceSubType'] = self.device_sub_type
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.parent_device_id is not None:
            result['ParentDeviceId'] = self.parent_device_id
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_realm is not None:
            result['ServerRealm'] = self.server_realm
        if self.stream_action is not None:
            result['StreamAction'] = self.stream_action
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        if self.vap is not None:
            result['Vap'] = self.vap
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceIp') is not None:
            self.device_ip = m.get('DeviceIp')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceSubType') is not None:
            self.device_sub_type = m.get('DeviceSubType')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('ParentDeviceId') is not None:
            self.parent_device_id = m.get('ParentDeviceId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerRealm') is not None:
            self.server_realm = m.get('ServerRealm')
        if m.get('StreamAction') is not None:
            self.stream_action = m.get('StreamAction')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        if m.get('Vap') is not None:
            self.vap = m.get('Vap')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DescribeIpcsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeIpcsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeIpcsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeIpcsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeIpcsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeIpcsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeIpcsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeIpcsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeIpcsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeModelServiceRequest(TeaModel):
    def __init__(
        self,
        model_service_id: str = None,
    ):
        self.model_service_id = model_service_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_id is not None:
            result['ModelServiceId'] = self.model_service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceId') is not None:
            self.model_service_id = m.get('ModelServiceId')
        return self


class DescribeModelServiceResponseBodyDataModelApiList(TeaModel):
    def __init__(
        self,
        algorithm_api_code: str = None,
        api_id: str = None,
        api_name: str = None,
        api_path: str = None,
        create_time: str = None,
    ):
        self.algorithm_api_code = algorithm_api_code
        self.api_id = api_id
        self.api_name = api_name
        self.api_path = api_path
        self.create_time = create_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_api_code is not None:
            result['AlgorithmApiCode'] = self.algorithm_api_code
        if self.api_id is not None:
            result['ApiId'] = self.api_id
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.api_path is not None:
            result['ApiPath'] = self.api_path
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmApiCode') is not None:
            self.algorithm_api_code = m.get('AlgorithmApiCode')
        if m.get('ApiId') is not None:
            self.api_id = m.get('ApiId')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('ApiPath') is not None:
            self.api_path = m.get('ApiPath')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        return self


class DescribeModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        algorithm_code: str = None,
        app_code: str = None,
        create_time: str = None,
        model_api_list: List[DescribeModelServiceResponseBodyDataModelApiList] = None,
        model_service_instance_id: str = None,
        model_service_instance_name: str = None,
        model_service_status: str = None,
        qps: int = None,
    ):
        self.algorithm_code = algorithm_code
        self.app_code = app_code
        self.create_time = create_time
        self.model_api_list = model_api_list
        self.model_service_instance_id = model_service_instance_id
        self.model_service_instance_name = model_service_instance_name
        self.model_service_status = model_service_status
        self.qps = qps

    def validate(self):
        if self.model_api_list:
            for k in self.model_api_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_code is not None:
            result['AlgorithmCode'] = self.algorithm_code
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        result['ModelApiList'] = []
        if self.model_api_list is not None:
            for k in self.model_api_list:
                result['ModelApiList'].append(k.to_map() if k else None)
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_instance_name is not None:
            result['ModelServiceInstanceName'] = self.model_service_instance_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        if self.qps is not None:
            result['Qps'] = self.qps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmCode') is not None:
            self.algorithm_code = m.get('AlgorithmCode')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        self.model_api_list = []
        if m.get('ModelApiList') is not None:
            for k in m.get('ModelApiList'):
                temp_model = DescribeModelServiceResponseBodyDataModelApiList()
                self.model_api_list.append(temp_model.from_map(k))
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceInstanceName') is not None:
            self.model_service_instance_name = m.get('ModelServiceInstanceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        if m.get('Qps') is not None:
            self.qps = m.get('Qps')
        return self


class DescribeModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeModelServiceListRequest(TeaModel):
    def __init__(
        self,
        algorithm_code: str = None,
        include_deleted: bool = None,
        model_service_name: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.algorithm_code = algorithm_code
        self.include_deleted = include_deleted
        self.model_service_name = model_service_name
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_code is not None:
            result['AlgorithmCode'] = self.algorithm_code
        if self.include_deleted is not None:
            result['IncludeDeleted'] = self.include_deleted
        if self.model_service_name is not None:
            result['ModelServiceName'] = self.model_service_name
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmCode') is not None:
            self.algorithm_code = m.get('AlgorithmCode')
        if m.get('IncludeDeleted') is not None:
            self.include_deleted = m.get('IncludeDeleted')
        if m.get('ModelServiceName') is not None:
            self.model_service_name = m.get('ModelServiceName')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeModelServiceListResponseBodyDataModelList(TeaModel):
    def __init__(
        self,
        algorithm_code: str = None,
        app_code: str = None,
        create_time: str = None,
        model_service_instance_id: str = None,
        model_service_name: str = None,
        model_service_status: str = None,
        qps_required: int = None,
    ):
        self.algorithm_code = algorithm_code
        self.app_code = app_code
        self.create_time = create_time
        self.model_service_instance_id = model_service_instance_id
        self.model_service_name = model_service_name
        self.model_service_status = model_service_status
        self.qps_required = qps_required

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_code is not None:
            result['AlgorithmCode'] = self.algorithm_code
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_name is not None:
            result['ModelServiceName'] = self.model_service_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        if self.qps_required is not None:
            result['QpsRequired'] = self.qps_required
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmCode') is not None:
            self.algorithm_code = m.get('AlgorithmCode')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceName') is not None:
            self.model_service_name = m.get('ModelServiceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        if m.get('QpsRequired') is not None:
            self.qps_required = m.get('QpsRequired')
        return self


class DescribeModelServiceListResponseBodyData(TeaModel):
    def __init__(
        self,
        model_list: List[DescribeModelServiceListResponseBodyDataModelList] = None,
        total: str = None,
    ):
        self.model_list = model_list
        self.total = total

    def validate(self):
        if self.model_list:
            for k in self.model_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ModelList'] = []
        if self.model_list is not None:
            for k in self.model_list:
                result['ModelList'].append(k.to_map() if k else None)
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.model_list = []
        if m.get('ModelList') is not None:
            for k in m.get('ModelList'):
                temp_model = DescribeModelServiceListResponseBodyDataModelList()
                self.model_list.append(temp_model.from_map(k))
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeModelServiceListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeModelServiceListResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeModelServiceListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeModelServiceListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeModelServiceListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeModelServiceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNvrDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_filter: str = None,
        nvr_device_id_list: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_filter = device_filter
        self.nvr_device_id_list = nvr_device_id_list
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_filter is not None:
            result['DeviceFilter'] = self.device_filter
        if self.nvr_device_id_list is not None:
            result['NvrDeviceIdList'] = self.nvr_device_id_list
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceFilter') is not None:
            self.device_filter = m.get('DeviceFilter')
        if m.get('NvrDeviceIdList') is not None:
            self.nvr_device_id_list = m.get('NvrDeviceIdList')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeNvrDevicesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        channel: str = None,
        corp_id: str = None,
        create_time: str = None,
        datasource_type: str = None,
        device_id: str = None,
        device_model: str = None,
        device_name: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_type: str = None,
        modify_time: str = None,
        project_name: str = None,
        region_name: str = None,
    ):
        self.channel = channel
        self.corp_id = corp_id
        self.create_time = create_time
        self.datasource_type = datasource_type
        self.device_id = device_id
        self.device_model = device_model
        self.device_name = device_name
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_type = device_type
        self.modify_time = modify_time
        self.project_name = project_name
        self.region_name = region_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.region_name is not None:
            result['RegionName'] = self.region_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('RegionName') is not None:
            self.region_name = m.get('RegionName')
        return self


class DescribeNvrDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeNvrDevicesResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeNvrDevicesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeNvrDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeNvrDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeNvrDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeNvrDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeNvrDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNvrDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNvrsRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_filter: str = None,
        nvr_device_id_list: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_filter = device_filter
        self.nvr_device_id_list = nvr_device_id_list
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_filter is not None:
            result['DeviceFilter'] = self.device_filter
        if self.nvr_device_id_list is not None:
            result['NvrDeviceIdList'] = self.nvr_device_id_list
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceFilter') is not None:
            self.device_filter = m.get('DeviceFilter')
        if m.get('NvrDeviceIdList') is not None:
            self.nvr_device_id_list = m.get('NvrDeviceIdList')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeNvrsResponseBodyDataRecordsSubDeviceInfo(TeaModel):
    def __init__(
        self,
        sub_device_id: str = None,
    ):
        self.sub_device_id = sub_device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sub_device_id is not None:
            result['SubDeviceId'] = self.sub_device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SubDeviceId') is not None:
            self.sub_device_id = m.get('SubDeviceId')
        return self


class DescribeNvrsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        create_time: str = None,
        datasource_type: str = None,
        device_address: str = None,
        device_id: str = None,
        device_model: str = None,
        device_name: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_type: str = None,
        in_protocol: str = None,
        latitude: str = None,
        longitude: str = None,
        modify_time: str = None,
        password: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        server_realm: str = None,
        sub_device_count: str = None,
        sub_device_info: List[DescribeNvrsResponseBodyDataRecordsSubDeviceInfo] = None,
        vendor: str = None,
    ):
        self.corp_id = corp_id
        self.create_time = create_time
        self.datasource_type = datasource_type
        self.device_address = device_address
        self.device_id = device_id
        self.device_model = device_model
        self.device_name = device_name
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_type = device_type
        self.in_protocol = in_protocol
        self.latitude = latitude
        self.longitude = longitude
        self.modify_time = modify_time
        self.password = password
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_realm = server_realm
        self.sub_device_count = sub_device_count
        self.sub_device_info = sub_device_info
        self.vendor = vendor

    def validate(self):
        if self.sub_device_info:
            for k in self.sub_device_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.in_protocol is not None:
            result['InProtocol'] = self.in_protocol
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.password is not None:
            result['Password'] = self.password
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.server_realm is not None:
            result['ServerRealm'] = self.server_realm
        if self.sub_device_count is not None:
            result['SubDeviceCount'] = self.sub_device_count
        result['SubDeviceInfo'] = []
        if self.sub_device_info is not None:
            for k in self.sub_device_info:
                result['SubDeviceInfo'].append(k.to_map() if k else None)
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('InProtocol') is not None:
            self.in_protocol = m.get('InProtocol')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('ServerRealm') is not None:
            self.server_realm = m.get('ServerRealm')
        if m.get('SubDeviceCount') is not None:
            self.sub_device_count = m.get('SubDeviceCount')
        self.sub_device_info = []
        if m.get('SubDeviceInfo') is not None:
            for k in m.get('SubDeviceInfo'):
                temp_model = DescribeNvrsResponseBodyDataRecordsSubDeviceInfo()
                self.sub_device_info.append(temp_model.from_map(k))
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DescribeNvrsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_num: int = None,
        page_size: int = None,
        records: List[DescribeNvrsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_num = page_num
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeNvrsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeNvrsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeNvrsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeNvrsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeNvrsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeNvrsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNvrsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSearchItemsRequest(TeaModel):
    def __init__(
        self,
        page_number: str = None,
        page_size: str = None,
        search_item_ids: str = None,
        search_table_id: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.search_item_ids = search_item_ids
        self.search_table_id = search_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_item_ids is not None:
            result['SearchItemIds'] = self.search_item_ids
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchItemIds') is not None:
            self.search_item_ids = m.get('SearchItemIds')
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        return self


class DescribeSearchItemsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        item_image_url: str = None,
        search_item_id: str = None,
        search_item_name: str = None,
    ):
        self.item_image_url = item_image_url
        self.search_item_id = search_item_id
        self.search_item_name = search_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.search_item_id is not None:
            result['SearchItemId'] = self.search_item_id
        if self.search_item_name is not None:
            result['SearchItemName'] = self.search_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('SearchItemId') is not None:
            self.search_item_id = m.get('SearchItemId')
        if m.get('SearchItemName') is not None:
            self.search_item_name = m.get('SearchItemName')
        return self


class DescribeSearchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: str = None,
        page_size: str = None,
        records: List[DescribeSearchItemsResponseBodyDataRecords] = None,
        total_count: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeSearchItemsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeSearchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeSearchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeSearchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSearchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSearchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSearchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSearchTablesRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        search_table_ids: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.search_table_ids = search_table_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_table_ids is not None:
            result['SearchTableIds'] = self.search_table_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchTableIds') is not None:
            self.search_table_ids = m.get('SearchTableIds')
        return self


class DescribeSearchTablesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        search_table_id: str = None,
        search_table_name: str = None,
        target_type: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.search_table_id = search_table_id
        self.search_table_name = search_table_name
        self.target_type = target_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        if self.search_table_name is not None:
            result['SearchTableName'] = self.search_table_name
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        if m.get('SearchTableName') is not None:
            self.search_table_name = m.get('SearchTableName')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        return self


class DescribeSearchTablesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_numbei: int = None,
        page_size: int = None,
        records: List[DescribeSearchTablesResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_numbei = page_numbei
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_numbei is not None:
            result['PageNumbei'] = self.page_numbei
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumbei') is not None:
            self.page_numbei = m.get('PageNumbei')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeSearchTablesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeSearchTablesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeSearchTablesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeSearchTablesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSearchTablesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSearchTablesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSearchTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeWatchItemsRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        watch_item_ids: str = None,
        watch_policy_id: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.watch_item_ids = watch_item_ids
        self.watch_policy_id = watch_policy_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.watch_item_ids is not None:
            result['WatchItemIds'] = self.watch_item_ids
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('WatchItemIds') is not None:
            self.watch_item_ids = m.get('WatchItemIds')
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        return self


class DescribeWatchItemsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        item_attributes: str = None,
        item_image_url: str = None,
        watch_item_id: str = None,
        watch_item_name: str = None,
    ):
        self.item_attributes = item_attributes
        self.item_image_url = item_image_url
        self.watch_item_id = watch_item_id
        self.watch_item_name = watch_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_attributes is not None:
            result['ItemAttributes'] = self.item_attributes
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.watch_item_id is not None:
            result['WatchItemId'] = self.watch_item_id
        if self.watch_item_name is not None:
            result['WatchItemName'] = self.watch_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemAttributes') is not None:
            self.item_attributes = m.get('ItemAttributes')
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('WatchItemId') is not None:
            self.watch_item_id = m.get('WatchItemId')
        if m.get('WatchItemName') is not None:
            self.watch_item_name = m.get('WatchItemName')
        return self


class DescribeWatchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[DescribeWatchItemsResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeWatchItemsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeWatchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeWatchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeWatchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeWatchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeWatchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeWatchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeWatchPoliciesRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        watch_policy_ids: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.watch_policy_ids = watch_policy_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.watch_policy_ids is not None:
            result['WatchPolicyIds'] = self.watch_policy_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('WatchPolicyIds') is not None:
            self.watch_policy_ids = m.get('WatchPolicyIds')
        return self


class DescribeWatchPoliciesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        item_match_type: str = None,
        similarity_threshold: float = None,
        target_type: str = None,
        watch_mode: str = None,
        watch_policy_id: str = None,
        watch_policy_name: str = None,
    ):
        self.item_match_type = item_match_type
        self.similarity_threshold = similarity_threshold
        self.target_type = target_type
        self.watch_mode = watch_mode
        self.watch_policy_id = watch_policy_id
        self.watch_policy_name = watch_policy_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_match_type is not None:
            result['ItemMatchType'] = self.item_match_type
        if self.similarity_threshold is not None:
            result['SimilarityThreshold'] = self.similarity_threshold
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        if self.watch_mode is not None:
            result['WatchMode'] = self.watch_mode
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        if self.watch_policy_name is not None:
            result['WatchPolicyName'] = self.watch_policy_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemMatchType') is not None:
            self.item_match_type = m.get('ItemMatchType')
        if m.get('SimilarityThreshold') is not None:
            self.similarity_threshold = m.get('SimilarityThreshold')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        if m.get('WatchMode') is not None:
            self.watch_mode = m.get('WatchMode')
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        if m.get('WatchPolicyName') is not None:
            self.watch_policy_name = m.get('WatchPolicyName')
        return self


class DescribeWatchPoliciesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[DescribeWatchPoliciesResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeWatchPoliciesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeWatchPoliciesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeWatchPoliciesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeWatchPoliciesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeWatchPoliciesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeWatchPoliciesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeWatchPoliciesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeWatchTasksRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        watch_task_ids: str = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.watch_task_ids = watch_task_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.watch_task_ids is not None:
            result['WatchTaskIds'] = self.watch_task_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('WatchTaskIds') is not None:
            self.watch_task_ids = m.get('WatchTaskIds')
        return self


class DescribeWatchTasksResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        description: str = None,
        device_list: str = None,
        message_receiver: str = None,
        schedule_cycle_dates: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        task_name: str = None,
        watch_policy_ids: str = None,
        watch_task_id: str = None,
    ):
        self.corp_id = corp_id
        self.description = description
        self.device_list = device_list
        self.message_receiver = message_receiver
        self.schedule_cycle_dates = schedule_cycle_dates
        self.schedule_times = schedule_times
        self.schedule_type = schedule_type
        self.task_name = task_name
        self.watch_policy_ids = watch_policy_ids
        self.watch_task_id = watch_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.description is not None:
            result['Description'] = self.description
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.message_receiver is not None:
            result['MessageReceiver'] = self.message_receiver
        if self.schedule_cycle_dates is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.watch_policy_ids is not None:
            result['WatchPolicyIds'] = self.watch_policy_ids
        if self.watch_task_id is not None:
            result['WatchTaskId'] = self.watch_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('MessageReceiver') is not None:
            self.message_receiver = m.get('MessageReceiver')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates = m.get('ScheduleCycleDates')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('WatchPolicyIds') is not None:
            self.watch_policy_ids = m.get('WatchPolicyIds')
        if m.get('WatchTaskId') is not None:
            self.watch_task_id = m.get('WatchTaskId')
        return self


class DescribeWatchTasksResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[DescribeWatchTasksResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = DescribeWatchTasksResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeWatchTasksResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeWatchTasksResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeWatchTasksResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeWatchTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeWatchTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeWatchTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribesDoubleVerificationGroupsRequest(TeaModel):
    def __init__(
        self,
        double_verification_group_ids: str = None,
        id: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.double_verification_group_ids = double_verification_group_ids
        self.id = id
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.double_verification_group_ids is not None:
            result['DoubleVerificationGroupIds'] = self.double_verification_group_ids
        if self.id is not None:
            result['Id'] = self.id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DoubleVerificationGroupIds') is not None:
            self.double_verification_group_ids = m.get('DoubleVerificationGroupIds')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList(TeaModel):
    def __init__(
        self,
        person_id: str = None,
        person_table_id: str = None,
    ):
        self.person_id = person_id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        enabled: str = None,
        group_id: str = None,
        interval: int = None,
        last_change: str = None,
        member_number: int = None,
        person_id_list: List[DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList] = None,
    ):
        self.device_id = device_id
        self.enabled = enabled
        self.group_id = group_id
        self.interval = interval
        self.last_change = last_change
        self.member_number = member_number
        self.person_id_list = person_id_list

    def validate(self):
        if self.person_id_list:
            for k in self.person_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.member_number is not None:
            result['MemberNumber'] = self.member_number
        result['PersonIdList'] = []
        if self.person_id_list is not None:
            for k in self.person_id_list:
                result['PersonIdList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('MemberNumber') is not None:
            self.member_number = m.get('MemberNumber')
        self.person_id_list = []
        if m.get('PersonIdList') is not None:
            for k in m.get('PersonIdList'):
                temp_model = DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList()
                self.person_id_list.append(temp_model.from_map(k))
        return self


class DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups(TeaModel):
    def __init__(
        self,
        double_verification_group_list: List[DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList] = None,
        page_num: int = None,
        page_size: int = None,
        total_num: int = None,
    ):
        self.double_verification_group_list = double_verification_group_list
        self.page_num = page_num
        self.page_size = page_size
        self.total_num = total_num

    def validate(self):
        if self.double_verification_group_list:
            for k in self.double_verification_group_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DoubleVerificationGroupList'] = []
        if self.double_verification_group_list is not None:
            for k in self.double_verification_group_list:
                result['DoubleVerificationGroupList'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_num is not None:
            result['TotalNum'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.double_verification_group_list = []
        if m.get('DoubleVerificationGroupList') is not None:
            for k in m.get('DoubleVerificationGroupList'):
                temp_model = DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList()
                self.double_verification_group_list.append(temp_model.from_map(k))
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalNum') is not None:
            self.total_num = m.get('TotalNum')
        return self


class DescribesDoubleVerificationGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        double_verification_groups: DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.double_verification_groups = double_verification_groups
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.double_verification_groups:
            self.double_verification_groups.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.double_verification_groups is not None:
            result['DoubleVerificationGroups'] = self.double_verification_groups.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DoubleVerificationGroups') is not None:
            temp_model = DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups()
            self.double_verification_groups = temp_model.from_map(m['DoubleVerificationGroups'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribesDoubleVerificationGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribesDoubleVerificationGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribesDoubleVerificationGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EchoStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class EchoStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: EchoStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EchoStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq(TeaModel):
    def __init__(
        self,
        alarm_topic: str = None,
        event_topic: str = None,
        instance_id: str = None,
        mq_type: str = None,
        ram_arn_role: str = None,
        region_id: str = None,
    ):
        self.alarm_topic = alarm_topic
        self.event_topic = event_topic
        self.instance_id = instance_id
        self.mq_type = mq_type
        self.ram_arn_role = ram_arn_role
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_topic is not None:
            result['AlarmTopic'] = self.alarm_topic
        if self.event_topic is not None:
            result['EventTopic'] = self.event_topic
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.mq_type is not None:
            result['MqType'] = self.mq_type
        if self.ram_arn_role is not None:
            result['RamArnRole'] = self.ram_arn_role
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlarmTopic') is not None:
            self.alarm_topic = m.get('AlarmTopic')
        if m.get('EventTopic') is not None:
            self.event_topic = m.get('EventTopic')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MqType') is not None:
            self.mq_type = m.get('MqType')
        if m.get('RamArnRole') is not None:
            self.ram_arn_role = m.get('RamArnRole')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage(TeaModel):
    def __init__(
        self,
        bucket: str = None,
        endpoint: str = None,
        path: str = None,
        proxy: str = None,
        ram_arn_role: str = None,
        storage_type: str = None,
    ):
        self.bucket = bucket
        self.endpoint = endpoint
        self.path = path
        self.proxy = proxy
        self.ram_arn_role = ram_arn_role
        self.storage_type = storage_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bucket is not None:
            result['Bucket'] = self.bucket
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.path is not None:
            result['Path'] = self.path
        if self.proxy is not None:
            result['Proxy'] = self.proxy
        if self.ram_arn_role is not None:
            result['RamArnRole'] = self.ram_arn_role
        if self.storage_type is not None:
            result['StorageType'] = self.storage_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bucket') is not None:
            self.bucket = m.get('Bucket')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Proxy') is not None:
            self.proxy = m.get('Proxy')
        if m.get('RamArnRole') is not None:
            self.ram_arn_role = m.get('RamArnRole')
        if m.get('StorageType') is not None:
            self.storage_type = m.get('StorageType')
        return self


class GetAiotStorageInfoResponseBodyAiotStorageInfo(TeaModel):
    def __init__(
        self,
        event_alarm_mq: GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq = None,
        event_alarm_picture_storage: GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage = None,
    ):
        self.event_alarm_mq = event_alarm_mq
        self.event_alarm_picture_storage = event_alarm_picture_storage

    def validate(self):
        if self.event_alarm_mq:
            self.event_alarm_mq.validate()
        if self.event_alarm_picture_storage:
            self.event_alarm_picture_storage.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_alarm_mq is not None:
            result['EventAlarmMq'] = self.event_alarm_mq.to_map()
        if self.event_alarm_picture_storage is not None:
            result['EventAlarmPictureStorage'] = self.event_alarm_picture_storage.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventAlarmMq') is not None:
            temp_model = GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq()
            self.event_alarm_mq = temp_model.from_map(m['EventAlarmMq'])
        if m.get('EventAlarmPictureStorage') is not None:
            temp_model = GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage()
            self.event_alarm_picture_storage = temp_model.from_map(m['EventAlarmPictureStorage'])
        return self


class GetAiotStorageInfoResponseBody(TeaModel):
    def __init__(
        self,
        aiot_storage_info: GetAiotStorageInfoResponseBodyAiotStorageInfo = None,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.aiot_storage_info = aiot_storage_info
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.aiot_storage_info:
            self.aiot_storage_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_storage_info is not None:
            result['AiotStorageInfo'] = self.aiot_storage_info.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotStorageInfo') is not None:
            temp_model = GetAiotStorageInfoResponseBodyAiotStorageInfo()
            self.aiot_storage_info = temp_model.from_map(m['AiotStorageInfo'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetAiotStorageInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAiotStorageInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAiotStorageInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBodyOptionsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
    ):
        self.corp_id = corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        return self


class GetBodyOptionsResponseBodyDataOptionList(TeaModel):
    def __init__(
        self,
        key: str = None,
        name: str = None,
    ):
        self.key = key
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetBodyOptionsResponseBodyData(TeaModel):
    def __init__(
        self,
        key: str = None,
        name: str = None,
        option_list: List[GetBodyOptionsResponseBodyDataOptionList] = None,
    ):
        self.key = key
        self.name = name
        self.option_list = option_list

    def validate(self):
        if self.option_list:
            for k in self.option_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        result['OptionList'] = []
        if self.option_list is not None:
            for k in self.option_list:
                result['OptionList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.option_list = []
        if m.get('OptionList') is not None:
            for k in m.get('OptionList'):
                temp_model = GetBodyOptionsResponseBodyDataOptionList()
                self.option_list.append(temp_model.from_map(k))
        return self


class GetBodyOptionsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetBodyOptionsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetBodyOptionsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetBodyOptionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetBodyOptionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBodyOptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCatalogListRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        return self


class GetCatalogListResponseBodyData(TeaModel):
    def __init__(
        self,
        catalog_id: int = None,
        catalog_name: str = None,
        isv_sub_id: str = None,
        parent_catalog_id: int = None,
        profile_count: int = None,
    ):
        self.catalog_id = catalog_id
        self.catalog_name = catalog_name
        self.isv_sub_id = isv_sub_id
        self.parent_catalog_id = parent_catalog_id
        self.profile_count = profile_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.catalog_name is not None:
            result['CatalogName'] = self.catalog_name
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_catalog_id is not None:
            result['ParentCatalogId'] = self.parent_catalog_id
        if self.profile_count is not None:
            result['ProfileCount'] = self.profile_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CatalogName') is not None:
            self.catalog_name = m.get('CatalogName')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCatalogId') is not None:
            self.parent_catalog_id = m.get('ParentCatalogId')
        if m.get('ProfileCount') is not None:
            self.profile_count = m.get('ProfileCount')
        return self


class GetCatalogListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetCatalogListResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetCatalogListResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetCatalogListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetCatalogListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCatalogListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCityCodeResponseBodyData(TeaModel):
    def __init__(
        self,
        city_address: str = None,
        city_code: str = None,
    ):
        self.city_address = city_address
        self.city_code = city_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_address is not None:
            result['CityAddress'] = self.city_address
        if self.city_code is not None:
            result['CityCode'] = self.city_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CityAddress') is not None:
            self.city_address = m.get('CityAddress')
        if m.get('CityCode') is not None:
            self.city_code = m.get('CityCode')
        return self


class GetCityCodeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetCityCodeResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetCityCodeResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetCityCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetCityCodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCityCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDataSourceStatsRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        data_source_type: str = None,
    ):
        self.corp_id_list = corp_id_list
        self.data_source_type = data_source_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        return self


class GetDataSourceStatsResponseBodyData(TeaModel):
    def __init__(
        self,
        data_source_type: str = None,
        items: Dict[str, Any] = None,
        total: int = None,
    ):
        self.data_source_type = data_source_type
        self.items = items
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.items is not None:
            result['Items'] = self.items
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('Items') is not None:
            self.items = m.get('Items')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class GetDataSourceStatsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetDataSourceStatsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetDataSourceStatsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDataSourceStatsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDataSourceStatsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDataSourceStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceCaptureStrategyRequest(TeaModel):
    def __init__(
        self,
        device_code: str = None,
        device_type: str = None,
    ):
        # 设备通道号
        self.device_code = device_code
        # 设备类型
        self.device_type = device_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        return self


class GetDeviceCaptureStrategyResponseBodyData(TeaModel):
    def __init__(
        self,
        device_code: str = None,
        device_type: str = None,
        friday_capture_strategy: str = None,
        monday_capture_strategy: str = None,
        saturday_capture_strategy: str = None,
        sunday_capture_strategy: str = None,
        thursday_capture_strategy: str = None,
        tuesday_capture_strategy: str = None,
        wednesday_capture_strategy: str = None,
    ):
        # 设备通道
        self.device_code = device_code
        # 设备类型
        self.device_type = device_type
        # 星期五抓取策略
        self.friday_capture_strategy = friday_capture_strategy
        # 星期一抓取策略
        self.monday_capture_strategy = monday_capture_strategy
        # 星期六抓取策略
        self.saturday_capture_strategy = saturday_capture_strategy
        # 星期日抓取策略
        self.sunday_capture_strategy = sunday_capture_strategy
        # 星期四抓取策略
        self.thursday_capture_strategy = thursday_capture_strategy
        # 星期二抓取策略
        self.tuesday_capture_strategy = tuesday_capture_strategy
        # 星期三抓取策略
        self.wednesday_capture_strategy = wednesday_capture_strategy

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.friday_capture_strategy is not None:
            result['FridayCaptureStrategy'] = self.friday_capture_strategy
        if self.monday_capture_strategy is not None:
            result['MondayCaptureStrategy'] = self.monday_capture_strategy
        if self.saturday_capture_strategy is not None:
            result['SaturdayCaptureStrategy'] = self.saturday_capture_strategy
        if self.sunday_capture_strategy is not None:
            result['SundayCaptureStrategy'] = self.sunday_capture_strategy
        if self.thursday_capture_strategy is not None:
            result['ThursdayCaptureStrategy'] = self.thursday_capture_strategy
        if self.tuesday_capture_strategy is not None:
            result['TuesdayCaptureStrategy'] = self.tuesday_capture_strategy
        if self.wednesday_capture_strategy is not None:
            result['WednesdayCaptureStrategy'] = self.wednesday_capture_strategy
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('FridayCaptureStrategy') is not None:
            self.friday_capture_strategy = m.get('FridayCaptureStrategy')
        if m.get('MondayCaptureStrategy') is not None:
            self.monday_capture_strategy = m.get('MondayCaptureStrategy')
        if m.get('SaturdayCaptureStrategy') is not None:
            self.saturday_capture_strategy = m.get('SaturdayCaptureStrategy')
        if m.get('SundayCaptureStrategy') is not None:
            self.sunday_capture_strategy = m.get('SundayCaptureStrategy')
        if m.get('ThursdayCaptureStrategy') is not None:
            self.thursday_capture_strategy = m.get('ThursdayCaptureStrategy')
        if m.get('TuesdayCaptureStrategy') is not None:
            self.tuesday_capture_strategy = m.get('TuesdayCaptureStrategy')
        if m.get('WednesdayCaptureStrategy') is not None:
            self.wednesday_capture_strategy = m.get('WednesdayCaptureStrategy')
        return self


class GetDeviceCaptureStrategyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetDeviceCaptureStrategyResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        # 错误码
        self.code = code
        # 响应数据内容
        self.data = data
        # 错误信息
        self.message = message
        # RequestId
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetDeviceCaptureStrategyResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceCaptureStrategyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceCaptureStrategyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceCaptureStrategyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceConfigRequest(TeaModel):
    def __init__(
        self,
        device_sn: str = None,
        device_time_stamp: str = None,
    ):
        self.device_sn = device_sn
        self.device_time_stamp = device_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_time_stamp is not None:
            result['DeviceTimeStamp'] = self.device_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceTimeStamp') is not None:
            self.device_time_stamp = m.get('DeviceTimeStamp')
        return self


class GetDeviceConfigResponseBodyChannelList(TeaModel):
    def __init__(
        self,
        channel_gb_id: str = None,
        friday_capture_strategy: str = None,
        monday_capture_strategy: str = None,
        saturday_capture_strategy: str = None,
        sunday_capture_strategy: str = None,
        thursday_capture_strategy: str = None,
        tuesday_capture_strategy: str = None,
        wednesday_capture_strategy: str = None,
    ):
        self.channel_gb_id = channel_gb_id
        self.friday_capture_strategy = friday_capture_strategy
        self.monday_capture_strategy = monday_capture_strategy
        self.saturday_capture_strategy = saturday_capture_strategy
        self.sunday_capture_strategy = sunday_capture_strategy
        self.thursday_capture_strategy = thursday_capture_strategy
        self.tuesday_capture_strategy = tuesday_capture_strategy
        self.wednesday_capture_strategy = wednesday_capture_strategy

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_gb_id is not None:
            result['ChannelGbId'] = self.channel_gb_id
        if self.friday_capture_strategy is not None:
            result['FridayCaptureStrategy'] = self.friday_capture_strategy
        if self.monday_capture_strategy is not None:
            result['MondayCaptureStrategy'] = self.monday_capture_strategy
        if self.saturday_capture_strategy is not None:
            result['SaturdayCaptureStrategy'] = self.saturday_capture_strategy
        if self.sunday_capture_strategy is not None:
            result['SundayCaptureStrategy'] = self.sunday_capture_strategy
        if self.thursday_capture_strategy is not None:
            result['ThursdayCaptureStrategy'] = self.thursday_capture_strategy
        if self.tuesday_capture_strategy is not None:
            result['TuesdayCaptureStrategy'] = self.tuesday_capture_strategy
        if self.wednesday_capture_strategy is not None:
            result['WednesdayCaptureStrategy'] = self.wednesday_capture_strategy
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelGbId') is not None:
            self.channel_gb_id = m.get('ChannelGbId')
        if m.get('FridayCaptureStrategy') is not None:
            self.friday_capture_strategy = m.get('FridayCaptureStrategy')
        if m.get('MondayCaptureStrategy') is not None:
            self.monday_capture_strategy = m.get('MondayCaptureStrategy')
        if m.get('SaturdayCaptureStrategy') is not None:
            self.saturday_capture_strategy = m.get('SaturdayCaptureStrategy')
        if m.get('SundayCaptureStrategy') is not None:
            self.sunday_capture_strategy = m.get('SundayCaptureStrategy')
        if m.get('ThursdayCaptureStrategy') is not None:
            self.thursday_capture_strategy = m.get('ThursdayCaptureStrategy')
        if m.get('TuesdayCaptureStrategy') is not None:
            self.tuesday_capture_strategy = m.get('TuesdayCaptureStrategy')
        if m.get('WednesdayCaptureStrategy') is not None:
            self.wednesday_capture_strategy = m.get('WednesdayCaptureStrategy')
        return self


class GetDeviceConfigResponseBodyOSDList(TeaModel):
    def __init__(
        self,
        left_top_x: str = None,
        left_top_y: str = None,
        text: str = None,
    ):
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class GetDeviceConfigResponseBody(TeaModel):
    def __init__(
        self,
        audio_enable: str = None,
        audio_format: str = None,
        bit_rate: str = None,
        channel_list: List[GetDeviceConfigResponseBodyChannelList] = None,
        code: str = None,
        device_address: str = None,
        device_id: str = None,
        device_name: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: int = None,
        latitude: str = None,
        longitude: str = None,
        message: str = None,
        osdlist: List[GetDeviceConfigResponseBodyOSDList] = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        pass_word: str = None,
        protocol: str = None,
        request_id: str = None,
        resolution: str = None,
        retry_interval: str = None,
        server_id: str = None,
        server_ip: str = None,
        server_port: str = None,
        user_name: str = None,
    ):
        self.audio_enable = audio_enable
        self.audio_format = audio_format
        self.bit_rate = bit_rate
        self.channel_list = channel_list
        self.code = code
        self.device_address = device_address
        self.device_id = device_id
        self.device_name = device_name
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.latitude = latitude
        self.longitude = longitude
        self.message = message
        self.osdlist = osdlist
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.pass_word = pass_word
        self.protocol = protocol
        # Id of the request
        self.request_id = request_id
        self.resolution = resolution
        self.retry_interval = retry_interval
        self.server_id = server_id
        self.server_ip = server_ip
        self.server_port = server_port
        self.user_name = user_name

    def validate(self):
        if self.channel_list:
            for k in self.channel_list:
                if k:
                    k.validate()
        if self.osdlist:
            for k in self.osdlist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.audio_format is not None:
            result['AudioFormat'] = self.audio_format
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        result['ChannelList'] = []
        if self.channel_list is not None:
            for k in self.channel_list:
                result['ChannelList'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.message is not None:
            result['Message'] = self.message
        result['OSDList'] = []
        if self.osdlist is not None:
            for k in self.osdlist:
                result['OSDList'].append(k.to_map() if k else None)
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.pass_word is not None:
            result['PassWord'] = self.pass_word
        if self.protocol is not None:
            result['Protocol'] = self.protocol
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resolution is not None:
            result['Resolution'] = self.resolution
        if self.retry_interval is not None:
            result['RetryInterval'] = self.retry_interval
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        if self.server_ip is not None:
            result['ServerIp'] = self.server_ip
        if self.server_port is not None:
            result['ServerPort'] = self.server_port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('AudioFormat') is not None:
            self.audio_format = m.get('AudioFormat')
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        self.channel_list = []
        if m.get('ChannelList') is not None:
            for k in m.get('ChannelList'):
                temp_model = GetDeviceConfigResponseBodyChannelList()
                self.channel_list.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        self.osdlist = []
        if m.get('OSDList') is not None:
            for k in m.get('OSDList'):
                temp_model = GetDeviceConfigResponseBodyOSDList()
                self.osdlist.append(temp_model.from_map(k))
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('PassWord') is not None:
            self.pass_word = m.get('PassWord')
        if m.get('Protocol') is not None:
            self.protocol = m.get('Protocol')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Resolution') is not None:
            self.resolution = m.get('Resolution')
        if m.get('RetryInterval') is not None:
            self.retry_interval = m.get('RetryInterval')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        if m.get('ServerIp') is not None:
            self.server_ip = m.get('ServerIp')
        if m.get('ServerPort') is not None:
            self.server_port = m.get('ServerPort')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class GetDeviceConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceCountRequest(TeaModel):
    def __init__(
        self,
        up_stream_mode: str = None,
    ):
        self.up_stream_mode = up_stream_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.up_stream_mode is not None:
            result['UpStreamMode'] = self.up_stream_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UpStreamMode') is not None:
            self.up_stream_mode = m.get('UpStreamMode')
        return self


class GetDeviceCountResponseBodyData(TeaModel):
    def __init__(
        self,
        device_count: int = None,
    ):
        self.device_count = device_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_count is not None:
            result['DeviceCount'] = self.device_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCount') is not None:
            self.device_count = m.get('DeviceCount')
        return self


class GetDeviceCountResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetDeviceCountResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetDeviceCountResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceCountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceCountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceLiveUrlRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        gb_id: str = None,
        out_protocol: str = None,
        stream_type: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.gb_id = gb_id
        self.out_protocol = out_protocol
        self.stream_type = stream_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.out_protocol is not None:
            result['OutProtocol'] = self.out_protocol
        if self.stream_type is not None:
            result['StreamType'] = self.stream_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OutProtocol') is not None:
            self.out_protocol = m.get('OutProtocol')
        if m.get('StreamType') is not None:
            self.stream_type = m.get('StreamType')
        return self


class GetDeviceLiveUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        out_protocol: str = None,
        request_id: str = None,
        stream_type: int = None,
        url: str = None,
    ):
        self.code = code
        self.message = message
        self.out_protocol = out_protocol
        self.request_id = request_id
        self.stream_type = stream_type
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.out_protocol is not None:
            result['OutProtocol'] = self.out_protocol
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.stream_type is not None:
            result['StreamType'] = self.stream_type
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutProtocol') is not None:
            self.out_protocol = m.get('OutProtocol')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('StreamType') is not None:
            self.stream_type = m.get('StreamType')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetDeviceLiveUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceLiveUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceLiveUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDevicePictureRequest(TeaModel):
    def __init__(
        self,
        device_id: str = None,
    ):
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class GetDevicePictureResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDevicePictureResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDevicePictureResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDevicePictureResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceStatsRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_status: str = None,
        device_type: str = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_status = device_status
        self.device_type = device_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        return self


class GetDeviceStatsResponseBodyData(TeaModel):
    def __init__(
        self,
        count: int = None,
        device_status: str = None,
        device_type: str = None,
    ):
        self.count = count
        self.device_status = device_status
        self.device_type = device_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        return self


class GetDeviceStatsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetDeviceStatsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetDeviceStatsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceStatsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceStatsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceVideoUrlRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        end_time: int = None,
        gb_id: str = None,
        out_protocol: str = None,
        start_time: int = None,
        storage_type: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.end_time = end_time
        self.gb_id = gb_id
        self.out_protocol = out_protocol
        self.start_time = start_time
        self.storage_type = storage_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.out_protocol is not None:
            result['OutProtocol'] = self.out_protocol
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.storage_type is not None:
            result['StorageType'] = self.storage_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OutProtocol') is not None:
            self.out_protocol = m.get('OutProtocol')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StorageType') is not None:
            self.storage_type = m.get('StorageType')
        return self


class GetDeviceVideoUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        out_protocol: str = None,
        request_id: str = None,
        url: str = None,
    ):
        self.code = code
        self.message = message
        self.out_protocol = out_protocol
        self.request_id = request_id
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.out_protocol is not None:
            result['OutProtocol'] = self.out_protocol
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutProtocol') is not None:
            self.out_protocol = m.get('OutProtocol')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetDeviceVideoUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetDeviceVideoUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceVideoUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFaceModelResultRequest(TeaModel):
    def __init__(
        self,
        picture_content: str = None,
        picture_id: str = None,
        picture_url: str = None,
    ):
        self.picture_content = picture_content
        self.picture_id = picture_id
        self.picture_url = picture_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.picture_content is not None:
            result['PictureContent'] = self.picture_content
        if self.picture_id is not None:
            result['PictureId'] = self.picture_id
        if self.picture_url is not None:
            result['PictureUrl'] = self.picture_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PictureContent') is not None:
            self.picture_content = m.get('PictureContent')
        if m.get('PictureId') is not None:
            self.picture_id = m.get('PictureId')
        if m.get('PictureUrl') is not None:
            self.picture_url = m.get('PictureUrl')
        return self


class GetFaceModelResultResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        age_lower_limit: int = None,
        age_lower_limit_reliability: str = None,
        age_up_limit: int = None,
        age_up_limit_reliability: str = None,
        cap_color: int = None,
        cap_color_reliability: str = None,
        cap_style: int = None,
        cap_style_reliability: str = None,
        ethic_code: int = None,
        ethic_code_reliability: str = None,
        face_style: str = None,
        face_style_reliability: str = None,
        feature_data: List[float] = None,
        gender_code: int = None,
        gender_code_reliability: str = None,
        glass_color: int = None,
        glass_color_reliability: str = None,
        glass_style: int = None,
        glass_style_reliability: str = None,
        hair_color: int = None,
        hair_color_reliability: str = None,
        hair_style: int = None,
        hair_style_reliability: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        mustache_style: str = None,
        mustache_style_reliability: str = None,
        respirator_color: int = None,
        respirator_color_reliability: str = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        skin_color: int = None,
        skin_color_reliability: str = None,
    ):
        self.age_lower_limit = age_lower_limit
        self.age_lower_limit_reliability = age_lower_limit_reliability
        self.age_up_limit = age_up_limit
        self.age_up_limit_reliability = age_up_limit_reliability
        self.cap_color = cap_color
        self.cap_color_reliability = cap_color_reliability
        self.cap_style = cap_style
        self.cap_style_reliability = cap_style_reliability
        self.ethic_code = ethic_code
        self.ethic_code_reliability = ethic_code_reliability
        self.face_style = face_style
        self.face_style_reliability = face_style_reliability
        self.feature_data = feature_data
        self.gender_code = gender_code
        self.gender_code_reliability = gender_code_reliability
        self.glass_color = glass_color
        self.glass_color_reliability = glass_color_reliability
        self.glass_style = glass_style
        self.glass_style_reliability = glass_style_reliability
        self.hair_color = hair_color
        self.hair_color_reliability = hair_color_reliability
        self.hair_style = hair_style
        self.hair_style_reliability = hair_style_reliability
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.mustache_style = mustache_style
        self.mustache_style_reliability = mustache_style_reliability
        self.respirator_color = respirator_color
        self.respirator_color_reliability = respirator_color_reliability
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.skin_color = skin_color
        self.skin_color_reliability = skin_color_reliability

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.age_lower_limit is not None:
            result['AgeLowerLimit'] = self.age_lower_limit
        if self.age_lower_limit_reliability is not None:
            result['AgeLowerLimitReliability'] = self.age_lower_limit_reliability
        if self.age_up_limit is not None:
            result['AgeUpLimit'] = self.age_up_limit
        if self.age_up_limit_reliability is not None:
            result['AgeUpLimitReliability'] = self.age_up_limit_reliability
        if self.cap_color is not None:
            result['CapColor'] = self.cap_color
        if self.cap_color_reliability is not None:
            result['CapColorReliability'] = self.cap_color_reliability
        if self.cap_style is not None:
            result['CapStyle'] = self.cap_style
        if self.cap_style_reliability is not None:
            result['CapStyleReliability'] = self.cap_style_reliability
        if self.ethic_code is not None:
            result['EthicCode'] = self.ethic_code
        if self.ethic_code_reliability is not None:
            result['EthicCodeReliability'] = self.ethic_code_reliability
        if self.face_style is not None:
            result['FaceStyle'] = self.face_style
        if self.face_style_reliability is not None:
            result['FaceStyleReliability'] = self.face_style_reliability
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.gender_code is not None:
            result['GenderCode'] = self.gender_code
        if self.gender_code_reliability is not None:
            result['GenderCodeReliability'] = self.gender_code_reliability
        if self.glass_color is not None:
            result['GlassColor'] = self.glass_color
        if self.glass_color_reliability is not None:
            result['GlassColorReliability'] = self.glass_color_reliability
        if self.glass_style is not None:
            result['GlassStyle'] = self.glass_style
        if self.glass_style_reliability is not None:
            result['GlassStyleReliability'] = self.glass_style_reliability
        if self.hair_color is not None:
            result['HairColor'] = self.hair_color
        if self.hair_color_reliability is not None:
            result['HairColorReliability'] = self.hair_color_reliability
        if self.hair_style is not None:
            result['HairStyle'] = self.hair_style
        if self.hair_style_reliability is not None:
            result['HairStyleReliability'] = self.hair_style_reliability
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.mustache_style is not None:
            result['MustacheStyle'] = self.mustache_style
        if self.mustache_style_reliability is not None:
            result['MustacheStyleReliability'] = self.mustache_style_reliability
        if self.respirator_color is not None:
            result['RespiratorColor'] = self.respirator_color
        if self.respirator_color_reliability is not None:
            result['RespiratorColorReliability'] = self.respirator_color_reliability
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.skin_color is not None:
            result['SkinColor'] = self.skin_color
        if self.skin_color_reliability is not None:
            result['SkinColorReliability'] = self.skin_color_reliability
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgeLowerLimit') is not None:
            self.age_lower_limit = m.get('AgeLowerLimit')
        if m.get('AgeLowerLimitReliability') is not None:
            self.age_lower_limit_reliability = m.get('AgeLowerLimitReliability')
        if m.get('AgeUpLimit') is not None:
            self.age_up_limit = m.get('AgeUpLimit')
        if m.get('AgeUpLimitReliability') is not None:
            self.age_up_limit_reliability = m.get('AgeUpLimitReliability')
        if m.get('CapColor') is not None:
            self.cap_color = m.get('CapColor')
        if m.get('CapColorReliability') is not None:
            self.cap_color_reliability = m.get('CapColorReliability')
        if m.get('CapStyle') is not None:
            self.cap_style = m.get('CapStyle')
        if m.get('CapStyleReliability') is not None:
            self.cap_style_reliability = m.get('CapStyleReliability')
        if m.get('EthicCode') is not None:
            self.ethic_code = m.get('EthicCode')
        if m.get('EthicCodeReliability') is not None:
            self.ethic_code_reliability = m.get('EthicCodeReliability')
        if m.get('FaceStyle') is not None:
            self.face_style = m.get('FaceStyle')
        if m.get('FaceStyleReliability') is not None:
            self.face_style_reliability = m.get('FaceStyleReliability')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('GenderCode') is not None:
            self.gender_code = m.get('GenderCode')
        if m.get('GenderCodeReliability') is not None:
            self.gender_code_reliability = m.get('GenderCodeReliability')
        if m.get('GlassColor') is not None:
            self.glass_color = m.get('GlassColor')
        if m.get('GlassColorReliability') is not None:
            self.glass_color_reliability = m.get('GlassColorReliability')
        if m.get('GlassStyle') is not None:
            self.glass_style = m.get('GlassStyle')
        if m.get('GlassStyleReliability') is not None:
            self.glass_style_reliability = m.get('GlassStyleReliability')
        if m.get('HairColor') is not None:
            self.hair_color = m.get('HairColor')
        if m.get('HairColorReliability') is not None:
            self.hair_color_reliability = m.get('HairColorReliability')
        if m.get('HairStyle') is not None:
            self.hair_style = m.get('HairStyle')
        if m.get('HairStyleReliability') is not None:
            self.hair_style_reliability = m.get('HairStyleReliability')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('MustacheStyle') is not None:
            self.mustache_style = m.get('MustacheStyle')
        if m.get('MustacheStyleReliability') is not None:
            self.mustache_style_reliability = m.get('MustacheStyleReliability')
        if m.get('RespiratorColor') is not None:
            self.respirator_color = m.get('RespiratorColor')
        if m.get('RespiratorColorReliability') is not None:
            self.respirator_color_reliability = m.get('RespiratorColorReliability')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('SkinColor') is not None:
            self.skin_color = m.get('SkinColor')
        if m.get('SkinColorReliability') is not None:
            self.skin_color_reliability = m.get('SkinColorReliability')
        return self


class GetFaceModelResultResponseBodyData(TeaModel):
    def __init__(
        self,
        records: List[GetFaceModelResultResponseBodyDataRecords] = None,
    ):
        self.records = records

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = GetFaceModelResultResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        return self


class GetFaceModelResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetFaceModelResultResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetFaceModelResultResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetFaceModelResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetFaceModelResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFaceModelResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFaceOptionsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
    ):
        self.corp_id = corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        return self


class GetFaceOptionsResponseBodyDataOptionList(TeaModel):
    def __init__(
        self,
        key: str = None,
        name: str = None,
    ):
        self.key = key
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetFaceOptionsResponseBodyData(TeaModel):
    def __init__(
        self,
        key: str = None,
        name: str = None,
        option_list: List[GetFaceOptionsResponseBodyDataOptionList] = None,
    ):
        self.key = key
        self.name = name
        self.option_list = option_list

    def validate(self):
        if self.option_list:
            for k in self.option_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        result['OptionList'] = []
        if self.option_list is not None:
            for k in self.option_list:
                result['OptionList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.option_list = []
        if m.get('OptionList') is not None:
            for k in m.get('OptionList'):
                temp_model = GetFaceOptionsResponseBodyDataOptionList()
                self.option_list.append(temp_model.from_map(k))
        return self


class GetFaceOptionsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[GetFaceOptionsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = GetFaceOptionsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetFaceOptionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetFaceOptionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFaceOptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInventoryRequest(TeaModel):
    def __init__(
        self,
        commodity_code: str = None,
    ):
        self.commodity_code = commodity_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.commodity_code is not None:
            result['CommodityCode'] = self.commodity_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CommodityCode') is not None:
            self.commodity_code = m.get('CommodityCode')
        return self


class GetInventoryResponseBodyDataResultObject(TeaModel):
    def __init__(
        self,
        buyer_id: str = None,
        commodity_code: str = None,
        current_inventory: str = None,
        instance_id: str = None,
        inventory_id: str = None,
        valid_end_time: str = None,
        valid_start_time: str = None,
    ):
        self.buyer_id = buyer_id
        self.commodity_code = commodity_code
        self.current_inventory = current_inventory
        self.instance_id = instance_id
        self.inventory_id = inventory_id
        self.valid_end_time = valid_end_time
        self.valid_start_time = valid_start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.buyer_id is not None:
            result['BuyerId'] = self.buyer_id
        if self.commodity_code is not None:
            result['CommodityCode'] = self.commodity_code
        if self.current_inventory is not None:
            result['CurrentInventory'] = self.current_inventory
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.inventory_id is not None:
            result['InventoryId'] = self.inventory_id
        if self.valid_end_time is not None:
            result['ValidEndTime'] = self.valid_end_time
        if self.valid_start_time is not None:
            result['ValidStartTime'] = self.valid_start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuyerId') is not None:
            self.buyer_id = m.get('BuyerId')
        if m.get('CommodityCode') is not None:
            self.commodity_code = m.get('CommodityCode')
        if m.get('CurrentInventory') is not None:
            self.current_inventory = m.get('CurrentInventory')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InventoryId') is not None:
            self.inventory_id = m.get('InventoryId')
        if m.get('ValidEndTime') is not None:
            self.valid_end_time = m.get('ValidEndTime')
        if m.get('ValidStartTime') is not None:
            self.valid_start_time = m.get('ValidStartTime')
        return self


class GetInventoryResponseBodyData(TeaModel):
    def __init__(
        self,
        result_object: List[GetInventoryResponseBodyDataResultObject] = None,
    ):
        self.result_object = result_object

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ResultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['ResultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.result_object = []
        if m.get('ResultObject') is not None:
            for k in m.get('ResultObject'):
                temp_model = GetInventoryResponseBodyDataResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class GetInventoryResponseBody(TeaModel):
    def __init__(
        self,
        data: GetInventoryResponseBodyData = None,
        success: bool = None,
    ):
        self.data = data
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetInventoryResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInventoryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetInventoryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInventoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMonitorListRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.corp_id = corp_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetMonitorListResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        algorithm_vendor: str = None,
        attributes: str = None,
        create_date: str = None,
        description: str = None,
        device_list: str = None,
        expression: str = None,
        image_match: str = None,
        modified_date: str = None,
        monitor_type: str = None,
        notifier_extend_values: str = None,
        notifier_type: str = None,
        rule_expression: str = None,
        rule_name: str = None,
        status: str = None,
        task_id: str = None,
    ):
        self.algorithm_vendor = algorithm_vendor
        self.attributes = attributes
        self.create_date = create_date
        self.description = description
        self.device_list = device_list
        self.expression = expression
        self.image_match = image_match
        self.modified_date = modified_date
        self.monitor_type = monitor_type
        self.notifier_extend_values = notifier_extend_values
        self.notifier_type = notifier_type
        self.rule_expression = rule_expression
        self.rule_name = rule_name
        self.status = status
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_vendor is not None:
            result['AlgorithmVendor'] = self.algorithm_vendor
        if self.attributes is not None:
            result['Attributes'] = self.attributes
        if self.create_date is not None:
            result['CreateDate'] = self.create_date
        if self.description is not None:
            result['Description'] = self.description
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.image_match is not None:
            result['ImageMatch'] = self.image_match
        if self.modified_date is not None:
            result['ModifiedDate'] = self.modified_date
        if self.monitor_type is not None:
            result['MonitorType'] = self.monitor_type
        if self.notifier_extend_values is not None:
            result['NotifierExtendValues'] = self.notifier_extend_values
        if self.notifier_type is not None:
            result['NotifierType'] = self.notifier_type
        if self.rule_expression is not None:
            result['RuleExpression'] = self.rule_expression
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmVendor') is not None:
            self.algorithm_vendor = m.get('AlgorithmVendor')
        if m.get('Attributes') is not None:
            self.attributes = m.get('Attributes')
        if m.get('CreateDate') is not None:
            self.create_date = m.get('CreateDate')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('ImageMatch') is not None:
            self.image_match = m.get('ImageMatch')
        if m.get('ModifiedDate') is not None:
            self.modified_date = m.get('ModifiedDate')
        if m.get('MonitorType') is not None:
            self.monitor_type = m.get('MonitorType')
        if m.get('NotifierExtendValues') is not None:
            self.notifier_extend_values = m.get('NotifierExtendValues')
        if m.get('NotifierType') is not None:
            self.notifier_type = m.get('NotifierType')
        if m.get('RuleExpression') is not None:
            self.rule_expression = m.get('RuleExpression')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetMonitorListResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[GetMonitorListResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = GetMonitorListResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class GetMonitorListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetMonitorListResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetMonitorListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetMonitorListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetMonitorListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMonitorListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMonitorResultRequest(TeaModel):
    def __init__(
        self,
        algorithm_vendor: str = None,
        corp_id: str = None,
        end_time: int = None,
        min_record_id: str = None,
        start_time: int = None,
        task_id: str = None,
    ):
        self.algorithm_vendor = algorithm_vendor
        self.corp_id = corp_id
        self.end_time = end_time
        self.min_record_id = min_record_id
        self.start_time = start_time
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_vendor is not None:
            result['AlgorithmVendor'] = self.algorithm_vendor
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.min_record_id is not None:
            result['MinRecordId'] = self.min_record_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmVendor') is not None:
            self.algorithm_vendor = m.get('AlgorithmVendor')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('MinRecordId') is not None:
            self.min_record_id = m.get('MinRecordId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetMonitorResultResponseBodyDataRecordsExtendInfo(TeaModel):
    def __init__(
        self,
        plate_no: str = None,
    ):
        self.plate_no = plate_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        return self


class GetMonitorResultResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        extend_info: GetMonitorResultResponseBodyDataRecordsExtendInfo = None,
        gb_id: str = None,
        left_up_x: str = None,
        left_up_y: str = None,
        monitor_pic_url: str = None,
        pic_url: str = None,
        right_bottom_x: str = None,
        right_bottom_y: str = None,
        score: str = None,
        shot_time: str = None,
        target_pic_url: str = None,
        task_id: str = None,
    ):
        self.extend_info = extend_info
        self.gb_id = gb_id
        self.left_up_x = left_up_x
        self.left_up_y = left_up_y
        self.monitor_pic_url = monitor_pic_url
        self.pic_url = pic_url
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.score = score
        self.shot_time = shot_time
        self.target_pic_url = target_pic_url
        self.task_id = task_id

    def validate(self):
        if self.extend_info:
            self.extend_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info.to_map()
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.left_up_x is not None:
            result['LeftUpX'] = self.left_up_x
        if self.left_up_y is not None:
            result['LeftUpY'] = self.left_up_y
        if self.monitor_pic_url is not None:
            result['MonitorPicUrl'] = self.monitor_pic_url
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.score is not None:
            result['Score'] = self.score
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.target_pic_url is not None:
            result['TargetPicUrl'] = self.target_pic_url
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtendInfo') is not None:
            temp_model = GetMonitorResultResponseBodyDataRecordsExtendInfo()
            self.extend_info = temp_model.from_map(m['ExtendInfo'])
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('LeftUpX') is not None:
            self.left_up_x = m.get('LeftUpX')
        if m.get('LeftUpY') is not None:
            self.left_up_y = m.get('LeftUpY')
        if m.get('MonitorPicUrl') is not None:
            self.monitor_pic_url = m.get('MonitorPicUrl')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('TargetPicUrl') is not None:
            self.target_pic_url = m.get('TargetPicUrl')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetMonitorResultResponseBodyData(TeaModel):
    def __init__(
        self,
        max_id: str = None,
        records: List[GetMonitorResultResponseBodyDataRecords] = None,
    ):
        self.max_id = max_id
        self.records = records

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_id is not None:
            result['MaxId'] = self.max_id
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MaxId') is not None:
            self.max_id = m.get('MaxId')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = GetMonitorResultResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        return self


class GetMonitorResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetMonitorResultResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetMonitorResultResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetMonitorResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetMonitorResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMonitorResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOdpsResultResponseBody(TeaModel):
    def __init__(
        self,
        data: str = None,
        success: bool = None,
    ):
        # Id of the request
        self.data = data
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetOdpsResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetOdpsResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOdpsResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPersonDetailRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        corp_id: str = None,
        person_id: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.corp_id = corp_id
        self.person_id = person_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.person_id is not None:
            result['PersonID'] = self.person_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PersonID') is not None:
            self.person_id = m.get('PersonID')
        return self


class GetPersonDetailResponseBodyDataTagList(TeaModel):
    def __init__(
        self,
        tag_code: str = None,
        tag_name: str = None,
        tag_value: str = None,
        tag_value_id: str = None,
    ):
        self.tag_code = tag_code
        self.tag_name = tag_name
        self.tag_value = tag_value
        self.tag_value_id = tag_value_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.tag_value_id is not None:
            result['TagValueId'] = self.tag_value_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('TagValueId') is not None:
            self.tag_value_id = m.get('TagValueId')
        return self


class GetPersonDetailResponseBodyData(TeaModel):
    def __init__(
        self,
        person_id: str = None,
        pic_url: str = None,
        tag_list: List[GetPersonDetailResponseBodyDataTagList] = None,
    ):
        self.person_id = person_id
        self.pic_url = pic_url
        self.tag_list = tag_list

    def validate(self):
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = GetPersonDetailResponseBodyDataTagList()
                self.tag_list.append(temp_model.from_map(k))
        return self


class GetPersonDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetPersonDetailResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetPersonDetailResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetPersonDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetPersonDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPersonDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPersonListRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        corp_id_list: Dict[str, Any] = None,
        face_matching_rate_threshold: str = None,
        face_url: str = None,
        page_number: int = None,
        page_size: int = None,
        person_id_list: Dict[str, Any] = None,
    ):
        self.corp_id = corp_id
        self.corp_id_list = corp_id_list
        self.face_matching_rate_threshold = face_matching_rate_threshold
        self.face_url = face_url
        self.page_number = page_number
        self.page_size = page_size
        self.person_id_list = person_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.face_matching_rate_threshold is not None:
            result['FaceMatchingRateThreshold'] = self.face_matching_rate_threshold
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id_list is not None:
            result['PersonIdList'] = self.person_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('FaceMatchingRateThreshold') is not None:
            self.face_matching_rate_threshold = m.get('FaceMatchingRateThreshold')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonIdList') is not None:
            self.person_id_list = m.get('PersonIdList')
        return self


class GetPersonListShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        corp_id_list_shrink: str = None,
        face_matching_rate_threshold: str = None,
        face_url: str = None,
        page_number: int = None,
        page_size: int = None,
        person_id_list_shrink: str = None,
    ):
        self.corp_id = corp_id
        self.corp_id_list_shrink = corp_id_list_shrink
        self.face_matching_rate_threshold = face_matching_rate_threshold
        self.face_url = face_url
        self.page_number = page_number
        self.page_size = page_size
        self.person_id_list_shrink = person_id_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.corp_id_list_shrink is not None:
            result['CorpIdList'] = self.corp_id_list_shrink
        if self.face_matching_rate_threshold is not None:
            result['FaceMatchingRateThreshold'] = self.face_matching_rate_threshold
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id_list_shrink is not None:
            result['PersonIdList'] = self.person_id_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CorpIdList') is not None:
            self.corp_id_list_shrink = m.get('CorpIdList')
        if m.get('FaceMatchingRateThreshold') is not None:
            self.face_matching_rate_threshold = m.get('FaceMatchingRateThreshold')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonIdList') is not None:
            self.person_id_list_shrink = m.get('PersonIdList')
        return self


class GetPersonListResponseBodyDataRecordsPropertyTagList(TeaModel):
    def __init__(
        self,
        code: str = None,
        tag_code_name: str = None,
        tag_name: str = None,
        value: str = None,
    ):
        self.code = code
        self.tag_code_name = tag_code_name
        self.tag_name = tag_name
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.tag_code_name is not None:
            result['TagCodeName'] = self.tag_code_name
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('TagCodeName') is not None:
            self.tag_code_name = m.get('TagCodeName')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetPersonListResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        face_url: str = None,
        first_shot_time: int = None,
        last_shot_time: int = None,
        person_id: str = None,
        property_tag_list: List[GetPersonListResponseBodyDataRecordsPropertyTagList] = None,
        search_matching_rate: str = None,
    ):
        self.face_url = face_url
        self.first_shot_time = first_shot_time
        self.last_shot_time = last_shot_time
        self.person_id = person_id
        self.property_tag_list = property_tag_list
        self.search_matching_rate = search_matching_rate

    def validate(self):
        if self.property_tag_list:
            for k in self.property_tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.first_shot_time is not None:
            result['FirstShotTime'] = self.first_shot_time
        if self.last_shot_time is not None:
            result['LastShotTime'] = self.last_shot_time
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        result['PropertyTagList'] = []
        if self.property_tag_list is not None:
            for k in self.property_tag_list:
                result['PropertyTagList'].append(k.to_map() if k else None)
        if self.search_matching_rate is not None:
            result['SearchMatchingRate'] = self.search_matching_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('FirstShotTime') is not None:
            self.first_shot_time = m.get('FirstShotTime')
        if m.get('LastShotTime') is not None:
            self.last_shot_time = m.get('LastShotTime')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        self.property_tag_list = []
        if m.get('PropertyTagList') is not None:
            for k in m.get('PropertyTagList'):
                temp_model = GetPersonListResponseBodyDataRecordsPropertyTagList()
                self.property_tag_list.append(temp_model.from_map(k))
        if m.get('SearchMatchingRate') is not None:
            self.search_matching_rate = m.get('SearchMatchingRate')
        return self


class GetPersonListResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[GetPersonListResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = GetPersonListResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetPersonListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetPersonListResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetPersonListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetPersonListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetPersonListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPersonListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPictureUrlRequest(TeaModel):
    def __init__(
        self,
        expire_time: str = None,
        origin_url: str = None,
        protocol: str = None,
    ):
        self.expire_time = expire_time
        self.origin_url = origin_url
        self.protocol = protocol

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.origin_url is not None:
            result['OriginUrl'] = self.origin_url
        if self.protocol is not None:
            result['Protocol'] = self.protocol
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('OriginUrl') is not None:
            self.origin_url = m.get('OriginUrl')
        if m.get('Protocol') is not None:
            self.protocol = m.get('Protocol')
        return self


class GetPictureUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        url: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetPictureUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetPictureUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPictureUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProfileDetailRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        profile_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.profile_id = profile_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        return self


class GetProfileDetailResponseBodyData(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        face_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        name: str = None,
        person_id: str = None,
        phone_no: str = None,
        plate_no: str = None,
        profile_id: int = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.name = name
        self.person_id = person_id
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.profile_id = profile_id
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.name is not None:
            result['Name'] = self.name
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class GetProfileDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetProfileDetailResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetProfileDetailResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetProfileDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetProfileDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetProfileDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProfileListRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        corp_id: str = None,
        face_image_id: str = None,
        face_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        matching_rate_threshold: str = None,
        name: str = None,
        page_number: int = None,
        page_size: int = None,
        person_id_list: Dict[str, Any] = None,
        phone_no: str = None,
        plate_no: str = None,
        profile_id_list: Dict[str, Any] = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.corp_id = corp_id
        self.face_image_id = face_image_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.matching_rate_threshold = matching_rate_threshold
        self.name = name
        self.page_number = page_number
        self.page_size = page_size
        self.person_id_list = person_id_list
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.profile_id_list = profile_id_list
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_id is not None:
            result['FaceImageId'] = self.face_image_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.matching_rate_threshold is not None:
            result['MatchingRateThreshold'] = self.matching_rate_threshold
        if self.name is not None:
            result['Name'] = self.name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id_list is not None:
            result['PersonIdList'] = self.person_id_list
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.profile_id_list is not None:
            result['ProfileIdList'] = self.profile_id_list
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageId') is not None:
            self.face_image_id = m.get('FaceImageId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('MatchingRateThreshold') is not None:
            self.matching_rate_threshold = m.get('MatchingRateThreshold')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonIdList') is not None:
            self.person_id_list = m.get('PersonIdList')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('ProfileIdList') is not None:
            self.profile_id_list = m.get('ProfileIdList')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class GetProfileListShrinkRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        corp_id: str = None,
        face_image_id: str = None,
        face_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        matching_rate_threshold: str = None,
        name: str = None,
        page_number: int = None,
        page_size: int = None,
        person_id_list_shrink: str = None,
        phone_no: str = None,
        plate_no: str = None,
        profile_id_list_shrink: str = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.corp_id = corp_id
        self.face_image_id = face_image_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.matching_rate_threshold = matching_rate_threshold
        self.name = name
        self.page_number = page_number
        self.page_size = page_size
        self.person_id_list_shrink = person_id_list_shrink
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.profile_id_list_shrink = profile_id_list_shrink
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_id is not None:
            result['FaceImageId'] = self.face_image_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.matching_rate_threshold is not None:
            result['MatchingRateThreshold'] = self.matching_rate_threshold
        if self.name is not None:
            result['Name'] = self.name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id_list_shrink is not None:
            result['PersonIdList'] = self.person_id_list_shrink
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.profile_id_list_shrink is not None:
            result['ProfileIdList'] = self.profile_id_list_shrink
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageId') is not None:
            self.face_image_id = m.get('FaceImageId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('MatchingRateThreshold') is not None:
            self.matching_rate_threshold = m.get('MatchingRateThreshold')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonIdList') is not None:
            self.person_id_list_shrink = m.get('PersonIdList')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('ProfileIdList') is not None:
            self.profile_id_list_shrink = m.get('ProfileIdList')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class GetProfileListResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        face_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        name: str = None,
        person_id: str = None,
        profile_id: int = None,
        scene_type: str = None,
        search_matching_rate: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.name = name
        self.person_id = person_id
        self.profile_id = profile_id
        self.scene_type = scene_type
        self.search_matching_rate = search_matching_rate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.name is not None:
            result['Name'] = self.name
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.search_matching_rate is not None:
            result['SearchMatchingRate'] = self.search_matching_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('SearchMatchingRate') is not None:
            self.search_matching_rate = m.get('SearchMatchingRate')
        return self


class GetProfileListResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[GetProfileListResponseBodyDataRecords] = None,
        success: bool = None,
        total: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.success = success
        self.total = total

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = GetProfileListResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class GetProfileListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetProfileListResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetProfileListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetProfileListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetProfileListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetProfileListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScanSubDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class GetScanSubDevicesResponseBodyDataSubDeviceList(TeaModel):
    def __init__(
        self,
        associated_nvr: str = None,
        device_mac: str = None,
        device_model: str = None,
        device_sn: str = None,
        firmware_version: str = None,
        manufacturer: str = None,
        sub_device_ip: str = None,
        sub_device_port: str = None,
    ):
        self.associated_nvr = associated_nvr
        self.device_mac = device_mac
        self.device_model = device_model
        self.device_sn = device_sn
        self.firmware_version = firmware_version
        self.manufacturer = manufacturer
        self.sub_device_ip = sub_device_ip
        self.sub_device_port = sub_device_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.associated_nvr is not None:
            result['AssociatedNvr'] = self.associated_nvr
        if self.device_mac is not None:
            result['DeviceMac'] = self.device_mac
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.firmware_version is not None:
            result['FirmwareVersion'] = self.firmware_version
        if self.manufacturer is not None:
            result['Manufacturer'] = self.manufacturer
        if self.sub_device_ip is not None:
            result['SubDeviceIp'] = self.sub_device_ip
        if self.sub_device_port is not None:
            result['SubDevicePort'] = self.sub_device_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AssociatedNvr') is not None:
            self.associated_nvr = m.get('AssociatedNvr')
        if m.get('DeviceMac') is not None:
            self.device_mac = m.get('DeviceMac')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('FirmwareVersion') is not None:
            self.firmware_version = m.get('FirmwareVersion')
        if m.get('Manufacturer') is not None:
            self.manufacturer = m.get('Manufacturer')
        if m.get('SubDeviceIp') is not None:
            self.sub_device_ip = m.get('SubDeviceIp')
        if m.get('SubDevicePort') is not None:
            self.sub_device_port = m.get('SubDevicePort')
        return self


class GetScanSubDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        sub_device_list: List[GetScanSubDevicesResponseBodyDataSubDeviceList] = None,
    ):
        self.sub_device_list = sub_device_list

    def validate(self):
        if self.sub_device_list:
            for k in self.sub_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SubDeviceList'] = []
        if self.sub_device_list is not None:
            for k in self.sub_device_list:
                result['SubDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sub_device_list = []
        if m.get('SubDeviceList') is not None:
            for k in m.get('SubDeviceList'):
                temp_model = GetScanSubDevicesResponseBodyDataSubDeviceList()
                self.sub_device_list.append(temp_model.from_map(k))
        return self


class GetScanSubDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetScanSubDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetScanSubDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetScanSubDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetScanSubDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScanSubDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserDetailRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        need_face_detail: bool = None,
        user_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.need_face_detail = need_face_detail
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.need_face_detail is not None:
            result['NeedFaceDetail'] = self.need_face_detail
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('NeedFaceDetail') is not None:
            self.need_face_detail = m.get('NeedFaceDetail')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetUserDetailResponseBodyData(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: str = None,
        attachment: str = None,
        biz_id: str = None,
        face_image_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_id: int = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class GetUserDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetUserDetailResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetUserDetailResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetUserDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetUserDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVideoComposeResultRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        task_request_id: str = None,
    ):
        self.corp_id = corp_id
        self.task_request_id = task_request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.task_request_id is not None:
            result['TaskRequestId'] = self.task_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('TaskRequestId') is not None:
            self.task_request_id = m.get('TaskRequestId')
        return self


class GetVideoComposeResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        status: str = None,
        video_url: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.status = status
        self.video_url = video_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.video_url is not None:
            result['VideoUrl'] = self.video_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('VideoUrl') is not None:
            self.video_url = m.get('VideoUrl')
        return self


class GetVideoComposeResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetVideoComposeResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVideoComposeResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVideoSummaryTaskResultRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        task_id: str = None,
    ):
        self.corp_id = corp_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetVideoSummaryTaskResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetVideoSummaryTaskResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetVideoSummaryTaskResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVideoSummaryTaskResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvokeMotorModelRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        pic_id: str = None,
        pic_path: str = None,
        pic_url: str = None,
    ):
        self.corp_id = corp_id
        self.pic_id = pic_id
        self.pic_path = pic_path
        self.pic_url = pic_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.pic_id is not None:
            result['PicId'] = self.pic_id
        if self.pic_path is not None:
            result['PicPath'] = self.pic_path
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PicId') is not None:
            self.pic_id = m.get('PicId')
        if m.get('PicPath') is not None:
            self.pic_path = m.get('PicPath')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        return self


class InvokeMotorModelResponseBodyData(TeaModel):
    def __init__(
        self,
        struct_list: str = None,
    ):
        self.struct_list = struct_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.struct_list is not None:
            result['StructList'] = self.struct_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StructList') is not None:
            self.struct_list = m.get('StructList')
        return self


class InvokeMotorModelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: InvokeMotorModelResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = InvokeMotorModelResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class InvokeMotorModelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvokeMotorModelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvokeMotorModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAccessNumberRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
    ):
        self.corp_id_list = corp_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        return self


class ListAccessNumberResponseBodyData(TeaModel):
    def __init__(
        self,
        count: str = None,
        item: str = None,
        percent: str = None,
    ):
        self.count = count
        self.item = item
        self.percent = percent

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.item is not None:
            result['Item'] = self.item
        if self.percent is not None:
            result['Percent'] = self.percent
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        return self


class ListAccessNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListAccessNumberResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListAccessNumberResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListAccessNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAccessNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAccessNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAlgorithmNamesByDeviceIdsRequest(TeaModel):
    def __init__(
        self,
        gb_ids: str = None,
    ):
        # 设备ID集合，多个的话以逗号分隔，最大支持200个
        self.gb_ids = gb_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gb_ids is not None:
            result['GbIds'] = self.gb_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GbIds') is not None:
            self.gb_ids = m.get('GbIds')
        return self


class ListAlgorithmNamesByDeviceIdsResponseBodyData(TeaModel):
    def __init__(
        self,
        algorithm_names: List[str] = None,
        gb_id: str = None,
    ):
        # 设备ID对应呗计算的算法名称集合
        self.algorithm_names = algorithm_names
        # 设备ID
        self.gb_id = gb_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_names is not None:
            result['AlgorithmNames'] = self.algorithm_names
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmNames') is not None:
            self.algorithm_names = m.get('AlgorithmNames')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        return self


class ListAlgorithmNamesByDeviceIdsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListAlgorithmNamesByDeviceIdsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # 返回结果编码  200：获取成功  Failed：获取失败  Retry：按需拉流模式，正在建立取流连接，请稍后重试
        self.code = code
        self.data = data
        # 返回结果消息
        self.message = message
        # 请求ID
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListAlgorithmNamesByDeviceIdsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAlgorithmNamesByDeviceIdsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAlgorithmNamesByDeviceIdsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAlgorithmNamesByDeviceIdsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBodyAlgorithmResultsRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        cap_style: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.cap_style = cap_style
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.cap_style is not None:
            result['CapStyle'] = self.cap_style
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('CapStyle') is not None:
            self.cap_style = m.get('CapStyle')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListBodyAlgorithmResultsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        cap_style: str = None,
        coat_color: str = None,
        coat_length: str = None,
        coat_style: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        gender_code: str = None,
        hair_style: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        max_age: str = None,
        min_age: str = None,
        person_id: str = None,
        pic_url_path: str = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        shot_time: str = None,
        source_id: str = None,
        target_pic_url_path: str = None,
        trousers_color: str = None,
        trousers_length: str = None,
        trousers_style: str = None,
    ):
        self.cap_style = cap_style
        self.coat_color = coat_color
        self.coat_length = coat_length
        self.coat_style = coat_style
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.gender_code = gender_code
        self.hair_style = hair_style
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.max_age = max_age
        self.min_age = min_age
        self.person_id = person_id
        self.pic_url_path = pic_url_path
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.shot_time = shot_time
        self.source_id = source_id
        self.target_pic_url_path = target_pic_url_path
        self.trousers_color = trousers_color
        self.trousers_length = trousers_length
        self.trousers_style = trousers_style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cap_style is not None:
            result['CapStyle'] = self.cap_style
        if self.coat_color is not None:
            result['CoatColor'] = self.coat_color
        if self.coat_length is not None:
            result['CoatLength'] = self.coat_length
        if self.coat_style is not None:
            result['CoatStyle'] = self.coat_style
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.gender_code is not None:
            result['GenderCode'] = self.gender_code
        if self.hair_style is not None:
            result['HairStyle'] = self.hair_style
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.max_age is not None:
            result['MaxAge'] = self.max_age
        if self.min_age is not None:
            result['MinAge'] = self.min_age
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        if self.trousers_color is not None:
            result['TrousersColor'] = self.trousers_color
        if self.trousers_length is not None:
            result['TrousersLength'] = self.trousers_length
        if self.trousers_style is not None:
            result['TrousersStyle'] = self.trousers_style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapStyle') is not None:
            self.cap_style = m.get('CapStyle')
        if m.get('CoatColor') is not None:
            self.coat_color = m.get('CoatColor')
        if m.get('CoatLength') is not None:
            self.coat_length = m.get('CoatLength')
        if m.get('CoatStyle') is not None:
            self.coat_style = m.get('CoatStyle')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('GenderCode') is not None:
            self.gender_code = m.get('GenderCode')
        if m.get('HairStyle') is not None:
            self.hair_style = m.get('HairStyle')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('MaxAge') is not None:
            self.max_age = m.get('MaxAge')
        if m.get('MinAge') is not None:
            self.min_age = m.get('MinAge')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        if m.get('TrousersColor') is not None:
            self.trousers_color = m.get('TrousersColor')
        if m.get('TrousersLength') is not None:
            self.trousers_length = m.get('TrousersLength')
        if m.get('TrousersStyle') is not None:
            self.trousers_style = m.get('TrousersStyle')
        return self


class ListBodyAlgorithmResultsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListBodyAlgorithmResultsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListBodyAlgorithmResultsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListBodyAlgorithmResultsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListBodyAlgorithmResultsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListBodyAlgorithmResultsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListBodyAlgorithmResultsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListBodyAlgorithmResultsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListBodyAlgorithmResultsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCorpGroupMetricsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_group: str = None,
        device_id: str = None,
        end_time: str = None,
        group_id: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
        tag_code: str = None,
        user_group: str = None,
    ):
        self.corp_id = corp_id
        self.device_group = device_group
        self.device_id = device_id
        self.end_time = end_time
        self.group_id = group_id
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time
        self.tag_code = tag_code
        self.user_group = user_group

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_group is not None:
            result['DeviceGroup'] = self.device_group
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.user_group is not None:
            result['UserGroup'] = self.user_group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceGroup') is not None:
            self.device_group = m.get('DeviceGroup')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('UserGroup') is not None:
            self.user_group = m.get('UserGroup')
        return self


class ListCorpGroupMetricsResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_group_id: str = None,
        corp_id: str = None,
        date_id: str = None,
        device_group_id: str = None,
        device_id: str = None,
        person_id: str = None,
        tag_code: str = None,
        tag_metrics: str = None,
        tag_value: str = None,
        user_group_id: str = None,
    ):
        self.corp_group_id = corp_group_id
        self.corp_id = corp_id
        self.date_id = date_id
        self.device_group_id = device_group_id
        self.device_id = device_id
        self.person_id = person_id
        self.tag_code = tag_code
        self.tag_metrics = tag_metrics
        self.tag_value = tag_value
        self.user_group_id = user_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_group_id is not None:
            result['CorpGroupId'] = self.corp_group_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.date_id is not None:
            result['DateId'] = self.date_id
        if self.device_group_id is not None:
            result['DeviceGroupId'] = self.device_group_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.person_id is not None:
            result['PersonID'] = self.person_id
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_metrics is not None:
            result['TagMetrics'] = self.tag_metrics
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpGroupId') is not None:
            self.corp_group_id = m.get('CorpGroupId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DateId') is not None:
            self.date_id = m.get('DateId')
        if m.get('DeviceGroupId') is not None:
            self.device_group_id = m.get('DeviceGroupId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('PersonID') is not None:
            self.person_id = m.get('PersonID')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagMetrics') is not None:
            self.tag_metrics = m.get('TagMetrics')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        return self


class ListCorpGroupMetricsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListCorpGroupMetricsResponseBodyData] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: str = None,
        total_count: int = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListCorpGroupMetricsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListCorpGroupMetricsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListCorpGroupMetricsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCorpGroupMetricsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCorpGroupsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.corp_id = corp_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListCorpGroupsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[str] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.records is not None:
            result['Records'] = self.records
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Records') is not None:
            self.records = m.get('Records')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListCorpGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListCorpGroupsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListCorpGroupsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListCorpGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListCorpGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCorpGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCorpMetricsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_group_list: str = None,
        device_id_list: str = None,
        end_time: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
        tag_code: str = None,
        user_group_list: str = None,
    ):
        self.corp_id = corp_id
        self.device_group_list = device_group_list
        self.device_id_list = device_id_list
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time
        self.tag_code = tag_code
        self.user_group_list = user_group_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_group_list is not None:
            result['DeviceGroupList'] = self.device_group_list
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.user_group_list is not None:
            result['UserGroupList'] = self.user_group_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceGroupList') is not None:
            self.device_group_list = m.get('DeviceGroupList')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('UserGroupList') is not None:
            self.user_group_list = m.get('UserGroupList')
        return self


class ListCorpMetricsResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        date_id: str = None,
        device_group_id: str = None,
        device_id: str = None,
        person_id: str = None,
        tag_code: str = None,
        tag_metrics: str = None,
        tag_value: str = None,
        user_group_id: str = None,
    ):
        self.corp_id = corp_id
        self.date_id = date_id
        self.device_group_id = device_group_id
        self.device_id = device_id
        self.person_id = person_id
        self.tag_code = tag_code
        self.tag_metrics = tag_metrics
        self.tag_value = tag_value
        self.user_group_id = user_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.date_id is not None:
            result['DateId'] = self.date_id
        if self.device_group_id is not None:
            result['DeviceGroupId'] = self.device_group_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_metrics is not None:
            result['TagMetrics'] = self.tag_metrics
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DateId') is not None:
            self.date_id = m.get('DateId')
        if m.get('DeviceGroupId') is not None:
            self.device_group_id = m.get('DeviceGroupId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagMetrics') is not None:
            self.tag_metrics = m.get('TagMetrics')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        return self


class ListCorpMetricsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListCorpMetricsResponseBodyData] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: str = None,
        total_count: int = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListCorpMetricsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListCorpMetricsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListCorpMetricsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCorpMetricsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCorpsRequest(TeaModel):
    def __init__(
        self,
        corp_name: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.corp_name = corp_name
        # 页码
        self.page_number = page_number
        # 分页大小
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_name is not None:
            result['CorpName'] = self.corp_name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpName') is not None:
            self.corp_name = m.get('CorpName')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListCorpsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        app_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        create_date: str = None,
        description: str = None,
        device_count: int = None,
        icon_path: str = None,
        isv_sub_id: str = None,
        parent_corp_id: str = None,
        yoffline_acu_used: float = None,
    ):
        self.acu_used = acu_used
        self.app_name = app_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.create_date = create_date
        self.description = description
        self.device_count = device_count
        self.icon_path = icon_path
        self.isv_sub_id = isv_sub_id
        self.parent_corp_id = parent_corp_id
        self.yoffline_acu_used = yoffline_acu_used

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.corp_name is not None:
            result['CorpName'] = self.corp_name
        if self.create_date is not None:
            result['CreateDate'] = self.create_date
        if self.description is not None:
            result['Description'] = self.description
        if self.device_count is not None:
            result['DeviceCount'] = self.device_count
        if self.icon_path is not None:
            result['IconPath'] = self.icon_path
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_corp_id is not None:
            result['ParentCorpId'] = self.parent_corp_id
        if self.yoffline_acu_used is not None:
            result['YOfflineAcuUsed'] = self.yoffline_acu_used
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CorpName') is not None:
            self.corp_name = m.get('CorpName')
        if m.get('CreateDate') is not None:
            self.create_date = m.get('CreateDate')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceCount') is not None:
            self.device_count = m.get('DeviceCount')
        if m.get('IconPath') is not None:
            self.icon_path = m.get('IconPath')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCorpId') is not None:
            self.parent_corp_id = m.get('ParentCorpId')
        if m.get('YOfflineAcuUsed') is not None:
            self.yoffline_acu_used = m.get('YOfflineAcuUsed')
        return self


class ListCorpsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListCorpsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListCorpsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListCorpsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListCorpsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListCorpsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListCorpsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListCorpsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCorpsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDeviceGroupsRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        data_source_type: str = None,
        device_code_list: str = None,
        group: str = None,
        is_page: int = None,
        name: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.data_source_type = data_source_type
        self.device_code_list = device_code_list
        self.group = group
        self.is_page = is_page
        self.name = name
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.device_code_list is not None:
            result['DeviceCodeList'] = self.device_code_list
        if self.group is not None:
            result['Group'] = self.group
        if self.is_page is not None:
            result['IsPage'] = self.is_page
        if self.name is not None:
            result['Name'] = self.name
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('DeviceCodeList') is not None:
            self.device_code_list = m.get('DeviceCodeList')
        if m.get('Group') is not None:
            self.group = m.get('Group')
        if m.get('IsPage') is not None:
            self.is_page = m.get('IsPage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListDeviceGroupsResponseBodyDataList(TeaModel):
    def __init__(
        self,
        bit_rate: str = None,
        coding_format: str = None,
        data_source_type: str = None,
        device_code: str = None,
        device_compute_status: str = None,
        device_group: str = None,
        device_name: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_stream_status: str = None,
        install_address: str = None,
        region_id: str = None,
        region_name: str = None,
        resolving_power: str = None,
        type: str = None,
    ):
        self.bit_rate = bit_rate
        self.coding_format = coding_format
        self.data_source_type = data_source_type
        self.device_code = device_code
        self.device_compute_status = device_compute_status
        self.device_group = device_group
        self.device_name = device_name
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_stream_status = device_stream_status
        self.install_address = install_address
        self.region_id = region_id
        self.region_name = region_name
        self.resolving_power = resolving_power
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        if self.coding_format is not None:
            result['CodingFormat'] = self.coding_format
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_compute_status is not None:
            result['DeviceComputeStatus'] = self.device_compute_status
        if self.device_group is not None:
            result['DeviceGroup'] = self.device_group
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_stream_status is not None:
            result['DeviceStreamStatus'] = self.device_stream_status
        if self.install_address is not None:
            result['InstallAddress'] = self.install_address
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.region_name is not None:
            result['RegionName'] = self.region_name
        if self.resolving_power is not None:
            result['ResolvingPower'] = self.resolving_power
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        if m.get('CodingFormat') is not None:
            self.coding_format = m.get('CodingFormat')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceComputeStatus') is not None:
            self.device_compute_status = m.get('DeviceComputeStatus')
        if m.get('DeviceGroup') is not None:
            self.device_group = m.get('DeviceGroup')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceStreamStatus') is not None:
            self.device_stream_status = m.get('DeviceStreamStatus')
        if m.get('InstallAddress') is not None:
            self.install_address = m.get('InstallAddress')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RegionName') is not None:
            self.region_name = m.get('RegionName')
        if m.get('ResolvingPower') is not None:
            self.resolving_power = m.get('ResolvingPower')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListDeviceGroupsResponseBodyData(TeaModel):
    def __init__(
        self,
        list: List[ListDeviceGroupsResponseBodyDataList] = None,
        total_count: str = None,
    ):
        self.list = list
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListDeviceGroupsResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDeviceGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListDeviceGroupsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDeviceGroupsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListDeviceGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListDeviceGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDeviceGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_name: str = None,
        gb_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.corp_id = corp_id
        self.device_name = device_name
        self.gb_id = gb_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListDevicesResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        access_protocol_type: str = None,
        bit_rate: str = None,
        cover_image_url: str = None,
        create_time: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_name: str = None,
        device_site: str = None,
        device_type: str = None,
        gb_id: str = None,
        latitude: str = None,
        longitude: str = None,
        resolution: str = None,
        sip_gbid: str = None,
        sip_password: str = None,
        sip_server_ip: str = None,
        sip_server_port: str = None,
        status: int = None,
        vendor: str = None,
    ):
        self.access_protocol_type = access_protocol_type
        self.bit_rate = bit_rate
        self.cover_image_url = cover_image_url
        self.create_time = create_time
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_name = device_name
        self.device_site = device_site
        self.device_type = device_type
        self.gb_id = gb_id
        self.latitude = latitude
        self.longitude = longitude
        self.resolution = resolution
        self.sip_gbid = sip_gbid
        self.sip_password = sip_password
        self.sip_server_ip = sip_server_ip
        self.sip_server_port = sip_server_port
        self.status = status
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_protocol_type is not None:
            result['AccessProtocolType'] = self.access_protocol_type
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        if self.cover_image_url is not None:
            result['CoverImageUrl'] = self.cover_image_url
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.resolution is not None:
            result['Resolution'] = self.resolution
        if self.sip_gbid is not None:
            result['SipGBId'] = self.sip_gbid
        if self.sip_password is not None:
            result['SipPassword'] = self.sip_password
        if self.sip_server_ip is not None:
            result['SipServerIp'] = self.sip_server_ip
        if self.sip_server_port is not None:
            result['SipServerPort'] = self.sip_server_port
        if self.status is not None:
            result['Status'] = self.status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessProtocolType') is not None:
            self.access_protocol_type = m.get('AccessProtocolType')
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        if m.get('CoverImageUrl') is not None:
            self.cover_image_url = m.get('CoverImageUrl')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Resolution') is not None:
            self.resolution = m.get('Resolution')
        if m.get('SipGBId') is not None:
            self.sip_gbid = m.get('SipGBId')
        if m.get('SipPassword') is not None:
            self.sip_password = m.get('SipPassword')
        if m.get('SipServerIp') is not None:
            self.sip_server_ip = m.get('SipServerIp')
        if m.get('SipServerPort') is not None:
            self.sip_server_port = m.get('SipServerPort')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListDevicesResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListDevicesResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventAlgorithmDetailsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        event_type: str = None,
        event_value: str = None,
        extend_value: str = None,
        page_number: int = None,
        page_size: int = None,
        record_id: str = None,
        source_id: str = None,
        start_time: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.event_type = event_type
        self.event_value = event_value
        self.extend_value = extend_value
        self.page_number = page_number
        self.page_size = page_size
        self.record_id = record_id
        self.source_id = source_id
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.event_value is not None:
            result['EventValue'] = self.event_value
        if self.extend_value is not None:
            result['ExtendValue'] = self.extend_value
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.record_id is not None:
            result['RecordId'] = self.record_id
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('EventValue') is not None:
            self.event_value = m.get('EventValue')
        if m.get('ExtendValue') is not None:
            self.extend_value = m.get('ExtendValue')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RecordId') is not None:
            self.record_id = m.get('RecordId')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListEventAlgorithmDetailsResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        event_type: str = None,
        event_value: str = None,
        extend_value: str = None,
        extra_extend_value: str = None,
        face_count: str = None,
        left_top_x: str = None,
        left_top_y: str = None,
        pic_url_path: str = None,
        point_x: str = None,
        point_y: str = None,
        record_id: str = None,
        right_bottom_x: str = None,
        right_bottom_y: str = None,
        shot_time: str = None,
        source_id: str = None,
        tag_code: str = None,
        tag_code_reliability: str = None,
        target_pic_url_path: str = None,
        uuid_code: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.event_type = event_type
        self.event_value = event_value
        self.extend_value = extend_value
        self.extra_extend_value = extra_extend_value
        self.face_count = face_count
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.pic_url_path = pic_url_path
        self.point_x = point_x
        self.point_y = point_y
        self.record_id = record_id
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.shot_time = shot_time
        self.source_id = source_id
        self.tag_code = tag_code
        self.tag_code_reliability = tag_code_reliability
        self.target_pic_url_path = target_pic_url_path
        self.uuid_code = uuid_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.event_value is not None:
            result['EventValue'] = self.event_value
        if self.extend_value is not None:
            result['ExtendValue'] = self.extend_value
        if self.extra_extend_value is not None:
            result['ExtraExtendValue'] = self.extra_extend_value
        if self.face_count is not None:
            result['FaceCount'] = self.face_count
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.point_x is not None:
            result['PointX'] = self.point_x
        if self.point_y is not None:
            result['PointY'] = self.point_y
        if self.record_id is not None:
            result['RecordId'] = self.record_id
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_code_reliability is not None:
            result['TagCodeReliability'] = self.tag_code_reliability
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        if self.uuid_code is not None:
            result['UuidCode'] = self.uuid_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('EventValue') is not None:
            self.event_value = m.get('EventValue')
        if m.get('ExtendValue') is not None:
            self.extend_value = m.get('ExtendValue')
        if m.get('ExtraExtendValue') is not None:
            self.extra_extend_value = m.get('ExtraExtendValue')
        if m.get('FaceCount') is not None:
            self.face_count = m.get('FaceCount')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('PointX') is not None:
            self.point_x = m.get('PointX')
        if m.get('PointY') is not None:
            self.point_y = m.get('PointY')
        if m.get('RecordId') is not None:
            self.record_id = m.get('RecordId')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagCodeReliability') is not None:
            self.tag_code_reliability = m.get('TagCodeReliability')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        if m.get('UuidCode') is not None:
            self.uuid_code = m.get('UuidCode')
        return self


class ListEventAlgorithmDetailsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListEventAlgorithmDetailsResponseBodyData] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: str = None,
        total_count: int = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListEventAlgorithmDetailsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListEventAlgorithmDetailsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListEventAlgorithmDetailsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventAlgorithmDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventAlgorithmResultsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        event_type: str = None,
        extend_value: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.event_type = event_type
        self.extend_value = extend_value
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.extend_value is not None:
            result['ExtendValue'] = self.extend_value
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('ExtendValue') is not None:
            self.extend_value = m.get('ExtendValue')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListEventAlgorithmResultsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        cap_style: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        event_type: str = None,
        extend_value: str = None,
        extend_value_three: str = None,
        extend_value_two: str = None,
        face_count: str = None,
        pic_url_path: str = None,
        record_id: str = None,
        shot_time: str = None,
        tag_code: str = None,
        tag_code_reliability: str = None,
        target_pic_url_path: str = None,
        uuid_code: str = None,
    ):
        self.cap_style = cap_style
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.event_type = event_type
        self.extend_value = extend_value
        self.extend_value_three = extend_value_three
        self.extend_value_two = extend_value_two
        self.face_count = face_count
        self.pic_url_path = pic_url_path
        self.record_id = record_id
        self.shot_time = shot_time
        self.tag_code = tag_code
        self.tag_code_reliability = tag_code_reliability
        self.target_pic_url_path = target_pic_url_path
        self.uuid_code = uuid_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cap_style is not None:
            result['CapStyle'] = self.cap_style
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.extend_value is not None:
            result['ExtendValue'] = self.extend_value
        if self.extend_value_three is not None:
            result['ExtendValueThree'] = self.extend_value_three
        if self.extend_value_two is not None:
            result['ExtendValueTwo'] = self.extend_value_two
        if self.face_count is not None:
            result['FaceCount'] = self.face_count
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.record_id is not None:
            result['RecordId'] = self.record_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_code_reliability is not None:
            result['TagCodeReliability'] = self.tag_code_reliability
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        if self.uuid_code is not None:
            result['UuidCode'] = self.uuid_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapStyle') is not None:
            self.cap_style = m.get('CapStyle')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('ExtendValue') is not None:
            self.extend_value = m.get('ExtendValue')
        if m.get('ExtendValueThree') is not None:
            self.extend_value_three = m.get('ExtendValueThree')
        if m.get('ExtendValueTwo') is not None:
            self.extend_value_two = m.get('ExtendValueTwo')
        if m.get('FaceCount') is not None:
            self.face_count = m.get('FaceCount')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('RecordId') is not None:
            self.record_id = m.get('RecordId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagCodeReliability') is not None:
            self.tag_code_reliability = m.get('TagCodeReliability')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        if m.get('UuidCode') is not None:
            self.uuid_code = m.get('UuidCode')
        return self


class ListEventAlgorithmResultsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListEventAlgorithmResultsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListEventAlgorithmResultsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListEventAlgorithmResultsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListEventAlgorithmResultsResponseBodyData = None,
        extend_value: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.extend_value = extend_value
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.extend_value is not None:
            result['ExtendValue'] = self.extend_value
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListEventAlgorithmResultsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('ExtendValue') is not None:
            self.extend_value = m.get('ExtendValue')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListEventAlgorithmResultsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListEventAlgorithmResultsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventAlgorithmResultsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListFaceAlgorithmResultsRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListFaceAlgorithmResultsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        cap_style: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        face_id: str = None,
        gender_code: str = None,
        hair_style: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        max_age: str = None,
        min_age: str = None,
        pic_url_path: str = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        shot_time: str = None,
        source_id: str = None,
        target_pic_url_path: str = None,
    ):
        self.cap_style = cap_style
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.face_id = face_id
        self.gender_code = gender_code
        self.hair_style = hair_style
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.max_age = max_age
        self.min_age = min_age
        self.pic_url_path = pic_url_path
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.shot_time = shot_time
        self.source_id = source_id
        self.target_pic_url_path = target_pic_url_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cap_style is not None:
            result['CapStyle'] = self.cap_style
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.face_id is not None:
            result['FaceId'] = self.face_id
        if self.gender_code is not None:
            result['GenderCode'] = self.gender_code
        if self.hair_style is not None:
            result['HairStyle'] = self.hair_style
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.max_age is not None:
            result['MaxAge'] = self.max_age
        if self.min_age is not None:
            result['MinAge'] = self.min_age
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapStyle') is not None:
            self.cap_style = m.get('CapStyle')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('FaceId') is not None:
            self.face_id = m.get('FaceId')
        if m.get('GenderCode') is not None:
            self.gender_code = m.get('GenderCode')
        if m.get('HairStyle') is not None:
            self.hair_style = m.get('HairStyle')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('MaxAge') is not None:
            self.max_age = m.get('MaxAge')
        if m.get('MinAge') is not None:
            self.min_age = m.get('MinAge')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        return self


class ListFaceAlgorithmResultsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListFaceAlgorithmResultsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListFaceAlgorithmResultsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListFaceAlgorithmResultsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListFaceAlgorithmResultsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListFaceAlgorithmResultsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListFaceAlgorithmResultsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListFaceAlgorithmResultsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListFaceAlgorithmResultsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesRequest(TeaModel):
    def __init__(
        self,
        current_page: int = None,
        instance_name: str = None,
        page_size: int = None,
        project_id: str = None,
    ):
        self.current_page = current_page
        self.instance_name = instance_name
        self.page_size = page_size
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class ListInstancesResponseBodyDataItemsAlgorithms(TeaModel):
    def __init__(
        self,
        algorithm_id: str = None,
        algorithm_name: str = None,
    ):
        self.algorithm_id = algorithm_id
        self.algorithm_name = algorithm_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_name is not None:
            result['AlgorithmName'] = self.algorithm_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmName') is not None:
            self.algorithm_name = m.get('AlgorithmName')
        return self


class ListInstancesResponseBodyDataItems(TeaModel):
    def __init__(
        self,
        acu_used: int = None,
        algorithms: List[ListInstancesResponseBodyDataItemsAlgorithms] = None,
        create_time: int = None,
        device_number: int = None,
        instance_id: str = None,
        instance_name: str = None,
        status: str = None,
    ):
        self.acu_used = acu_used
        self.algorithms = algorithms
        self.create_time = create_time
        self.device_number = device_number
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.status = status

    def validate(self):
        if self.algorithms:
            for k in self.algorithms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acu_used is not None:
            result['AcuUsed'] = self.acu_used
        result['Algorithms'] = []
        if self.algorithms is not None:
            for k in self.algorithms:
                result['Algorithms'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcuUsed') is not None:
            self.acu_used = m.get('AcuUsed')
        self.algorithms = []
        if m.get('Algorithms') is not None:
            for k in m.get('Algorithms'):
                temp_model = ListInstancesResponseBodyDataItemsAlgorithms()
                self.algorithms.append(temp_model.from_map(k))
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListInstancesResponseBodyData(TeaModel):
    def __init__(
        self,
        current_page: int = None,
        items: List[ListInstancesResponseBodyDataItems] = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.current_page = current_page
        self.items = items
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        result['Items'] = []
        if self.items is not None:
            for k in self.items:
                result['Items'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        self.items = []
        if m.get('Items') is not None:
            for k in m.get('Items'):
                temp_model = ListInstancesResponseBodyDataItems()
                self.items.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListInstancesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListInstancesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMetricsRequest(TeaModel):
    def __init__(
        self,
        aggregate_type: str = None,
        corp_id: str = None,
        end_time: str = None,
        page_number: str = None,
        page_size: str = None,
        start_time: str = None,
        tag_code: str = None,
    ):
        self.aggregate_type = aggregate_type
        self.corp_id = corp_id
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time
        self.tag_code = tag_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_type is not None:
            result['AggregateType'] = self.aggregate_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AggregateType') is not None:
            self.aggregate_type = m.get('AggregateType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        return self


class ListMetricsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        date_time: str = None,
        tag_code: str = None,
        tag_metric: str = None,
        tag_value: str = None,
    ):
        self.date_time = date_time
        self.tag_code = tag_code
        self.tag_metric = tag_metric
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_metric is not None:
            result['TagMetric'] = self.tag_metric
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagMetric') is not None:
            self.tag_metric = m.get('TagMetric')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListMetricsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListMetricsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListMetricsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListMetricsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListMetricsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListMetricsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListMetricsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListMetricsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMetricsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMotorAlgorithmResultsRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        page_number: str = None,
        page_size: str = None,
        plate_number: str = None,
        start_time: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.plate_number = plate_number
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.plate_number is not None:
            result['PlateNumber'] = self.plate_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PlateNumber') is not None:
            self.plate_number = m.get('PlateNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListMotorAlgorithmResultsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        calling: str = None,
        corp_id: str = None,
        data_source_id: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        motor_brand: str = None,
        motor_class: str = None,
        motor_color: str = None,
        motor_id: str = None,
        motor_model: str = None,
        motor_style: str = None,
        pic_url_path: str = None,
        plate_class: str = None,
        plate_color: str = None,
        plate_number: str = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        safety_belt: str = None,
        shot_time: str = None,
        source_id: str = None,
        target_pic_url_path: str = None,
    ):
        self.calling = calling
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.motor_brand = motor_brand
        self.motor_class = motor_class
        self.motor_color = motor_color
        self.motor_id = motor_id
        self.motor_model = motor_model
        self.motor_style = motor_style
        self.pic_url_path = pic_url_path
        self.plate_class = plate_class
        self.plate_color = plate_color
        self.plate_number = plate_number
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.safety_belt = safety_belt
        self.shot_time = shot_time
        self.source_id = source_id
        self.target_pic_url_path = target_pic_url_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling is not None:
            result['Calling'] = self.calling
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.motor_brand is not None:
            result['MotorBrand'] = self.motor_brand
        if self.motor_class is not None:
            result['MotorClass'] = self.motor_class
        if self.motor_color is not None:
            result['MotorColor'] = self.motor_color
        if self.motor_id is not None:
            result['MotorId'] = self.motor_id
        if self.motor_model is not None:
            result['MotorModel'] = self.motor_model
        if self.motor_style is not None:
            result['MotorStyle'] = self.motor_style
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.plate_class is not None:
            result['PlateClass'] = self.plate_class
        if self.plate_color is not None:
            result['PlateColor'] = self.plate_color
        if self.plate_number is not None:
            result['PlateNumber'] = self.plate_number
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.safety_belt is not None:
            result['SafetyBelt'] = self.safety_belt
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Calling') is not None:
            self.calling = m.get('Calling')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('MotorBrand') is not None:
            self.motor_brand = m.get('MotorBrand')
        if m.get('MotorClass') is not None:
            self.motor_class = m.get('MotorClass')
        if m.get('MotorColor') is not None:
            self.motor_color = m.get('MotorColor')
        if m.get('MotorId') is not None:
            self.motor_id = m.get('MotorId')
        if m.get('MotorModel') is not None:
            self.motor_model = m.get('MotorModel')
        if m.get('MotorStyle') is not None:
            self.motor_style = m.get('MotorStyle')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('PlateClass') is not None:
            self.plate_class = m.get('PlateClass')
        if m.get('PlateColor') is not None:
            self.plate_color = m.get('PlateColor')
        if m.get('PlateNumber') is not None:
            self.plate_number = m.get('PlateNumber')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('SafetyBelt') is not None:
            self.safety_belt = m.get('SafetyBelt')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        return self


class ListMotorAlgorithmResultsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListMotorAlgorithmResultsResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListMotorAlgorithmResultsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListMotorAlgorithmResultsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListMotorAlgorithmResultsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListMotorAlgorithmResultsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListMotorAlgorithmResultsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListMotorAlgorithmResultsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMotorAlgorithmResultsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNVRChannelDeviceRequest(TeaModel):
    def __init__(
        self,
        device_code: str = None,
        is_page: str = None,
        page_num: str = None,
        page_size: str = None,
    ):
        self.device_code = device_code
        self.is_page = is_page
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.is_page is not None:
            result['IsPage'] = self.is_page
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('IsPage') is not None:
            self.is_page = m.get('IsPage')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListNVRChannelDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        compture_status: str = None,
        corp_id: str = None,
        datasource_type: str = None,
        device_code: str = None,
        device_name: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_type: str = None,
        project_name: str = None,
        region_name: str = None,
        sample_name: str = None,
        stream_status: str = None,
        vap: str = None,
    ):
        self.compture_status = compture_status
        self.corp_id = corp_id
        self.datasource_type = datasource_type
        self.device_code = device_code
        self.device_name = device_name
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_type = device_type
        self.project_name = project_name
        self.region_name = region_name
        self.sample_name = sample_name
        self.stream_status = stream_status
        self.vap = vap

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.compture_status is not None:
            result['ComptureStatus'] = self.compture_status
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.region_name is not None:
            result['RegionName'] = self.region_name
        if self.sample_name is not None:
            result['SampleName'] = self.sample_name
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        if self.vap is not None:
            result['Vap'] = self.vap
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ComptureStatus') is not None:
            self.compture_status = m.get('ComptureStatus')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('RegionName') is not None:
            self.region_name = m.get('RegionName')
        if m.get('SampleName') is not None:
            self.sample_name = m.get('SampleName')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        if m.get('Vap') is not None:
            self.vap = m.get('Vap')
        return self


class ListNVRChannelDeviceResponseBody(TeaModel):
    def __init__(
        self,
        data: List[ListNVRChannelDeviceResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        total: str = None,
    ):
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListNVRChannelDeviceResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class ListNVRChannelDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListNVRChannelDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNVRChannelDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNVRDeviceRequest(TeaModel):
    def __init__(
        self,
        corp_id_list: str = None,
        device_code: str = None,
        is_page: int = None,
        page_num: int = None,
        page_size: int = None,
    ):
        self.corp_id_list = corp_id_list
        self.device_code = device_code
        self.is_page = is_page
        self.page_num = page_num
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id_list is not None:
            result['CorpIdList'] = self.corp_id_list
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.is_page is not None:
            result['IsPage'] = self.is_page
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpIdList') is not None:
            self.corp_id_list = m.get('CorpIdList')
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('IsPage') is not None:
            self.is_page = m.get('IsPage')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListNVRDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        access_quota: str = None,
        channel: str = None,
        compture_status: str = None,
        corp_id: str = None,
        datasource_type: str = None,
        device_code: str = None,
        device_name: str = None,
        device_sn: str = None,
        device_status: str = None,
        device_type: str = None,
        project_name: str = None,
        region_name: str = None,
        registration_time: str = None,
        stream_status: str = None,
        type: str = None,
    ):
        self.access_quota = access_quota
        self.channel = channel
        self.compture_status = compture_status
        self.corp_id = corp_id
        self.datasource_type = datasource_type
        self.device_code = device_code
        self.device_name = device_name
        self.device_sn = device_sn
        self.device_status = device_status
        self.device_type = device_type
        self.project_name = project_name
        self.region_name = region_name
        self.registration_time = registration_time
        self.stream_status = stream_status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_quota is not None:
            result['AccessQuota'] = self.access_quota
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.compture_status is not None:
            result['ComptureStatus'] = self.compture_status
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.datasource_type is not None:
            result['DatasourceType'] = self.datasource_type
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_status is not None:
            result['DeviceStatus'] = self.device_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.region_name is not None:
            result['RegionName'] = self.region_name
        if self.registration_time is not None:
            result['RegistrationTime'] = self.registration_time
        if self.stream_status is not None:
            result['StreamStatus'] = self.stream_status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessQuota') is not None:
            self.access_quota = m.get('AccessQuota')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ComptureStatus') is not None:
            self.compture_status = m.get('ComptureStatus')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DatasourceType') is not None:
            self.datasource_type = m.get('DatasourceType')
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceStatus') is not None:
            self.device_status = m.get('DeviceStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('RegionName') is not None:
            self.region_name = m.get('RegionName')
        if m.get('RegistrationTime') is not None:
            self.registration_time = m.get('RegistrationTime')
        if m.get('StreamStatus') is not None:
            self.stream_status = m.get('StreamStatus')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListNVRDeviceResponseBody(TeaModel):
    def __init__(
        self,
        data: List[ListNVRDeviceResponseBodyData] = None,
        request_id: str = None,
        success: bool = None,
        total: str = None,
    ):
        self.data = data
        # Id of the request
        self.request_id = request_id
        self.success = success
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListNVRDeviceResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class ListNVRDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListNVRDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNVRDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPersonTraceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        group_id: str = None,
        page_number: str = None,
        page_size: str = None,
        person_id: str = None,
        start_time: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.group_id = group_id
        self.page_number = page_number
        self.page_size = page_size
        self.person_id = person_id
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListPersonTraceResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        date: str = None,
        device_id: str = None,
        end_source_image: str = None,
        end_target_image: str = None,
        group_id: str = None,
        last_time: str = None,
        person_id: str = None,
        start_source_image: str = None,
        start_target_image: str = None,
        start_time: str = None,
    ):
        self.corp_id = corp_id
        self.date = date
        self.device_id = device_id
        self.end_source_image = end_source_image
        self.end_target_image = end_target_image
        self.group_id = group_id
        self.last_time = last_time
        self.person_id = person_id
        self.start_source_image = start_source_image
        self.start_target_image = start_target_image
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.date is not None:
            result['Date'] = self.date
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end_source_image is not None:
            result['EndSourceImage'] = self.end_source_image
        if self.end_target_image is not None:
            result['EndTargetImage'] = self.end_target_image
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.last_time is not None:
            result['LastTime'] = self.last_time
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.start_source_image is not None:
            result['StartSourceImage'] = self.start_source_image
        if self.start_target_image is not None:
            result['StartTargetImage'] = self.start_target_image
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EndSourceImage') is not None:
            self.end_source_image = m.get('EndSourceImage')
        if m.get('EndTargetImage') is not None:
            self.end_target_image = m.get('EndTargetImage')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('LastTime') is not None:
            self.last_time = m.get('LastTime')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('StartSourceImage') is not None:
            self.start_source_image = m.get('StartSourceImage')
        if m.get('StartTargetImage') is not None:
            self.start_target_image = m.get('StartTargetImage')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListPersonTraceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListPersonTraceResponseBodyData] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: str = None,
        total_count: int = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListPersonTraceResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPersonTraceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListPersonTraceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPersonTraceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPersonTraceDetailsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
        person_id: str = None,
        start_time: str = None,
        sub_id: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size
        self.person_id = person_id
        self.start_time = start_time
        self.sub_id = sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        return self


class ListPersonTraceDetailsResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        left_top_x: str = None,
        left_top_y: str = None,
        person_id: str = None,
        pic_url_path: str = None,
        right_bottom_x: str = None,
        right_bottom_y: str = None,
        shot_time: str = None,
        sub_id: str = None,
        target_pic_url_path: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.person_id = person_id
        self.pic_url_path = pic_url_path
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.shot_time = shot_time
        self.sub_id = sub_id
        self.target_pic_url_path = target_pic_url_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.pic_url_path is not None:
            result['PicUrlPath'] = self.pic_url_path
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        if self.target_pic_url_path is not None:
            result['TargetPicUrlPath'] = self.target_pic_url_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PicUrlPath') is not None:
            self.pic_url_path = m.get('PicUrlPath')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        if m.get('TargetPicUrlPath') is not None:
            self.target_pic_url_path = m.get('TargetPicUrlPath')
        return self


class ListPersonTraceDetailsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListPersonTraceDetailsResponseBodyData] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        total_count: int = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListPersonTraceDetailsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPersonTraceDetailsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListPersonTraceDetailsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPersonTraceDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPersonVisitCountRequest(TeaModel):
    def __init__(
        self,
        aggregate_type: str = None,
        corp_id: str = None,
        count_type: str = None,
        end_time: str = None,
        max_val: int = None,
        min_val: int = None,
        page_number: int = None,
        page_size: int = None,
        start_time: str = None,
        tag_code: str = None,
        time_aggregate_type: str = None,
    ):
        self.aggregate_type = aggregate_type
        self.corp_id = corp_id
        self.count_type = count_type
        self.end_time = end_time
        self.max_val = max_val
        self.min_val = min_val
        self.page_number = page_number
        self.page_size = page_size
        self.start_time = start_time
        self.tag_code = tag_code
        self.time_aggregate_type = time_aggregate_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_type is not None:
            result['AggregateType'] = self.aggregate_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.count_type is not None:
            result['CountType'] = self.count_type
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.max_val is not None:
            result['MaxVal'] = self.max_val
        if self.min_val is not None:
            result['MinVal'] = self.min_val
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.time_aggregate_type is not None:
            result['TimeAggregateType'] = self.time_aggregate_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AggregateType') is not None:
            self.aggregate_type = m.get('AggregateType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CountType') is not None:
            self.count_type = m.get('CountType')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('MaxVal') is not None:
            self.max_val = m.get('MaxVal')
        if m.get('MinVal') is not None:
            self.min_val = m.get('MinVal')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TimeAggregateType') is not None:
            self.time_aggregate_type = m.get('TimeAggregateType')
        return self


class ListPersonVisitCountResponseBodyData(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        day_id: str = None,
        device_id: str = None,
        group_id: str = None,
        hour_id: str = None,
        person_id: str = None,
        tag_code: str = None,
        tag_metrics: str = None,
    ):
        self.corp_id = corp_id
        self.day_id = day_id
        self.device_id = device_id
        self.group_id = group_id
        self.hour_id = hour_id
        self.person_id = person_id
        self.tag_code = tag_code
        self.tag_metrics = tag_metrics

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.day_id is not None:
            result['DayId'] = self.day_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hour_id is not None:
            result['HourId'] = self.hour_id
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_metrics is not None:
            result['TagMetrics'] = self.tag_metrics
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DayId') is not None:
            self.day_id = m.get('DayId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HourId') is not None:
            self.hour_id = m.get('HourId')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagMetrics') is not None:
            self.tag_metrics = m.get('TagMetrics')
        return self


class ListPersonVisitCountResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListPersonVisitCountResponseBodyData] = None,
        message: str = None,
        page_no: str = None,
        page_size: str = None,
        request_id: str = None,
        success: str = None,
        total_count: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListPersonVisitCountResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPersonVisitCountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListPersonVisitCountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPersonVisitCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPersonsRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        corp_id: str = None,
        end_time: str = None,
        page_no: str = None,
        page_size: str = None,
        start_time: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.corp_id = corp_id
        self.end_time = end_time
        self.page_no = page_no
        self.page_size = page_size
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListPersonsResponseBodyDataRecordsTagList(TeaModel):
    def __init__(
        self,
        tag_code: str = None,
        tag_name: str = None,
        tag_value: str = None,
        tag_value_id: str = None,
    ):
        self.tag_code = tag_code
        self.tag_name = tag_name
        self.tag_value = tag_value
        self.tag_value_id = tag_value_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_code is not None:
            result['TagCode'] = self.tag_code
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.tag_value_id is not None:
            result['TagValueId'] = self.tag_value_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagCode') is not None:
            self.tag_code = m.get('TagCode')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('TagValueId') is not None:
            self.tag_value_id = m.get('TagValueId')
        return self


class ListPersonsResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        first_appear_time: str = None,
        person_id: str = None,
        pic_url: str = None,
        tag_list: List[ListPersonsResponseBodyDataRecordsTagList] = None,
    ):
        self.first_appear_time = first_appear_time
        self.person_id = person_id
        self.pic_url = pic_url
        self.tag_list = tag_list

    def validate(self):
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.first_appear_time is not None:
            result['FirstAppearTime'] = self.first_appear_time
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FirstAppearTime') is not None:
            self.first_appear_time = m.get('FirstAppearTime')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = ListPersonsResponseBodyDataRecordsTagList()
                self.tag_list.append(temp_model.from_map(k))
        return self


class ListPersonsResponseBodyData(TeaModel):
    def __init__(
        self,
        page_no: str = None,
        page_size: str = None,
        records: List[ListPersonsResponseBodyDataRecords] = None,
        total_count: str = None,
        total_page: str = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListPersonsResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class ListPersonsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListPersonsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListPersonsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListPersonsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListPersonsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPersonsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUserGroupsRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        return self


class ListUserGroupsResponseBodyData(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        creator: str = None,
        isv_sub_id: str = None,
        parent_user_group_id: int = None,
        update_time: str = None,
        user_count: int = None,
        user_group_id: int = None,
        user_group_name: str = None,
    ):
        self.create_time = create_time
        self.creator = creator
        self.isv_sub_id = isv_sub_id
        self.parent_user_group_id = parent_user_group_id
        self.update_time = update_time
        self.user_count = user_count
        self.user_group_id = user_group_id
        self.user_group_name = user_group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_user_group_id is not None:
            result['ParentUserGroupId'] = self.parent_user_group_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_group_name is not None:
            result['UserGroupName'] = self.user_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentUserGroupId') is not None:
            self.parent_user_group_id = m.get('ParentUserGroupId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserGroupName') is not None:
            self.user_group_name = m.get('UserGroupName')
        return self


class ListUserGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListUserGroupsResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListUserGroupsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListUserGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListUserGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListUserGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUsersRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: int = None,
        attachment: str = None,
        biz_id: str = None,
        corp_id: str = None,
        face_image_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        matching_rate_threshold: str = None,
        page_number: int = None,
        page_size: int = None,
        person_list: Dict[str, Any] = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_list: Dict[str, Any] = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.corp_id = corp_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.matching_rate_threshold = matching_rate_threshold
        self.page_number = page_number
        self.page_size = page_size
        self.person_list = person_list
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_list = user_list
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.matching_rate_threshold is not None:
            result['MatchingRateThreshold'] = self.matching_rate_threshold
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_list is not None:
            result['PersonList'] = self.person_list
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_list is not None:
            result['UserList'] = self.user_list
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('MatchingRateThreshold') is not None:
            self.matching_rate_threshold = m.get('MatchingRateThreshold')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonList') is not None:
            self.person_list = m.get('PersonList')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserList') is not None:
            self.user_list = m.get('UserList')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ListUsersShrinkRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: int = None,
        attachment: str = None,
        biz_id: str = None,
        corp_id: str = None,
        face_image_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        matching_rate_threshold: str = None,
        page_number: int = None,
        page_size: int = None,
        person_list_shrink: str = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_list_shrink: str = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.corp_id = corp_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.matching_rate_threshold = matching_rate_threshold
        self.page_number = page_number
        self.page_size = page_size
        self.person_list_shrink = person_list_shrink
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_list_shrink = user_list_shrink
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.matching_rate_threshold is not None:
            result['MatchingRateThreshold'] = self.matching_rate_threshold
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.person_list_shrink is not None:
            result['PersonList'] = self.person_list_shrink
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_list_shrink is not None:
            result['UserList'] = self.user_list_shrink
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('MatchingRateThreshold') is not None:
            self.matching_rate_threshold = m.get('MatchingRateThreshold')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PersonList') is not None:
            self.person_list_shrink = m.get('PersonList')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserList') is not None:
            self.user_list_shrink = m.get('UserList')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ListUsersResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        age: str = None,
        attachment: str = None,
        biz_id: str = None,
        face_image_url: str = None,
        gender: str = None,
        id_number: str = None,
        isv_sub_id: str = None,
        matching_rate: str = None,
        person_id: str = None,
        user_group_id: int = None,
        user_id: int = None,
        user_name: str = None,
    ):
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.matching_rate = matching_rate
        self.person_id = person_id
        self.user_group_id = user_group_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.matching_rate is not None:
            result['MatchingRate'] = self.matching_rate
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('MatchingRate') is not None:
            self.matching_rate = m.get('MatchingRate')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ListUsersResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[ListUsersResponseBodyDataRecords] = None,
        success: int = None,
        total: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.success = success
        self.total = total

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ListUsersResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class ListUsersResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListUsersResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListUsersResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDeviceRequest(TeaModel):
    def __init__(
        self,
        audio_enable: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_id: str = None,
        device_ip: str = None,
        device_model: str = None,
        device_name: str = None,
        device_rate: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_sub_type: str = None,
        encode_format: str = None,
        frame_rate: str = None,
        gov_length: str = None,
        latitude: str = None,
        longitude: str = None,
        osdtime_enable: str = None,
        osdtime_type: str = None,
        osdtime_x: str = None,
        osdtime_y: str = None,
        password: str = None,
        vendor: str = None,
    ):
        self.audio_enable = audio_enable
        # 设备安装地址
        self.device_address = device_address
        self.device_direction = device_direction
        # 设备国标编码
        self.device_id = device_id
        self.device_ip = device_ip
        self.device_model = device_model
        # 设备名称
        self.device_name = device_name
        self.device_rate = device_rate
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_sub_type = device_sub_type
        self.encode_format = encode_format
        self.frame_rate = frame_rate
        self.gov_length = gov_length
        self.latitude = latitude
        self.longitude = longitude
        self.osdtime_enable = osdtime_enable
        self.osdtime_type = osdtime_type
        self.osdtime_x = osdtime_x
        self.osdtime_y = osdtime_y
        self.password = password
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audio_enable is not None:
            result['AudioEnable'] = self.audio_enable
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_ip is not None:
            result['DeviceIp'] = self.device_ip
        if self.device_model is not None:
            result['DeviceModel'] = self.device_model
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_sub_type is not None:
            result['DeviceSubType'] = self.device_sub_type
        if self.encode_format is not None:
            result['EncodeFormat'] = self.encode_format
        if self.frame_rate is not None:
            result['FrameRate'] = self.frame_rate
        if self.gov_length is not None:
            result['GovLength'] = self.gov_length
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.osdtime_enable is not None:
            result['OSDTimeEnable'] = self.osdtime_enable
        if self.osdtime_type is not None:
            result['OSDTimeType'] = self.osdtime_type
        if self.osdtime_x is not None:
            result['OSDTimeX'] = self.osdtime_x
        if self.osdtime_y is not None:
            result['OSDTimeY'] = self.osdtime_y
        if self.password is not None:
            result['Password'] = self.password
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AudioEnable') is not None:
            self.audio_enable = m.get('AudioEnable')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceIp') is not None:
            self.device_ip = m.get('DeviceIp')
        if m.get('DeviceModel') is not None:
            self.device_model = m.get('DeviceModel')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceSubType') is not None:
            self.device_sub_type = m.get('DeviceSubType')
        if m.get('EncodeFormat') is not None:
            self.encode_format = m.get('EncodeFormat')
        if m.get('FrameRate') is not None:
            self.frame_rate = m.get('FrameRate')
        if m.get('GovLength') is not None:
            self.gov_length = m.get('GovLength')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('OSDTimeEnable') is not None:
            self.osdtime_enable = m.get('OSDTimeEnable')
        if m.get('OSDTimeType') is not None:
            self.osdtime_type = m.get('OSDTimeType')
        if m.get('OSDTimeX') is not None:
            self.osdtime_x = m.get('OSDTimeX')
        if m.get('OSDTimeY') is not None:
            self.osdtime_y = m.get('OSDTimeY')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ModifyDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        # 错误码
        self.code = code
        # 错误码描述
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ModifyDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PeekNvrRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class PeekNvrResponseBodyDataSubDeviceList(TeaModel):
    def __init__(
        self,
        associated_platform: str = None,
        sub_device_id: str = None,
        sub_device_name: str = None,
        sub_device_num: str = None,
        sub_device_status: str = None,
    ):
        self.associated_platform = associated_platform
        self.sub_device_id = sub_device_id
        self.sub_device_name = sub_device_name
        self.sub_device_num = sub_device_num
        self.sub_device_status = sub_device_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.associated_platform is not None:
            result['AssociatedPlatform'] = self.associated_platform
        if self.sub_device_id is not None:
            result['SubDeviceId'] = self.sub_device_id
        if self.sub_device_name is not None:
            result['SubDeviceName'] = self.sub_device_name
        if self.sub_device_num is not None:
            result['SubDeviceNum'] = self.sub_device_num
        if self.sub_device_status is not None:
            result['SubDeviceStatus'] = self.sub_device_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AssociatedPlatform') is not None:
            self.associated_platform = m.get('AssociatedPlatform')
        if m.get('SubDeviceId') is not None:
            self.sub_device_id = m.get('SubDeviceId')
        if m.get('SubDeviceName') is not None:
            self.sub_device_name = m.get('SubDeviceName')
        if m.get('SubDeviceNum') is not None:
            self.sub_device_num = m.get('SubDeviceNum')
        if m.get('SubDeviceStatus') is not None:
            self.sub_device_status = m.get('SubDeviceStatus')
        return self


class PeekNvrResponseBodyData(TeaModel):
    def __init__(
        self,
        idle_count: int = None,
        sub_device_list: List[PeekNvrResponseBodyDataSubDeviceList] = None,
    ):
        self.idle_count = idle_count
        self.sub_device_list = sub_device_list

    def validate(self):
        if self.sub_device_list:
            for k in self.sub_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.idle_count is not None:
            result['IdleCount'] = self.idle_count
        result['SubDeviceList'] = []
        if self.sub_device_list is not None:
            for k in self.sub_device_list:
                result['SubDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IdleCount') is not None:
            self.idle_count = m.get('IdleCount')
        self.sub_device_list = []
        if m.get('SubDeviceList') is not None:
            for k in m.get('SubDeviceList'):
                temp_model = PeekNvrResponseBodyDataSubDeviceList()
                self.sub_device_list.append(temp_model.from_map(k))
        return self


class PeekNvrResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: PeekNvrResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = PeekNvrResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class PeekNvrResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: PeekNvrResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PeekNvrResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RaiseDevicesStorageRequest(TeaModel):
    def __init__(
        self,
        json: str = None,
    ):
        self.json = json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.json is not None:
            result['Json'] = self.json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Json') is not None:
            self.json = m.get('Json')
        return self


class RaiseDevicesStorageResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RaiseDevicesStorageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RaiseDevicesStorageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RaiseDevicesStorageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecognizeFaceQualityRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        pic_content: str = None,
        pic_format: str = None,
        pic_url: str = None,
    ):
        self.corp_id = corp_id
        self.pic_content = pic_content
        self.pic_format = pic_format
        self.pic_url = pic_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.pic_content is not None:
            result['PicContent'] = self.pic_content
        if self.pic_format is not None:
            result['PicFormat'] = self.pic_format
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PicContent') is not None:
            self.pic_content = m.get('PicContent')
        if m.get('PicFormat') is not None:
            self.pic_format = m.get('PicFormat')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        return self


class RecognizeFaceQualityResponseBodyDataAttributes(TeaModel):
    def __init__(
        self,
        face_quality: str = None,
        face_score: str = None,
        face_style: str = None,
        left_top_x: int = None,
        left_top_y: int = None,
        right_bottom_x: int = None,
        right_bottom_y: int = None,
        target_image_storage_path: str = None,
    ):
        self.face_quality = face_quality
        self.face_score = face_score
        self.face_style = face_style
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.target_image_storage_path = target_image_storage_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.face_quality is not None:
            result['FaceQuality'] = self.face_quality
        if self.face_score is not None:
            result['FaceScore'] = self.face_score
        if self.face_style is not None:
            result['FaceStyle'] = self.face_style
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.target_image_storage_path is not None:
            result['TargetImageStoragePath'] = self.target_image_storage_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FaceQuality') is not None:
            self.face_quality = m.get('FaceQuality')
        if m.get('FaceScore') is not None:
            self.face_score = m.get('FaceScore')
        if m.get('FaceStyle') is not None:
            self.face_style = m.get('FaceStyle')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('TargetImageStoragePath') is not None:
            self.target_image_storage_path = m.get('TargetImageStoragePath')
        return self


class RecognizeFaceQualityResponseBodyData(TeaModel):
    def __init__(
        self,
        attributes: RecognizeFaceQualityResponseBodyDataAttributes = None,
        description: str = None,
        quality_score: str = None,
    ):
        self.attributes = attributes
        self.description = description
        self.quality_score = quality_score

    def validate(self):
        if self.attributes:
            self.attributes.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attributes is not None:
            result['Attributes'] = self.attributes.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.quality_score is not None:
            result['QualityScore'] = self.quality_score
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Attributes') is not None:
            temp_model = RecognizeFaceQualityResponseBodyDataAttributes()
            self.attributes = temp_model.from_map(m['Attributes'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('QualityScore') is not None:
            self.quality_score = m.get('QualityScore')
        return self


class RecognizeFaceQualityResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: RecognizeFaceQualityResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = RecognizeFaceQualityResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RecognizeFaceQualityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RecognizeFaceQualityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecognizeFaceQualityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecognizeImageRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        pic_content: str = None,
        pic_format: str = None,
        pic_url: str = None,
    ):
        self.corp_id = corp_id
        self.pic_content = pic_content
        self.pic_format = pic_format
        self.pic_url = pic_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.pic_content is not None:
            result['PicContent'] = self.pic_content
        if self.pic_format is not None:
            result['PicFormat'] = self.pic_format
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('PicContent') is not None:
            self.pic_content = m.get('PicContent')
        if m.get('PicFormat') is not None:
            self.pic_format = m.get('PicFormat')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        return self


class RecognizeImageResponseBodyDataBodyList(TeaModel):
    def __init__(
        self,
        feature: str = None,
        file_name: str = None,
        image_base_six_four: str = None,
        left_top_x: str = None,
        left_top_y: str = None,
        local_feature: str = None,
        respirator_color: str = None,
        right_bottom_x: str = None,
        right_bottom_y: str = None,
    ):
        self.feature = feature
        self.file_name = file_name
        self.image_base_six_four = image_base_six_four
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.local_feature = local_feature
        self.respirator_color = respirator_color
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.feature is not None:
            result['Feature'] = self.feature
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.image_base_six_four is not None:
            result['ImageBaseSixFour'] = self.image_base_six_four
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.local_feature is not None:
            result['LocalFeature'] = self.local_feature
        if self.respirator_color is not None:
            result['RespiratorColor'] = self.respirator_color
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Feature') is not None:
            self.feature = m.get('Feature')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('ImageBaseSixFour') is not None:
            self.image_base_six_four = m.get('ImageBaseSixFour')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('LocalFeature') is not None:
            self.local_feature = m.get('LocalFeature')
        if m.get('RespiratorColor') is not None:
            self.respirator_color = m.get('RespiratorColor')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        return self


class RecognizeImageResponseBodyDataFaceList(TeaModel):
    def __init__(
        self,
        feature: str = None,
        file_name: str = None,
        image_base_six_four: str = None,
        key_point_quality: float = None,
        left_top_x: str = None,
        left_top_y: str = None,
        local_feature: str = None,
        quality: float = None,
        respirator_color: str = None,
        right_bottom_x: str = None,
        right_bottom_y: str = None,
    ):
        self.feature = feature
        self.file_name = file_name
        self.image_base_six_four = image_base_six_four
        self.key_point_quality = key_point_quality
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.local_feature = local_feature
        self.quality = quality
        self.respirator_color = respirator_color
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.feature is not None:
            result['Feature'] = self.feature
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.image_base_six_four is not None:
            result['ImageBaseSixFour'] = self.image_base_six_four
        if self.key_point_quality is not None:
            result['KeyPointQuality'] = self.key_point_quality
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.local_feature is not None:
            result['LocalFeature'] = self.local_feature
        if self.quality is not None:
            result['Quality'] = self.quality
        if self.respirator_color is not None:
            result['RespiratorColor'] = self.respirator_color
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Feature') is not None:
            self.feature = m.get('Feature')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('ImageBaseSixFour') is not None:
            self.image_base_six_four = m.get('ImageBaseSixFour')
        if m.get('KeyPointQuality') is not None:
            self.key_point_quality = m.get('KeyPointQuality')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('LocalFeature') is not None:
            self.local_feature = m.get('LocalFeature')
        if m.get('Quality') is not None:
            self.quality = m.get('Quality')
        if m.get('RespiratorColor') is not None:
            self.respirator_color = m.get('RespiratorColor')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        return self


class RecognizeImageResponseBodyData(TeaModel):
    def __init__(
        self,
        body_list: List[RecognizeImageResponseBodyDataBodyList] = None,
        face_list: List[RecognizeImageResponseBodyDataFaceList] = None,
    ):
        self.body_list = body_list
        self.face_list = face_list

    def validate(self):
        if self.body_list:
            for k in self.body_list:
                if k:
                    k.validate()
        if self.face_list:
            for k in self.face_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['BodyList'] = []
        if self.body_list is not None:
            for k in self.body_list:
                result['BodyList'].append(k.to_map() if k else None)
        result['FaceList'] = []
        if self.face_list is not None:
            for k in self.face_list:
                result['FaceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.body_list = []
        if m.get('BodyList') is not None:
            for k in m.get('BodyList'):
                temp_model = RecognizeImageResponseBodyDataBodyList()
                self.body_list.append(temp_model.from_map(k))
        self.face_list = []
        if m.get('FaceList') is not None:
            for k in m.get('FaceList'):
                temp_model = RecognizeImageResponseBodyDataFaceList()
                self.face_list.append(temp_model.from_map(k))
        return self


class RecognizeImageResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: RecognizeImageResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = RecognizeImageResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RecognizeImageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RecognizeImageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecognizeImageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RegisterDeviceRequest(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        device_sn: str = None,
        device_time_stamp: str = None,
        server_id: str = None,
    ):
        self.device_id = device_id
        self.device_sn = device_sn
        self.device_time_stamp = device_time_stamp
        self.server_id = server_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_time_stamp is not None:
            result['DeviceTimeStamp'] = self.device_time_stamp
        if self.server_id is not None:
            result['ServerId'] = self.server_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceTimeStamp') is not None:
            self.device_time_stamp = m.get('DeviceTimeStamp')
        if m.get('ServerId') is not None:
            self.server_id = m.get('ServerId')
        return self


class RegisterDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        retry_interval: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.retry_interval = retry_interval

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry_interval is not None:
            result['RetryInterval'] = self.retry_interval
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetryInterval') is not None:
            self.retry_interval = m.get('RetryInterval')
        return self


class RegisterDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RegisterDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RegisterDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveCameraForInstanceRequest(TeaModel):
    def __init__(
        self,
        camera_ids: List[str] = None,
        instance_id: str = None,
    ):
        # 设备ID列表
        self.camera_ids = camera_ids
        # 实例id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.camera_ids is not None:
            result['CameraIds'] = self.camera_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CameraIds') is not None:
            self.camera_ids = m.get('CameraIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class RemoveCameraForInstanceShrinkRequest(TeaModel):
    def __init__(
        self,
        camera_ids_shrink: str = None,
        instance_id: str = None,
    ):
        # 设备ID列表
        self.camera_ids_shrink = camera_ids_shrink
        # 实例id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.camera_ids_shrink is not None:
            result['CameraIds'] = self.camera_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CameraIds') is not None:
            self.camera_ids_shrink = m.get('CameraIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class RemoveCameraForInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        # code码
        self.code = code
        # 返回结果消息
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RemoveCameraForInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RemoveCameraForInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveCameraForInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveSearchItemsRequest(TeaModel):
    def __init__(
        self,
        search_item_ids: str = None,
        search_table_id: str = None,
    ):
        self.search_item_ids = search_item_ids
        self.search_table_id = search_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_item_ids is not None:
            result['SearchItemIds'] = self.search_item_ids
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SearchItemIds') is not None:
            self.search_item_ids = m.get('SearchItemIds')
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        return self


class RemoveSearchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        deleted_item_ids: str = None,
        failed_item_ids: str = None,
    ):
        self.deleted_item_ids = deleted_item_ids
        self.failed_item_ids = failed_item_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.deleted_item_ids is not None:
            result['DeletedItemIds'] = self.deleted_item_ids
        if self.failed_item_ids is not None:
            result['FailedItemIds'] = self.failed_item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeletedItemIds') is not None:
            self.deleted_item_ids = m.get('DeletedItemIds')
        if m.get('FailedItemIds') is not None:
            self.failed_item_ids = m.get('FailedItemIds')
        return self


class RemoveSearchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: RemoveSearchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = RemoveSearchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveSearchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RemoveSearchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveSearchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveWatchItemsRequest(TeaModel):
    def __init__(
        self,
        watch_item_ids: str = None,
        watch_policy_id: str = None,
    ):
        self.watch_item_ids = watch_item_ids
        self.watch_policy_id = watch_policy_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.watch_item_ids is not None:
            result['WatchItemIds'] = self.watch_item_ids
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WatchItemIds') is not None:
            self.watch_item_ids = m.get('WatchItemIds')
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        return self


class RemoveWatchItemsResponseBodyData(TeaModel):
    def __init__(
        self,
        deleted_item_ids: str = None,
        failed_item_ids: str = None,
    ):
        self.deleted_item_ids = deleted_item_ids
        self.failed_item_ids = failed_item_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.deleted_item_ids is not None:
            result['DeletedItemIds'] = self.deleted_item_ids
        if self.failed_item_ids is not None:
            result['FailedItemIds'] = self.failed_item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeletedItemIds') is not None:
            self.deleted_item_ids = m.get('DeletedItemIds')
        if m.get('FailedItemIds') is not None:
            self.failed_item_ids = m.get('FailedItemIds')
        return self


class RemoveWatchItemsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: RemoveWatchItemsResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = RemoveWatchItemsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveWatchItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RemoveWatchItemsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveWatchItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveVideoSummaryTaskVideoRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        save_video: bool = None,
        task_id: int = None,
    ):
        self.corp_id = corp_id
        self.save_video = save_video
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.save_video is not None:
            result['SaveVideo'] = self.save_video
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('SaveVideo') is not None:
            self.save_video = m.get('SaveVideo')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SaveVideoSummaryTaskVideoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SaveVideoSummaryTaskVideoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveVideoSummaryTaskVideoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveVideoSummaryTaskVideoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ScanSubDeviceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        return self


class ScanSubDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ScanSubDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ScanSubDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ScanSubDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchBodyRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        end_time_stamp: int = None,
        gb_id: str = None,
        option_list: Dict[str, Any] = None,
        page_no: int = None,
        page_size: int = None,
        start_time_stamp: int = None,
    ):
        self.corp_id = corp_id
        self.end_time_stamp = end_time_stamp
        self.gb_id = gb_id
        self.option_list = option_list
        self.page_no = page_no
        self.page_size = page_size
        self.start_time_stamp = start_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time_stamp is not None:
            result['EndTimeStamp'] = self.end_time_stamp
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.option_list is not None:
            result['OptionList'] = self.option_list
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time_stamp is not None:
            result['StartTimeStamp'] = self.start_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTimeStamp') is not None:
            self.end_time_stamp = m.get('EndTimeStamp')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OptionList') is not None:
            self.option_list = m.get('OptionList')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTimeStamp') is not None:
            self.start_time_stamp = m.get('StartTimeStamp')
        return self


class SearchBodyShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        end_time_stamp: int = None,
        gb_id: str = None,
        option_list_shrink: str = None,
        page_no: int = None,
        page_size: int = None,
        start_time_stamp: int = None,
    ):
        self.corp_id = corp_id
        self.end_time_stamp = end_time_stamp
        self.gb_id = gb_id
        self.option_list_shrink = option_list_shrink
        self.page_no = page_no
        self.page_size = page_size
        self.start_time_stamp = start_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time_stamp is not None:
            result['EndTimeStamp'] = self.end_time_stamp
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.option_list_shrink is not None:
            result['OptionList'] = self.option_list_shrink
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time_stamp is not None:
            result['StartTimeStamp'] = self.start_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTimeStamp') is not None:
            self.end_time_stamp = m.get('EndTimeStamp')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OptionList') is not None:
            self.option_list_shrink = m.get('OptionList')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTimeStamp') is not None:
            self.start_time_stamp = m.get('StartTimeStamp')
        return self


class SearchBodyResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        gb_id: str = None,
        image_url: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        score: float = None,
        target_image_url: str = None,
    ):
        self.gb_id = gb_id
        self.image_url = image_url
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.score = score
        self.target_image_url = target_image_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.image_url is not None:
            result['ImageUrl'] = self.image_url
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.score is not None:
            result['Score'] = self.score
        if self.target_image_url is not None:
            result['TargetImageUrl'] = self.target_image_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('ImageUrl') is not None:
            self.image_url = m.get('ImageUrl')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('TargetImageUrl') is not None:
            self.target_image_url = m.get('TargetImageUrl')
        return self


class SearchBodyResponseBodyData(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[SearchBodyResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = SearchBodyResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class SearchBodyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SearchBodyResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SearchBodyResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SearchBodyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchBodyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchBodyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchFaceRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        end_time_stamp: int = None,
        gb_id: str = None,
        option_list: Dict[str, Any] = None,
        page_no: int = None,
        page_size: int = None,
        start_time_stamp: int = None,
    ):
        self.corp_id = corp_id
        self.end_time_stamp = end_time_stamp
        self.gb_id = gb_id
        self.option_list = option_list
        self.page_no = page_no
        self.page_size = page_size
        self.start_time_stamp = start_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time_stamp is not None:
            result['EndTimeStamp'] = self.end_time_stamp
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.option_list is not None:
            result['OptionList'] = self.option_list
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time_stamp is not None:
            result['StartTimeStamp'] = self.start_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTimeStamp') is not None:
            self.end_time_stamp = m.get('EndTimeStamp')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OptionList') is not None:
            self.option_list = m.get('OptionList')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTimeStamp') is not None:
            self.start_time_stamp = m.get('StartTimeStamp')
        return self


class SearchFaceShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        end_time_stamp: int = None,
        gb_id: str = None,
        option_list_shrink: str = None,
        page_no: int = None,
        page_size: int = None,
        start_time_stamp: int = None,
    ):
        self.corp_id = corp_id
        self.end_time_stamp = end_time_stamp
        self.gb_id = gb_id
        self.option_list_shrink = option_list_shrink
        self.page_no = page_no
        self.page_size = page_size
        self.start_time_stamp = start_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.end_time_stamp is not None:
            result['EndTimeStamp'] = self.end_time_stamp
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.option_list_shrink is not None:
            result['OptionList'] = self.option_list_shrink
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time_stamp is not None:
            result['StartTimeStamp'] = self.start_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('EndTimeStamp') is not None:
            self.end_time_stamp = m.get('EndTimeStamp')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('OptionList') is not None:
            self.option_list_shrink = m.get('OptionList')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTimeStamp') is not None:
            self.start_time_stamp = m.get('StartTimeStamp')
        return self


class SearchFaceResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        gb_id: str = None,
        image_url: str = None,
        left_top_x: float = None,
        left_top_y: float = None,
        match_suggestion: str = None,
        right_bottom_x: float = None,
        right_bottom_y: float = None,
        score: float = None,
        source_id: str = None,
        target_image_url: str = None,
    ):
        self.gb_id = gb_id
        self.image_url = image_url
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.match_suggestion = match_suggestion
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.score = score
        self.source_id = source_id
        self.target_image_url = target_image_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.image_url is not None:
            result['ImageUrl'] = self.image_url
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.match_suggestion is not None:
            result['MatchSuggestion'] = self.match_suggestion
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.score is not None:
            result['Score'] = self.score
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.target_image_url is not None:
            result['TargetImageUrl'] = self.target_image_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('ImageUrl') is not None:
            self.image_url = m.get('ImageUrl')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('MatchSuggestion') is not None:
            self.match_suggestion = m.get('MatchSuggestion')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('TargetImageUrl') is not None:
            self.target_image_url = m.get('TargetImageUrl')
        return self


class SearchFaceResponseBodyData(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[SearchFaceResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = SearchFaceResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class SearchFaceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SearchFaceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SearchFaceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SearchFaceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchFaceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchFaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchItemRequest(TeaModel):
    def __init__(
        self,
        item_image_data: str = None,
        item_image_url: str = None,
        page_number: int = None,
        page_size: int = None,
        search_table_ids: str = None,
        similarity_threshold: float = None,
    ):
        self.item_image_data = item_image_data
        self.item_image_url = item_image_url
        self.page_number = page_number
        self.page_size = page_size
        self.search_table_ids = search_table_ids
        self.similarity_threshold = similarity_threshold

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_image_data is not None:
            result['ItemImageData'] = self.item_image_data
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_table_ids is not None:
            result['SearchTableIds'] = self.search_table_ids
        if self.similarity_threshold is not None:
            result['SimilarityThreshold'] = self.similarity_threshold
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemImageData') is not None:
            self.item_image_data = m.get('ItemImageData')
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchTableIds') is not None:
            self.search_table_ids = m.get('SearchTableIds')
        if m.get('SimilarityThreshold') is not None:
            self.similarity_threshold = m.get('SimilarityThreshold')
        return self


class SearchItemResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        item_id: str = None,
        item_image_similarity: float = None,
        item_image_url: str = None,
        item_name: str = None,
    ):
        self.item_id = item_id
        self.item_image_similarity = item_image_similarity
        self.item_image_url = item_image_url
        self.item_name = item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_image_similarity is not None:
            result['ItemImageSimilarity'] = self.item_image_similarity
        if self.item_image_url is not None:
            result['ItemImageUrl'] = self.item_image_url
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemImageSimilarity') is not None:
            self.item_image_similarity = m.get('ItemImageSimilarity')
        if m.get('ItemImageUrl') is not None:
            self.item_image_url = m.get('ItemImageUrl')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        return self


class SearchItemResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[SearchItemResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = SearchItemResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class SearchItemResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SearchItemResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SearchItemResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SearchItemResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchItemResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchObjectRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        conditions: Dict[str, Any] = None,
        corp_id: str = None,
        device_list: Dict[str, Any] = None,
        end_time: int = None,
        image_path: Dict[str, Any] = None,
        object_type: str = None,
        page_number: int = None,
        page_size: int = None,
        pic_url: str = None,
        start_time: int = None,
    ):
        self.algorithm_type = algorithm_type
        self.conditions = conditions
        self.corp_id = corp_id
        self.device_list = device_list
        self.end_time = end_time
        self.image_path = image_path
        self.object_type = object_type
        self.page_number = page_number
        self.page_size = page_size
        self.pic_url = pic_url
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.conditions is not None:
            result['Conditions'] = self.conditions
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.image_path is not None:
            result['ImagePath'] = self.image_path
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('Conditions') is not None:
            self.conditions = m.get('Conditions')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ImagePath') is not None:
            self.image_path = m.get('ImagePath')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class SearchObjectShrinkRequest(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        conditions_shrink: str = None,
        corp_id: str = None,
        device_list_shrink: str = None,
        end_time: int = None,
        image_path_shrink: str = None,
        object_type: str = None,
        page_number: int = None,
        page_size: int = None,
        pic_url: str = None,
        start_time: int = None,
    ):
        self.algorithm_type = algorithm_type
        self.conditions_shrink = conditions_shrink
        self.corp_id = corp_id
        self.device_list_shrink = device_list_shrink
        self.end_time = end_time
        self.image_path_shrink = image_path_shrink
        self.object_type = object_type
        self.page_number = page_number
        self.page_size = page_size
        self.pic_url = pic_url
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.conditions_shrink is not None:
            result['Conditions'] = self.conditions_shrink
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_list_shrink is not None:
            result['DeviceList'] = self.device_list_shrink
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.image_path_shrink is not None:
            result['ImagePath'] = self.image_path_shrink
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pic_url is not None:
            result['PicUrl'] = self.pic_url
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('Conditions') is not None:
            self.conditions_shrink = m.get('Conditions')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceList') is not None:
            self.device_list_shrink = m.get('DeviceList')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ImagePath') is not None:
            self.image_path_shrink = m.get('ImagePath')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PicUrl') is not None:
            self.pic_url = m.get('PicUrl')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class SearchObjectResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        compare_result: str = None,
        device_id: str = None,
        left_top_x: int = None,
        left_top_y: int = None,
        right_btm_x: int = None,
        right_btm_y: int = None,
        score: float = None,
        shot_time: int = None,
        source_id: str = None,
        source_image_path: str = None,
        source_image_url: str = None,
        target_image_path: str = None,
        target_image_url: str = None,
    ):
        self.compare_result = compare_result
        self.device_id = device_id
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.right_btm_x = right_btm_x
        self.right_btm_y = right_btm_y
        self.score = score
        self.shot_time = shot_time
        self.source_id = source_id
        self.source_image_path = source_image_path
        self.source_image_url = source_image_url
        self.target_image_path = target_image_path
        self.target_image_url = target_image_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.compare_result is not None:
            result['CompareResult'] = self.compare_result
        if self.device_id is not None:
            result['DeviceID'] = self.device_id
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.right_btm_x is not None:
            result['RightBtmX'] = self.right_btm_x
        if self.right_btm_y is not None:
            result['RightBtmY'] = self.right_btm_y
        if self.score is not None:
            result['Score'] = self.score
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.source_id is not None:
            result['SourceID'] = self.source_id
        if self.source_image_path is not None:
            result['SourceImagePath'] = self.source_image_path
        if self.source_image_url is not None:
            result['SourceImageUrl'] = self.source_image_url
        if self.target_image_path is not None:
            result['TargetImagePath'] = self.target_image_path
        if self.target_image_url is not None:
            result['TargetImageUrl'] = self.target_image_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CompareResult') is not None:
            self.compare_result = m.get('CompareResult')
        if m.get('DeviceID') is not None:
            self.device_id = m.get('DeviceID')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('RightBtmX') is not None:
            self.right_btm_x = m.get('RightBtmX')
        if m.get('RightBtmY') is not None:
            self.right_btm_y = m.get('RightBtmY')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('SourceID') is not None:
            self.source_id = m.get('SourceID')
        if m.get('SourceImagePath') is not None:
            self.source_image_path = m.get('SourceImagePath')
        if m.get('SourceImageUrl') is not None:
            self.source_image_url = m.get('SourceImageUrl')
        if m.get('TargetImagePath') is not None:
            self.target_image_path = m.get('TargetImagePath')
        if m.get('TargetImageUrl') is not None:
            self.target_image_url = m.get('TargetImageUrl')
        return self


class SearchObjectResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[SearchObjectResponseBodyDataRecords] = None,
        total_count: int = None,
        total_page: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count
        self.total_page = total_page

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = SearchObjectResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class SearchObjectResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SearchObjectResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SearchObjectResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SearchObjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchObjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchObjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchTargetRequest(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        corp_id: str = None,
        device_list: str = None,
        end_time: str = None,
        model_id: str = None,
        order_by: str = None,
        page_number: int = None,
        page_size: int = None,
        similarity_threshold: float = None,
        target_attributes: str = None,
        target_image_data: str = None,
        target_image_url: str = None,
        target_type: str = None,
    ):
        self.begin_time = begin_time
        self.corp_id = corp_id
        self.device_list = device_list
        self.end_time = end_time
        self.model_id = model_id
        self.order_by = order_by
        self.page_number = page_number
        self.page_size = page_size
        self.similarity_threshold = similarity_threshold
        self.target_attributes = target_attributes
        self.target_image_data = target_image_data
        self.target_image_url = target_image_url
        self.target_type = target_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.similarity_threshold is not None:
            result['SimilarityThreshold'] = self.similarity_threshold
        if self.target_attributes is not None:
            result['TargetAttributes'] = self.target_attributes
        if self.target_image_data is not None:
            result['TargetImageData'] = self.target_image_data
        if self.target_image_url is not None:
            result['TargetImageUrl'] = self.target_image_url
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SimilarityThreshold') is not None:
            self.similarity_threshold = m.get('SimilarityThreshold')
        if m.get('TargetAttributes') is not None:
            self.target_attributes = m.get('TargetAttributes')
        if m.get('TargetImageData') is not None:
            self.target_image_data = m.get('TargetImageData')
        if m.get('TargetImageUrl') is not None:
            self.target_image_url = m.get('TargetImageUrl')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        return self


class SearchTargetResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        left_top_x: int = None,
        left_top_y: int = None,
        right_bottom_x: int = None,
        right_bottom_y: int = None,
        source_image_url: str = None,
        target_attributes: str = None,
        target_image_similarity: float = None,
        target_image_url: str = None,
        target_type: str = None,
        timestamp: str = None,
    ):
        self.device_id = device_id
        self.left_top_x = left_top_x
        self.left_top_y = left_top_y
        self.right_bottom_x = right_bottom_x
        self.right_bottom_y = right_bottom_y
        self.source_image_url = source_image_url
        self.target_attributes = target_attributes
        self.target_image_similarity = target_image_similarity
        self.target_image_url = target_image_url
        self.target_type = target_type
        self.timestamp = timestamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.left_top_x is not None:
            result['LeftTopX'] = self.left_top_x
        if self.left_top_y is not None:
            result['LeftTopY'] = self.left_top_y
        if self.right_bottom_x is not None:
            result['RightBottomX'] = self.right_bottom_x
        if self.right_bottom_y is not None:
            result['RightBottomY'] = self.right_bottom_y
        if self.source_image_url is not None:
            result['SourceImageUrl'] = self.source_image_url
        if self.target_attributes is not None:
            result['TargetAttributes'] = self.target_attributes
        if self.target_image_similarity is not None:
            result['TargetImageSimilarity'] = self.target_image_similarity
        if self.target_image_url is not None:
            result['TargetImageUrl'] = self.target_image_url
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('LeftTopX') is not None:
            self.left_top_x = m.get('LeftTopX')
        if m.get('LeftTopY') is not None:
            self.left_top_y = m.get('LeftTopY')
        if m.get('RightBottomX') is not None:
            self.right_bottom_x = m.get('RightBottomX')
        if m.get('RightBottomY') is not None:
            self.right_bottom_y = m.get('RightBottomY')
        if m.get('SourceImageUrl') is not None:
            self.source_image_url = m.get('SourceImageUrl')
        if m.get('TargetAttributes') is not None:
            self.target_attributes = m.get('TargetAttributes')
        if m.get('TargetImageSimilarity') is not None:
            self.target_image_similarity = m.get('TargetImageSimilarity')
        if m.get('TargetImageUrl') is not None:
            self.target_image_url = m.get('TargetImageUrl')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class SearchTargetResponseBodyData(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        records: List[SearchTargetResponseBodyDataRecords] = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = SearchTargetResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class SearchTargetResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SearchTargetResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SearchTargetResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SearchTargetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchTargetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchTargetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetAiotStorageInfoRequestEventAlarmMq(TeaModel):
    def __init__(
        self,
        alarm_topic: str = None,
        event_topic: str = None,
        instance_id: str = None,
        mq_type: str = None,
        ram_arn_role: str = None,
        region_id: str = None,
    ):
        self.alarm_topic = alarm_topic
        self.event_topic = event_topic
        self.instance_id = instance_id
        self.mq_type = mq_type
        self.ram_arn_role = ram_arn_role
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_topic is not None:
            result['AlarmTopic'] = self.alarm_topic
        if self.event_topic is not None:
            result['EventTopic'] = self.event_topic
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.mq_type is not None:
            result['MqType'] = self.mq_type
        if self.ram_arn_role is not None:
            result['RamArnRole'] = self.ram_arn_role
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlarmTopic') is not None:
            self.alarm_topic = m.get('AlarmTopic')
        if m.get('EventTopic') is not None:
            self.event_topic = m.get('EventTopic')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MqType') is not None:
            self.mq_type = m.get('MqType')
        if m.get('RamArnRole') is not None:
            self.ram_arn_role = m.get('RamArnRole')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class SetAiotStorageInfoRequestEventAlarmPictureStorage(TeaModel):
    def __init__(
        self,
        bucket: str = None,
        endpoint: str = None,
        path: str = None,
        proxy: str = None,
        ram_arn_role: str = None,
        storage_type: str = None,
    ):
        self.bucket = bucket
        self.endpoint = endpoint
        self.path = path
        self.proxy = proxy
        self.ram_arn_role = ram_arn_role
        self.storage_type = storage_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bucket is not None:
            result['Bucket'] = self.bucket
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.path is not None:
            result['Path'] = self.path
        if self.proxy is not None:
            result['Proxy'] = self.proxy
        if self.ram_arn_role is not None:
            result['RamArnRole'] = self.ram_arn_role
        if self.storage_type is not None:
            result['StorageType'] = self.storage_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bucket') is not None:
            self.bucket = m.get('Bucket')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Proxy') is not None:
            self.proxy = m.get('Proxy')
        if m.get('RamArnRole') is not None:
            self.ram_arn_role = m.get('RamArnRole')
        if m.get('StorageType') is not None:
            self.storage_type = m.get('StorageType')
        return self


class SetAiotStorageInfoRequest(TeaModel):
    def __init__(
        self,
        event_alarm_mq: SetAiotStorageInfoRequestEventAlarmMq = None,
        event_alarm_picture_storage: SetAiotStorageInfoRequestEventAlarmPictureStorage = None,
    ):
        self.event_alarm_mq = event_alarm_mq
        self.event_alarm_picture_storage = event_alarm_picture_storage

    def validate(self):
        if self.event_alarm_mq:
            self.event_alarm_mq.validate()
        if self.event_alarm_picture_storage:
            self.event_alarm_picture_storage.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_alarm_mq is not None:
            result['EventAlarmMq'] = self.event_alarm_mq.to_map()
        if self.event_alarm_picture_storage is not None:
            result['EventAlarmPictureStorage'] = self.event_alarm_picture_storage.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventAlarmMq') is not None:
            temp_model = SetAiotStorageInfoRequestEventAlarmMq()
            self.event_alarm_mq = temp_model.from_map(m['EventAlarmMq'])
        if m.get('EventAlarmPictureStorage') is not None:
            temp_model = SetAiotStorageInfoRequestEventAlarmPictureStorage()
            self.event_alarm_picture_storage = temp_model.from_map(m['EventAlarmPictureStorage'])
        return self


class SetAiotStorageInfoShrinkRequest(TeaModel):
    def __init__(
        self,
        event_alarm_mq_shrink: str = None,
        event_alarm_picture_storage_shrink: str = None,
    ):
        self.event_alarm_mq_shrink = event_alarm_mq_shrink
        self.event_alarm_picture_storage_shrink = event_alarm_picture_storage_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_alarm_mq_shrink is not None:
            result['EventAlarmMq'] = self.event_alarm_mq_shrink
        if self.event_alarm_picture_storage_shrink is not None:
            result['EventAlarmPictureStorage'] = self.event_alarm_picture_storage_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventAlarmMq') is not None:
            self.event_alarm_mq_shrink = m.get('EventAlarmMq')
        if m.get('EventAlarmPictureStorage') is not None:
            self.event_alarm_picture_storage_shrink = m.get('EventAlarmPictureStorage')
        return self


class SetAiotStorageInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SetAiotStorageInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SetAiotStorageInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SetAiotStorageInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetStreamModeRequest(TeaModel):
    def __init__(
        self,
        device_id_list: str = None,
        stream_mode: str = None,
    ):
        self.device_id_list = device_id_list
        self.stream_mode = stream_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        if self.stream_mode is not None:
            result['StreamMode'] = self.stream_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        if m.get('StreamMode') is not None:
            self.stream_mode = m.get('StreamMode')
        return self


class SetStreamModeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SetStreamModeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SetStreamModeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SetStreamModeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartModelServiceRequest(TeaModel):
    def __init__(
        self,
        model_service_id: str = None,
    ):
        self.model_service_id = model_service_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_id is not None:
            result['ModelServiceId'] = self.model_service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceId') is not None:
            self.model_service_id = m.get('ModelServiceId')
        return self


class StartModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        model_service_instance_id: str = None,
        model_service_instance_name: int = None,
        model_service_status: str = None,
    ):
        self.model_service_instance_id = model_service_instance_id
        self.model_service_instance_name = model_service_instance_name
        self.model_service_status = model_service_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_instance_name is not None:
            result['ModelServiceInstanceName'] = self.model_service_instance_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceInstanceName') is not None:
            self.model_service_instance_name = m.get('ModelServiceInstanceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        return self


class StartModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: StartModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = StartModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class StartModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartStreamsRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        device_id_list: str = None,
    ):
        self.description = description
        # 全局编号,支持多个,英文逗号分隔
        self.device_id_list = device_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        return self


class StartStreamsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class StartStreamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartStreamsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartStreamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopModelServiceRequest(TeaModel):
    def __init__(
        self,
        model_service_id: str = None,
    ):
        self.model_service_id = model_service_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_id is not None:
            result['ModelServiceId'] = self.model_service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceId') is not None:
            self.model_service_id = m.get('ModelServiceId')
        return self


class StopModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        model_service_instance_id: str = None,
        model_service_instance_name: int = None,
        model_service_status: str = None,
    ):
        self.model_service_instance_id = model_service_instance_id
        self.model_service_instance_name = model_service_instance_name
        self.model_service_status = model_service_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_instance_name is not None:
            result['ModelServiceInstanceName'] = self.model_service_instance_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceInstanceName') is not None:
            self.model_service_instance_name = m.get('ModelServiceInstanceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        return self


class StopModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: StopModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = StopModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class StopModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopMonitorRequest(TeaModel):
    def __init__(
        self,
        algorithm_vendor: str = None,
        task_id: str = None,
    ):
        self.algorithm_vendor = algorithm_vendor
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_vendor is not None:
            result['AlgorithmVendor'] = self.algorithm_vendor
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmVendor') is not None:
            self.algorithm_vendor = m.get('AlgorithmVendor')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class StopMonitorResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class StopMonitorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopMonitorResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopMonitorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopStreamsRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        device_id_list: str = None,
    ):
        self.description = description
        # 全局编号,支持多个,英文逗号分隔
        self.device_id_list = device_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        return self


class StopStreamsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class StopStreamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopStreamsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopStreamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncDeviceTimeRequest(TeaModel):
    def __init__(
        self,
        device_sn: str = None,
        device_time_stamp: str = None,
    ):
        self.device_sn = device_sn
        self.device_time_stamp = device_time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.device_time_stamp is not None:
            result['DeviceTimeStamp'] = self.device_time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('DeviceTimeStamp') is not None:
            self.device_time_stamp = m.get('DeviceTimeStamp')
        return self


class SyncDeviceTimeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        ntpserver: str = None,
        request_id: str = None,
        retry_interval: str = None,
        sync_interval: str = None,
        time_stamp: str = None,
    ):
        self.code = code
        self.message = message
        self.ntpserver = ntpserver
        self.request_id = request_id
        self.retry_interval = retry_interval
        self.sync_interval = sync_interval
        self.time_stamp = time_stamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.ntpserver is not None:
            result['NTPServer'] = self.ntpserver
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.retry_interval is not None:
            result['RetryInterval'] = self.retry_interval
        if self.sync_interval is not None:
            result['SyncInterval'] = self.sync_interval
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NTPServer') is not None:
            self.ntpserver = m.get('NTPServer')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetryInterval') is not None:
            self.retry_interval = m.get('RetryInterval')
        if m.get('SyncInterval') is not None:
            self.sync_interval = m.get('SyncInterval')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class SyncDeviceTimeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SyncDeviceTimeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncDeviceTimeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TestCrossRequest(TeaModel):
    def __init__(
        self,
        data: str = None,
    ):
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        return self


class TestCrossResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: str = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            self.body = m.get('body')
        return self


class UnbindCorpGroupRequest(TeaModel):
    def __init__(
        self,
        corp_group_id: str = None,
        corp_id: str = None,
    ):
        self.corp_group_id = corp_group_id
        self.corp_id = corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_group_id is not None:
            result['CorpGroupId'] = self.corp_group_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpGroupId') is not None:
            self.corp_group_id = m.get('CorpGroupId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        return self


class UnbindCorpGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UnbindCorpGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnbindCorpGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnbindCorpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnbindDevicesRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_id: str = None,
        sub_device_id_list: str = None,
    ):
        self.corp_id = corp_id
        self.device_id = device_id
        self.sub_device_id_list = sub_device_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.sub_device_id_list is not None:
            result['SubDeviceIdList'] = self.sub_device_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('SubDeviceIdList') is not None:
            self.sub_device_id_list = m.get('SubDeviceIdList')
        return self


class UnbindDevicesResponseBodyDataSubDeviceList(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        sub_device_id: str = None,
    ):
        self.code = code
        self.message = message
        self.sub_device_id = sub_device_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.sub_device_id is not None:
            result['SubDeviceId'] = self.sub_device_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('SubDeviceId') is not None:
            self.sub_device_id = m.get('SubDeviceId')
        return self


class UnbindDevicesResponseBodyData(TeaModel):
    def __init__(
        self,
        sub_device_list: List[UnbindDevicesResponseBodyDataSubDeviceList] = None,
    ):
        self.sub_device_list = sub_device_list

    def validate(self):
        if self.sub_device_list:
            for k in self.sub_device_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SubDeviceList'] = []
        if self.sub_device_list is not None:
            for k in self.sub_device_list:
                result['SubDeviceList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sub_device_list = []
        if m.get('SubDeviceList') is not None:
            for k in m.get('SubDeviceList'):
                temp_model = UnbindDevicesResponseBodyDataSubDeviceList()
                self.sub_device_list.append(temp_model.from_map(k))
        return self


class UnbindDevicesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: UnbindDevicesResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UnbindDevicesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UnbindDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnbindDevicesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnbindDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnbindPersonRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        profile_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.profile_id = profile_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        return self


class UnbindPersonResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UnbindPersonResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnbindPersonResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnbindPersonResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnbindUserRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        user_id: int = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UnbindUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UnbindUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnbindUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnbindUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAiotDeviceRequestAiotDevice(TeaModel):
    def __init__(
        self,
        ipaddr: str = None,
        latitude: float = None,
        longitude: float = None,
        name: str = None,
        place: str = None,
        port: int = None,
    ):
        self.ipaddr = ipaddr
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.place = place
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ipaddr is not None:
            result['IPAddr'] = self.ipaddr
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.name is not None:
            result['Name'] = self.name
        if self.place is not None:
            result['Place'] = self.place
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IPAddr') is not None:
            self.ipaddr = m.get('IPAddr')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Place') is not None:
            self.place = m.get('Place')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class UpdateAiotDeviceRequest(TeaModel):
    def __init__(
        self,
        aiot_device: UpdateAiotDeviceRequestAiotDevice = None,
        id: str = None,
    ):
        self.aiot_device = aiot_device
        self.id = id

    def validate(self):
        if self.aiot_device:
            self.aiot_device.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_device is not None:
            result['AiotDevice'] = self.aiot_device.to_map()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotDevice') is not None:
            temp_model = UpdateAiotDeviceRequestAiotDevice()
            self.aiot_device = temp_model.from_map(m['AiotDevice'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class UpdateAiotDeviceShrinkRequest(TeaModel):
    def __init__(
        self,
        aiot_device_shrink: str = None,
        id: str = None,
    ):
        self.aiot_device_shrink = aiot_device_shrink
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_device_shrink is not None:
            result['AiotDevice'] = self.aiot_device_shrink
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotDevice') is not None:
            self.aiot_device_shrink = m.get('AiotDevice')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class UpdateAiotDeviceResponseBodyAiotDevice(TeaModel):
    def __init__(
        self,
        cap_direction: str = None,
        corp_id: str = None,
        device_id: str = None,
        device_type: str = None,
        firmware_version: str = None,
        ipaddr: str = None,
        ipv6addr: str = None,
        ipv_4gateway: str = None,
        ipv_4netmask: str = None,
        is_online: str = None,
        latitude: float = None,
        longitude: float = None,
        mac: str = None,
        manufacturer: str = None,
        model: str = None,
        monitor_area_desc: str = None,
        monitor_direction: str = None,
        name: str = None,
        org_code: str = None,
        owner_aps_id: str = None,
        password: str = None,
        place: str = None,
        place_code: str = None,
        port: int = None,
        serial_number: str = None,
        user_id: str = None,
    ):
        self.cap_direction = cap_direction
        self.corp_id = corp_id
        self.device_id = device_id
        self.device_type = device_type
        self.firmware_version = firmware_version
        self.ipaddr = ipaddr
        self.ipv6addr = ipv6addr
        self.ipv_4gateway = ipv_4gateway
        self.ipv_4netmask = ipv_4netmask
        self.is_online = is_online
        self.latitude = latitude
        self.longitude = longitude
        self.mac = mac
        self.manufacturer = manufacturer
        self.model = model
        self.monitor_area_desc = monitor_area_desc
        self.monitor_direction = monitor_direction
        self.name = name
        self.org_code = org_code
        self.owner_aps_id = owner_aps_id
        self.password = password
        self.place = place
        self.place_code = place_code
        self.port = port
        self.serial_number = serial_number
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cap_direction is not None:
            result['CapDirection'] = self.cap_direction
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.firmware_version is not None:
            result['FirmwareVersion'] = self.firmware_version
        if self.ipaddr is not None:
            result['IPAddr'] = self.ipaddr
        if self.ipv6addr is not None:
            result['IPV6Addr'] = self.ipv6addr
        if self.ipv_4gateway is not None:
            result['IPv4Gateway'] = self.ipv_4gateway
        if self.ipv_4netmask is not None:
            result['IPv4Netmask'] = self.ipv_4netmask
        if self.is_online is not None:
            result['IsOnline'] = self.is_online
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.mac is not None:
            result['MAC'] = self.mac
        if self.manufacturer is not None:
            result['Manufacturer'] = self.manufacturer
        if self.model is not None:
            result['Model'] = self.model
        if self.monitor_area_desc is not None:
            result['MonitorAreaDesc'] = self.monitor_area_desc
        if self.monitor_direction is not None:
            result['MonitorDirection'] = self.monitor_direction
        if self.name is not None:
            result['Name'] = self.name
        if self.org_code is not None:
            result['OrgCode'] = self.org_code
        if self.owner_aps_id is not None:
            result['OwnerApsID'] = self.owner_aps_id
        if self.password is not None:
            result['Password'] = self.password
        if self.place is not None:
            result['Place'] = self.place
        if self.place_code is not None:
            result['PlaceCode'] = self.place_code
        if self.port is not None:
            result['Port'] = self.port
        if self.serial_number is not None:
            result['SerialNumber'] = self.serial_number
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CapDirection') is not None:
            self.cap_direction = m.get('CapDirection')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('FirmwareVersion') is not None:
            self.firmware_version = m.get('FirmwareVersion')
        if m.get('IPAddr') is not None:
            self.ipaddr = m.get('IPAddr')
        if m.get('IPV6Addr') is not None:
            self.ipv6addr = m.get('IPV6Addr')
        if m.get('IPv4Gateway') is not None:
            self.ipv_4gateway = m.get('IPv4Gateway')
        if m.get('IPv4Netmask') is not None:
            self.ipv_4netmask = m.get('IPv4Netmask')
        if m.get('IsOnline') is not None:
            self.is_online = m.get('IsOnline')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('MAC') is not None:
            self.mac = m.get('MAC')
        if m.get('Manufacturer') is not None:
            self.manufacturer = m.get('Manufacturer')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('MonitorAreaDesc') is not None:
            self.monitor_area_desc = m.get('MonitorAreaDesc')
        if m.get('MonitorDirection') is not None:
            self.monitor_direction = m.get('MonitorDirection')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrgCode') is not None:
            self.org_code = m.get('OrgCode')
        if m.get('OwnerApsID') is not None:
            self.owner_aps_id = m.get('OwnerApsID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Place') is not None:
            self.place = m.get('Place')
        if m.get('PlaceCode') is not None:
            self.place_code = m.get('PlaceCode')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('SerialNumber') is not None:
            self.serial_number = m.get('SerialNumber')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UpdateAiotDeviceResponseBody(TeaModel):
    def __init__(
        self,
        aiot_device: UpdateAiotDeviceResponseBodyAiotDevice = None,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.aiot_device = aiot_device
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.aiot_device:
            self.aiot_device.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiot_device is not None:
            result['AiotDevice'] = self.aiot_device.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiotDevice') is not None:
            temp_model = UpdateAiotDeviceResponseBodyAiotDevice()
            self.aiot_device = temp_model.from_map(m['AiotDevice'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateAiotDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAiotDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAiotDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAiotPersonTableRequestPersonTable(TeaModel):
    def __init__(
        self,
        name: str = None,
        person_table_id: str = None,
        type: int = None,
        verification_model_list: List[int] = None,
    ):
        self.name = name
        self.person_table_id = person_table_id
        self.type = type
        self.verification_model_list = verification_model_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.type is not None:
            result['Type'] = self.type
        if self.verification_model_list is not None:
            result['VerificationModelList'] = self.verification_model_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('VerificationModelList') is not None:
            self.verification_model_list = m.get('VerificationModelList')
        return self


class UpdateAiotPersonTableRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table: UpdateAiotPersonTableRequestPersonTable = None,
    ):
        self.id = id
        self.person_table = person_table

    def validate(self):
        if self.person_table:
            self.person_table.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table is not None:
            result['PersonTable'] = self.person_table.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTable') is not None:
            temp_model = UpdateAiotPersonTableRequestPersonTable()
            self.person_table = temp_model.from_map(m['PersonTable'])
        return self


class UpdateAiotPersonTableResponseBodyPersonTable(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        face_num: int = None,
        last_change: str = None,
        name: str = None,
        person_num: int = None,
        person_table_id: str = None,
        total_person_num: int = None,
        type: int = None,
        verification_model_list: List[int] = None,
    ):
        self.device_id = device_id
        self.face_num = face_num
        self.last_change = last_change
        self.name = name
        self.person_num = person_num
        self.person_table_id = person_table_id
        self.total_person_num = total_person_num
        self.type = type
        self.verification_model_list = verification_model_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.face_num is not None:
            result['FaceNum'] = self.face_num
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.name is not None:
            result['Name'] = self.name
        if self.person_num is not None:
            result['PersonNum'] = self.person_num
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.total_person_num is not None:
            result['TotalPersonNum'] = self.total_person_num
        if self.type is not None:
            result['Type'] = self.type
        if self.verification_model_list is not None:
            result['VerificationModelList'] = self.verification_model_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('FaceNum') is not None:
            self.face_num = m.get('FaceNum')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PersonNum') is not None:
            self.person_num = m.get('PersonNum')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('TotalPersonNum') is not None:
            self.total_person_num = m.get('TotalPersonNum')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('VerificationModelList') is not None:
            self.verification_model_list = m.get('VerificationModelList')
        return self


class UpdateAiotPersonTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table: UpdateAiotPersonTableResponseBodyPersonTable = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table = person_table
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.person_table:
            self.person_table.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.person_table is not None:
            result['PersonTable'] = self.person_table.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PersonTable') is not None:
            temp_model = UpdateAiotPersonTableResponseBodyPersonTable()
            self.person_table = temp_model.from_map(m['PersonTable'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateAiotPersonTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAiotPersonTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAiotPersonTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList(TeaModel):
    def __init__(
        self,
        number: str = None,
        type: int = None,
    ):
        self.number = number
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        algorithm_version: str = None,
        feature_data: str = None,
        image_id: str = None,
        object_id: str = None,
        tab_ie_id: str = None,
        vendor: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.algorithm_version = algorithm_version
        self.feature_data = feature_data
        self.image_id = image_id
        self.object_id = object_id
        self.tab_ie_id = tab_ie_id
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithm_version is not None:
            result['AlgorithmVersion'] = self.algorithm_version
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.tab_ie_id is not None:
            result['TabIeId'] = self.tab_ie_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AlgorithmVersion') is not None:
            self.algorithm_version = m.get('AlgorithmVersion')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('TabIeId') is not None:
            self.tab_ie_id = m.get('TabIeId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateAiotPersonTableItemRequestPersonTableItemImageList(TeaModel):
    def __init__(
        self,
        data: str = None,
        device_id: str = None,
        event_sort: str = None,
        feature_info: UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo = None,
        file_format: str = None,
        height: int = None,
        image_id: str = None,
        shot_time: str = None,
        size: int = None,
        storage_path: str = None,
        type: str = None,
        width: int = None,
    ):
        self.data = data
        self.device_id = device_id
        self.event_sort = event_sort
        self.feature_info = feature_info
        self.file_format = file_format
        self.height = height
        self.image_id = image_id
        self.shot_time = shot_time
        self.size = size
        self.storage_path = storage_path
        self.type = type
        self.width = width

    def validate(self):
        if self.feature_info:
            self.feature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_sort is not None:
            result['EventSort'] = self.event_sort
        if self.feature_info is not None:
            result['FeatureInfo'] = self.feature_info.to_map()
        if self.file_format is not None:
            result['FileFormat'] = self.file_format
        if self.height is not None:
            result['Height'] = self.height
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.size is not None:
            result['Size'] = self.size
        if self.storage_path is not None:
            result['StoragePath'] = self.storage_path
        if self.type is not None:
            result['Type'] = self.type
        if self.width is not None:
            result['Width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventSort') is not None:
            self.event_sort = m.get('EventSort')
        if m.get('FeatureInfo') is not None:
            temp_model = UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo()
            self.feature_info = temp_model.from_map(m['FeatureInfo'])
        if m.get('FileFormat') is not None:
            self.file_format = m.get('FileFormat')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StoragePath') is not None:
            self.storage_path = m.get('StoragePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Width') is not None:
            self.width = m.get('Width')
        return self


class UpdateAiotPersonTableItemRequestPersonTableItem(TeaModel):
    def __init__(
        self,
        identification_list: List[UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList] = None,
        identification_num: int = None,
        image_list: List[UpdateAiotPersonTableItemRequestPersonTableItemImageList] = None,
        image_num: int = None,
        person_code: str = None,
        person_id: str = None,
        person_name: str = None,
        remarks: str = None,
    ):
        self.identification_list = identification_list
        self.identification_num = identification_num
        self.image_list = image_list
        self.image_num = image_num
        self.person_code = person_code
        self.person_id = person_id
        self.person_name = person_name
        self.remarks = remarks

    def validate(self):
        if self.identification_list:
            for k in self.identification_list:
                if k:
                    k.validate()
        if self.image_list:
            for k in self.image_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IdentificationList'] = []
        if self.identification_list is not None:
            for k in self.identification_list:
                result['IdentificationList'].append(k.to_map() if k else None)
        if self.identification_num is not None:
            result['IdentificationNum'] = self.identification_num
        result['ImageList'] = []
        if self.image_list is not None:
            for k in self.image_list:
                result['ImageList'].append(k.to_map() if k else None)
        if self.image_num is not None:
            result['ImageNum'] = self.image_num
        if self.person_code is not None:
            result['PersonCode'] = self.person_code
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_name is not None:
            result['PersonName'] = self.person_name
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.identification_list = []
        if m.get('IdentificationList') is not None:
            for k in m.get('IdentificationList'):
                temp_model = UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList()
                self.identification_list.append(temp_model.from_map(k))
        if m.get('IdentificationNum') is not None:
            self.identification_num = m.get('IdentificationNum')
        self.image_list = []
        if m.get('ImageList') is not None:
            for k in m.get('ImageList'):
                temp_model = UpdateAiotPersonTableItemRequestPersonTableItemImageList()
                self.image_list.append(temp_model.from_map(k))
        if m.get('ImageNum') is not None:
            self.image_num = m.get('ImageNum')
        if m.get('PersonCode') is not None:
            self.person_code = m.get('PersonCode')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonName') is not None:
            self.person_name = m.get('PersonName')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class UpdateAiotPersonTableItemRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        person_table_id: str = None,
        person_table_item: UpdateAiotPersonTableItemRequestPersonTableItem = None,
    ):
        self.id = id
        self.person_table_id = person_table_id
        self.person_table_item = person_table_item

    def validate(self):
        if self.person_table_item:
            self.person_table_item.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.person_table_item is not None:
            result['PersonTableItem'] = self.person_table_item.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('PersonTableItem') is not None:
            temp_model = UpdateAiotPersonTableItemRequestPersonTableItem()
            self.person_table_item = temp_model.from_map(m['PersonTableItem'])
        return self


class UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList(TeaModel):
    def __init__(
        self,
        number: str = None,
        type: int = None,
    ):
        self.number = number
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo(TeaModel):
    def __init__(
        self,
        algorithm_type: str = None,
        algorithm_version: str = None,
        feature_data: str = None,
        image_id: str = None,
        object_id: str = None,
        tab_ied: str = None,
        vendor: str = None,
    ):
        self.algorithm_type = algorithm_type
        self.algorithm_version = algorithm_version
        self.feature_data = feature_data
        self.image_id = image_id
        self.object_id = object_id
        self.tab_ied = tab_ied
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.algorithm_version is not None:
            result['AlgorithmVersion'] = self.algorithm_version
        if self.feature_data is not None:
            result['FeatureData'] = self.feature_data
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.tab_ied is not None:
            result['TabIed'] = self.tab_ied
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('AlgorithmVersion') is not None:
            self.algorithm_version = m.get('AlgorithmVersion')
        if m.get('FeatureData') is not None:
            self.feature_data = m.get('FeatureData')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('TabIed') is not None:
            self.tab_ied = m.get('TabIed')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList(TeaModel):
    def __init__(
        self,
        data: str = None,
        device_id: str = None,
        event_sort: str = None,
        feature_info: UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo = None,
        file_format: str = None,
        height: int = None,
        image_id: str = None,
        shot_time: str = None,
        size: int = None,
        storage_path: str = None,
        type: str = None,
        width: int = None,
    ):
        self.data = data
        self.device_id = device_id
        self.event_sort = event_sort
        self.feature_info = feature_info
        self.file_format = file_format
        self.height = height
        self.image_id = image_id
        self.shot_time = shot_time
        self.size = size
        self.storage_path = storage_path
        self.type = type
        self.width = width

    def validate(self):
        if self.feature_info:
            self.feature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_sort is not None:
            result['EventSort'] = self.event_sort
        if self.feature_info is not None:
            result['FeatureInfo'] = self.feature_info.to_map()
        if self.file_format is not None:
            result['FileFormat'] = self.file_format
        if self.height is not None:
            result['Height'] = self.height
        if self.image_id is not None:
            result['ImageId'] = self.image_id
        if self.shot_time is not None:
            result['ShotTime'] = self.shot_time
        if self.size is not None:
            result['Size'] = self.size
        if self.storage_path is not None:
            result['StoragePath'] = self.storage_path
        if self.type is not None:
            result['Type'] = self.type
        if self.width is not None:
            result['Width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventSort') is not None:
            self.event_sort = m.get('EventSort')
        if m.get('FeatureInfo') is not None:
            temp_model = UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo()
            self.feature_info = temp_model.from_map(m['FeatureInfo'])
        if m.get('FileFormat') is not None:
            self.file_format = m.get('FileFormat')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ImageId') is not None:
            self.image_id = m.get('ImageId')
        if m.get('ShotTime') is not None:
            self.shot_time = m.get('ShotTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StoragePath') is not None:
            self.storage_path = m.get('StoragePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Width') is not None:
            self.width = m.get('Width')
        return self


class UpdateAiotPersonTableItemResponseBodyPersonTableItem(TeaModel):
    def __init__(
        self,
        identification_list: List[UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList] = None,
        identification_num: int = None,
        image_list: List[UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList] = None,
        image_num: int = None,
        last_change: str = None,
        person_code: str = None,
        person_id: str = None,
        person_name: str = None,
        person_table_id: str = None,
        remarks: str = None,
    ):
        self.identification_list = identification_list
        self.identification_num = identification_num
        self.image_list = image_list
        self.image_num = image_num
        self.last_change = last_change
        self.person_code = person_code
        self.person_id = person_id
        self.person_name = person_name
        self.person_table_id = person_table_id
        self.remarks = remarks

    def validate(self):
        if self.identification_list:
            for k in self.identification_list:
                if k:
                    k.validate()
        if self.image_list:
            for k in self.image_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IdentificationList'] = []
        if self.identification_list is not None:
            for k in self.identification_list:
                result['IdentificationList'].append(k.to_map() if k else None)
        if self.identification_num is not None:
            result['IdentificationNum'] = self.identification_num
        result['ImageList'] = []
        if self.image_list is not None:
            for k in self.image_list:
                result['ImageList'].append(k.to_map() if k else None)
        if self.image_num is not None:
            result['ImageNum'] = self.image_num
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.person_code is not None:
            result['PersonCode'] = self.person_code
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_name is not None:
            result['PersonName'] = self.person_name
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.identification_list = []
        if m.get('IdentificationList') is not None:
            for k in m.get('IdentificationList'):
                temp_model = UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList()
                self.identification_list.append(temp_model.from_map(k))
        if m.get('IdentificationNum') is not None:
            self.identification_num = m.get('IdentificationNum')
        self.image_list = []
        if m.get('ImageList') is not None:
            for k in m.get('ImageList'):
                temp_model = UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList()
                self.image_list.append(temp_model.from_map(k))
        if m.get('ImageNum') is not None:
            self.image_num = m.get('ImageNum')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('PersonCode') is not None:
            self.person_code = m.get('PersonCode')
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonName') is not None:
            self.person_name = m.get('PersonName')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class UpdateAiotPersonTableItemResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        person_table_item: UpdateAiotPersonTableItemResponseBodyPersonTableItem = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.person_table_item = person_table_item
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.person_table_item:
            self.person_table_item.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.person_table_item is not None:
            result['PersonTableItem'] = self.person_table_item.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PersonTableItem') is not None:
            temp_model = UpdateAiotPersonTableItemResponseBodyPersonTableItem()
            self.person_table_item = temp_model.from_map(m['PersonTableItem'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateAiotPersonTableItemResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAiotPersonTableItemResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAiotPersonTableItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAiotVehicleTableItemRequestVehicleTableItem(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
        owner_name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        remarks: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time
        self.owner_name = owner_name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.remarks = remarks
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class UpdateAiotVehicleTableItemRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item: UpdateAiotVehicleTableItemRequestVehicleTableItem = None,
    ):
        self.id = id
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item = vehicle_table_item

    def validate(self):
        if self.vehicle_table_item:
            self.vehicle_table_item.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item is not None:
            result['VehicleTableItem'] = self.vehicle_table_item.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItem') is not None:
            temp_model = UpdateAiotVehicleTableItemRequestVehicleTableItem()
            self.vehicle_table_item = temp_model.from_map(m['VehicleTableItem'])
        return self


class UpdateAiotVehicleTableItemShrinkRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item_shrink: str = None,
    ):
        self.id = id
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_shrink = vehicle_table_item_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_shrink is not None:
            result['VehicleTableItem'] = self.vehicle_table_item_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItem') is not None:
            self.vehicle_table_item_shrink = m.get('VehicleTableItem')
        return self


class UpdateAiotVehicleTableItemResponseBodyVehicleTableItem(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
        owner_name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        remarks: str = None,
        vehicle_table_id: str = None,
        vehicle_table_item_id: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time
        self.owner_name = owner_name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.remarks = remarks
        self.vehicle_table_id = vehicle_table_id
        self.vehicle_table_item_id = vehicle_table_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.vehicle_table_id is not None:
            result['VehicleTableId'] = self.vehicle_table_id
        if self.vehicle_table_item_id is not None:
            result['VehicleTableItemId'] = self.vehicle_table_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('VehicleTableId') is not None:
            self.vehicle_table_id = m.get('VehicleTableId')
        if m.get('VehicleTableItemId') is not None:
            self.vehicle_table_item_id = m.get('VehicleTableItemId')
        return self


class UpdateAiotVehicleTableItemResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        vehicle_table_item: UpdateAiotVehicleTableItemResponseBodyVehicleTableItem = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.vehicle_table_item = vehicle_table_item

    def validate(self):
        if self.vehicle_table_item:
            self.vehicle_table_item.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.vehicle_table_item is not None:
            result['VehicleTableItem'] = self.vehicle_table_item.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('VehicleTableItem') is not None:
            temp_model = UpdateAiotVehicleTableItemResponseBodyVehicleTableItem()
            self.vehicle_table_item = temp_model.from_map(m['VehicleTableItem'])
        return self


class UpdateAiotVehicleTableItemResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAiotVehicleTableItemResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAiotVehicleTableItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateCorpRequest(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        description: str = None,
        icon_path: str = None,
        isv_sub_id: str = None,
        parent_corp_id: str = None,
    ):
        self.app_name = app_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.description = description
        self.icon_path = icon_path
        self.isv_sub_id = isv_sub_id
        self.parent_corp_id = parent_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.corp_name is not None:
            result['CorpName'] = self.corp_name
        if self.description is not None:
            result['Description'] = self.description
        if self.icon_path is not None:
            result['IconPath'] = self.icon_path
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_corp_id is not None:
            result['ParentCorpId'] = self.parent_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CorpName') is not None:
            self.corp_name = m.get('CorpName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('IconPath') is not None:
            self.icon_path = m.get('IconPath')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCorpId') is not None:
            self.parent_corp_id = m.get('ParentCorpId')
        return self


class UpdateCorpResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateCorpResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateCorpResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateCorpResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDataSourceRequest(TeaModel):
    def __init__(
        self,
        data_source_id: str = None,
        data_source_name: str = None,
        description: str = None,
        url: str = None,
    ):
        self.data_source_id = data_source_id
        self.data_source_name = data_source_name
        self.description = description
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.description is not None:
            result['Description'] = self.description
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class UpdateDataSourceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDataSourceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDataSourceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDeviceRequest(TeaModel):
    def __init__(
        self,
        bit_rate: str = None,
        corp_id: str = None,
        device_address: str = None,
        device_direction: str = None,
        device_name: str = None,
        device_resolution: str = None,
        device_site: str = None,
        device_type: str = None,
        gb_id: str = None,
        vendor: str = None,
    ):
        self.bit_rate = bit_rate
        self.corp_id = corp_id
        self.device_address = device_address
        self.device_direction = device_direction
        self.device_name = device_name
        self.device_resolution = device_resolution
        self.device_site = device_site
        self.device_type = device_type
        self.gb_id = gb_id
        self.vendor = vendor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bit_rate is not None:
            result['BitRate'] = self.bit_rate
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.device_direction is not None:
            result['DeviceDirection'] = self.device_direction
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_resolution is not None:
            result['DeviceResolution'] = self.device_resolution
        if self.device_site is not None:
            result['DeviceSite'] = self.device_site
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.gb_id is not None:
            result['GbId'] = self.gb_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BitRate') is not None:
            self.bit_rate = m.get('BitRate')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('DeviceDirection') is not None:
            self.device_direction = m.get('DeviceDirection')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceResolution') is not None:
            self.device_resolution = m.get('DeviceResolution')
        if m.get('DeviceSite') is not None:
            self.device_site = m.get('DeviceSite')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('GbId') is not None:
            self.gb_id = m.get('GbId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDeviceCaptureStrategyRequest(TeaModel):
    def __init__(
        self,
        device_code: str = None,
        device_type: str = None,
        monday_capture_strategy: str = None,
    ):
        # 设备通道
        self.device_code = device_code
        # 设备类型
        self.device_type = device_type
        # 周一图片抓去模式
        self.monday_capture_strategy = monday_capture_strategy

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_code is not None:
            result['DeviceCode'] = self.device_code
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.monday_capture_strategy is not None:
            result['MondayCaptureStrategy'] = self.monday_capture_strategy
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceCode') is not None:
            self.device_code = m.get('DeviceCode')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('MondayCaptureStrategy') is not None:
            self.monday_capture_strategy = m.get('MondayCaptureStrategy')
        return self


class UpdateDeviceCaptureStrategyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
    ):
        # 响应码
        self.code = code
        # 响应信息
        self.message = message
        # RequestId
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDeviceCaptureStrategyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDeviceCaptureStrategyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDeviceCaptureStrategyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays(TeaModel):
    def __init__(
        self,
        storage_days: int = None,
        storage_type: str = None,
    ):
        self.storage_days = storage_days
        self.storage_type = storage_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.storage_days is not None:
            result['StorageDays'] = self.storage_days
        if self.storage_type is not None:
            result['StorageType'] = self.storage_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StorageDays') is not None:
            self.storage_days = m.get('StorageDays')
        if m.get('StorageType') is not None:
            self.storage_type = m.get('StorageType')
        return self


class UpdateDevicesStorageRequestUpdateStorageRequests(TeaModel):
    def __init__(
        self,
        device_ids: str = None,
        storage_days: List[UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays] = None,
    ):
        self.device_ids = device_ids
        self.storage_days = storage_days

    def validate(self):
        if self.storage_days:
            for k in self.storage_days:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_ids is not None:
            result['DeviceIds'] = self.device_ids
        result['StorageDays'] = []
        if self.storage_days is not None:
            for k in self.storage_days:
                result['StorageDays'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceIds') is not None:
            self.device_ids = m.get('DeviceIds')
        self.storage_days = []
        if m.get('StorageDays') is not None:
            for k in m.get('StorageDays'):
                temp_model = UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays()
                self.storage_days.append(temp_model.from_map(k))
        return self


class UpdateDevicesStorageRequest(TeaModel):
    def __init__(
        self,
        update_storage_requests: List[UpdateDevicesStorageRequestUpdateStorageRequests] = None,
    ):
        self.update_storage_requests = update_storage_requests

    def validate(self):
        if self.update_storage_requests:
            for k in self.update_storage_requests:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['UpdateStorageRequests'] = []
        if self.update_storage_requests is not None:
            for k in self.update_storage_requests:
                result['UpdateStorageRequests'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.update_storage_requests = []
        if m.get('UpdateStorageRequests') is not None:
            for k in m.get('UpdateStorageRequests'):
                temp_model = UpdateDevicesStorageRequestUpdateStorageRequests()
                self.update_storage_requests.append(temp_model.from_map(k))
        return self


class UpdateDevicesStorageShrinkRequest(TeaModel):
    def __init__(
        self,
        update_storage_requests_shrink: str = None,
    ):
        self.update_storage_requests_shrink = update_storage_requests_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.update_storage_requests_shrink is not None:
            result['UpdateStorageRequests'] = self.update_storage_requests_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UpdateStorageRequests') is not None:
            self.update_storage_requests_shrink = m.get('UpdateStorageRequests')
        return self


class UpdateDevicesStorageResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateDevicesStorageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDevicesStorageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDevicesStorageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList(TeaModel):
    def __init__(
        self,
        person_id: str = None,
        person_table_id: str = None,
    ):
        self.person_id = person_id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class UpdateDoubleVerificationGroupRequestDoubleVerificationGroup(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        interval: int = None,
        member_number: int = None,
        person_id_list: List[UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList] = None,
    ):
        self.group_id = group_id
        self.interval = interval
        self.member_number = member_number
        self.person_id_list = person_id_list

    def validate(self):
        if self.person_id_list:
            for k in self.person_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.member_number is not None:
            result['MemberNumber'] = self.member_number
        result['PersonIdList'] = []
        if self.person_id_list is not None:
            for k in self.person_id_list:
                result['PersonIdList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('MemberNumber') is not None:
            self.member_number = m.get('MemberNumber')
        self.person_id_list = []
        if m.get('PersonIdList') is not None:
            for k in m.get('PersonIdList'):
                temp_model = UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList()
                self.person_id_list.append(temp_model.from_map(k))
        return self


class UpdateDoubleVerificationGroupRequest(TeaModel):
    def __init__(
        self,
        double_verification_group: UpdateDoubleVerificationGroupRequestDoubleVerificationGroup = None,
        id: str = None,
    ):
        self.double_verification_group = double_verification_group
        self.id = id

    def validate(self):
        if self.double_verification_group:
            self.double_verification_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.double_verification_group is not None:
            result['DoubleVerificationGroup'] = self.double_verification_group.to_map()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DoubleVerificationGroup') is not None:
            temp_model = UpdateDoubleVerificationGroupRequestDoubleVerificationGroup()
            self.double_verification_group = temp_model.from_map(m['DoubleVerificationGroup'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList(TeaModel):
    def __init__(
        self,
        person_id: str = None,
        person_table_id: str = None,
    ):
        self.person_id = person_id
        self.person_table_id = person_table_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.person_id is not None:
            result['PersonId'] = self.person_id
        if self.person_table_id is not None:
            result['PersonTableId'] = self.person_table_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PersonId') is not None:
            self.person_id = m.get('PersonId')
        if m.get('PersonTableId') is not None:
            self.person_table_id = m.get('PersonTableId')
        return self


class UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup(TeaModel):
    def __init__(
        self,
        device_id: str = None,
        enabled: str = None,
        group_id: str = None,
        interval: int = None,
        last_change: str = None,
        member_number: int = None,
        person_id_list: List[UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList] = None,
    ):
        self.device_id = device_id
        self.enabled = enabled
        self.group_id = group_id
        self.interval = interval
        self.last_change = last_change
        self.member_number = member_number
        self.person_id_list = person_id_list

    def validate(self):
        if self.person_id_list:
            for k in self.person_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.enabled is not None:
            result['Enabled'] = self.enabled
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.last_change is not None:
            result['LastChange'] = self.last_change
        if self.member_number is not None:
            result['MemberNumber'] = self.member_number
        result['PersonIdList'] = []
        if self.person_id_list is not None:
            for k in self.person_id_list:
                result['PersonIdList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Enabled') is not None:
            self.enabled = m.get('Enabled')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('LastChange') is not None:
            self.last_change = m.get('LastChange')
        if m.get('MemberNumber') is not None:
            self.member_number = m.get('MemberNumber')
        self.person_id_list = []
        if m.get('PersonIdList') is not None:
            for k in m.get('PersonIdList'):
                temp_model = UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList()
                self.person_id_list.append(temp_model.from_map(k))
        return self


class UpdateDoubleVerificationGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        double_verification_group: UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.double_verification_group = double_verification_group
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.double_verification_group:
            self.double_verification_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.double_verification_group is not None:
            result['DoubleVerificationGroup'] = self.double_verification_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DoubleVerificationGroup') is not None:
            temp_model = UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup()
            self.double_verification_group = temp_model.from_map(m['DoubleVerificationGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDoubleVerificationGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDoubleVerificationGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDoubleVerificationGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateModelServiceRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        model_service_id: str = None,
        model_service_name: str = None,
        qps_required: int = None,
    ):
        self.client_token = client_token
        self.model_service_id = model_service_id
        self.model_service_name = model_service_name
        self.qps_required = qps_required

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.model_service_id is not None:
            result['ModelServiceId'] = self.model_service_id
        if self.model_service_name is not None:
            result['ModelServiceName'] = self.model_service_name
        if self.qps_required is not None:
            result['QpsRequired'] = self.qps_required
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('ModelServiceId') is not None:
            self.model_service_id = m.get('ModelServiceId')
        if m.get('ModelServiceName') is not None:
            self.model_service_name = m.get('ModelServiceName')
        if m.get('QpsRequired') is not None:
            self.qps_required = m.get('QpsRequired')
        return self


class UpdateModelServiceResponseBodyData(TeaModel):
    def __init__(
        self,
        algorithm_code: str = None,
        model_service_instance_id: str = None,
        model_service_instance_name: str = None,
        model_service_status: str = None,
        qps_required: int = None,
    ):
        self.algorithm_code = algorithm_code
        self.model_service_instance_id = model_service_instance_id
        self.model_service_instance_name = model_service_instance_name
        self.model_service_status = model_service_status
        self.qps_required = qps_required

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_code is not None:
            result['AlgorithmCode'] = self.algorithm_code
        if self.model_service_instance_id is not None:
            result['ModelServiceInstanceId'] = self.model_service_instance_id
        if self.model_service_instance_name is not None:
            result['ModelServiceInstanceName'] = self.model_service_instance_name
        if self.model_service_status is not None:
            result['ModelServiceStatus'] = self.model_service_status
        if self.qps_required is not None:
            result['QpsRequired'] = self.qps_required
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmCode') is not None:
            self.algorithm_code = m.get('AlgorithmCode')
        if m.get('ModelServiceInstanceId') is not None:
            self.model_service_instance_id = m.get('ModelServiceInstanceId')
        if m.get('ModelServiceInstanceName') is not None:
            self.model_service_instance_name = m.get('ModelServiceInstanceName')
        if m.get('ModelServiceStatus') is not None:
            self.model_service_status = m.get('ModelServiceStatus')
        if m.get('QpsRequired') is not None:
            self.qps_required = m.get('QpsRequired')
        return self


class UpdateModelServiceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: UpdateModelServiceResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UpdateModelServiceResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateModelServiceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateModelServiceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateModelServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMonitorRequest(TeaModel):
    def __init__(
        self,
        algorithm_vendor: str = None,
        attribute_name: str = None,
        attribute_operate_type: str = None,
        attribute_value_list: str = None,
        corp_id: str = None,
        description: str = None,
        device_list: str = None,
        device_operate_type: str = None,
        notifier_app_secret: str = None,
        notifier_extend_values: str = None,
        notifier_time_out: int = None,
        notifier_type: str = None,
        notifier_url: str = None,
        pic_list: str = None,
        pic_operate_type: str = None,
        rule_expression: str = None,
        rule_name: str = None,
        task_id: str = None,
    ):
        self.algorithm_vendor = algorithm_vendor
        self.attribute_name = attribute_name
        self.attribute_operate_type = attribute_operate_type
        self.attribute_value_list = attribute_value_list
        self.corp_id = corp_id
        self.description = description
        self.device_list = device_list
        self.device_operate_type = device_operate_type
        self.notifier_app_secret = notifier_app_secret
        self.notifier_extend_values = notifier_extend_values
        self.notifier_time_out = notifier_time_out
        self.notifier_type = notifier_type
        self.notifier_url = notifier_url
        self.pic_list = pic_list
        self.pic_operate_type = pic_operate_type
        self.rule_expression = rule_expression
        self.rule_name = rule_name
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_vendor is not None:
            result['AlgorithmVendor'] = self.algorithm_vendor
        if self.attribute_name is not None:
            result['AttributeName'] = self.attribute_name
        if self.attribute_operate_type is not None:
            result['AttributeOperateType'] = self.attribute_operate_type
        if self.attribute_value_list is not None:
            result['AttributeValueList'] = self.attribute_value_list
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.description is not None:
            result['Description'] = self.description
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.device_operate_type is not None:
            result['DeviceOperateType'] = self.device_operate_type
        if self.notifier_app_secret is not None:
            result['NotifierAppSecret'] = self.notifier_app_secret
        if self.notifier_extend_values is not None:
            result['NotifierExtendValues'] = self.notifier_extend_values
        if self.notifier_time_out is not None:
            result['NotifierTimeOut'] = self.notifier_time_out
        if self.notifier_type is not None:
            result['NotifierType'] = self.notifier_type
        if self.notifier_url is not None:
            result['NotifierUrl'] = self.notifier_url
        if self.pic_list is not None:
            result['PicList'] = self.pic_list
        if self.pic_operate_type is not None:
            result['PicOperateType'] = self.pic_operate_type
        if self.rule_expression is not None:
            result['RuleExpression'] = self.rule_expression
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlgorithmVendor') is not None:
            self.algorithm_vendor = m.get('AlgorithmVendor')
        if m.get('AttributeName') is not None:
            self.attribute_name = m.get('AttributeName')
        if m.get('AttributeOperateType') is not None:
            self.attribute_operate_type = m.get('AttributeOperateType')
        if m.get('AttributeValueList') is not None:
            self.attribute_value_list = m.get('AttributeValueList')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('DeviceOperateType') is not None:
            self.device_operate_type = m.get('DeviceOperateType')
        if m.get('NotifierAppSecret') is not None:
            self.notifier_app_secret = m.get('NotifierAppSecret')
        if m.get('NotifierExtendValues') is not None:
            self.notifier_extend_values = m.get('NotifierExtendValues')
        if m.get('NotifierTimeOut') is not None:
            self.notifier_time_out = m.get('NotifierTimeOut')
        if m.get('NotifierType') is not None:
            self.notifier_type = m.get('NotifierType')
        if m.get('NotifierUrl') is not None:
            self.notifier_url = m.get('NotifierUrl')
        if m.get('PicList') is not None:
            self.pic_list = m.get('PicList')
        if m.get('PicOperateType') is not None:
            self.pic_operate_type = m.get('PicOperateType')
        if m.get('RuleExpression') is not None:
            self.rule_expression = m.get('RuleExpression')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateMonitorResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateMonitorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateMonitorResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMonitorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateProfileRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        catalog_id: int = None,
        corp_id: str = None,
        face_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        live_address: str = None,
        name: str = None,
        phone_no: str = None,
        plate_no: str = None,
        profile_id: int = None,
        scene_type: str = None,
    ):
        self.biz_id = biz_id
        self.catalog_id = catalog_id
        self.corp_id = corp_id
        self.face_url = face_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.live_address = live_address
        self.name = name
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.profile_id = profile_id
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_url is not None:
            result['FaceUrl'] = self.face_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.live_address is not None:
            result['LiveAddress'] = self.live_address
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceUrl') is not None:
            self.face_url = m.get('FaceUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('LiveAddress') is not None:
            self.live_address = m.get('LiveAddress')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class UpdateProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateProfileCatalogRequest(TeaModel):
    def __init__(
        self,
        catalog_id: int = None,
        catalog_name: str = None,
        corp_id: str = None,
        isv_sub_id: str = None,
    ):
        self.catalog_id = catalog_id
        self.catalog_name = catalog_name
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.catalog_name is not None:
            result['CatalogName'] = self.catalog_name
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CatalogName') is not None:
            self.catalog_name = m.get('CatalogName')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        return self


class UpdateProfileCatalogResponseBodyData(TeaModel):
    def __init__(
        self,
        catalog_id: int = None,
        catalog_name: str = None,
        isv_sub_id: str = None,
        parent_catalog_id: str = None,
        profile_count: int = None,
    ):
        self.catalog_id = catalog_id
        self.catalog_name = catalog_name
        self.isv_sub_id = isv_sub_id
        self.parent_catalog_id = parent_catalog_id
        self.profile_count = profile_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.catalog_id is not None:
            result['CatalogId'] = self.catalog_id
        if self.catalog_name is not None:
            result['CatalogName'] = self.catalog_name
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_catalog_id is not None:
            result['ParentCatalogId'] = self.parent_catalog_id
        if self.profile_count is not None:
            result['ProfileCount'] = self.profile_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CatalogId') is not None:
            self.catalog_id = m.get('CatalogId')
        if m.get('CatalogName') is not None:
            self.catalog_name = m.get('CatalogName')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentCatalogId') is not None:
            self.parent_catalog_id = m.get('ParentCatalogId')
        if m.get('ProfileCount') is not None:
            self.profile_count = m.get('ProfileCount')
        return self


class UpdateProfileCatalogResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: UpdateProfileCatalogResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UpdateProfileCatalogResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateProfileCatalogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateProfileCatalogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateProfileCatalogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSearchTableRequest(TeaModel):
    def __init__(
        self,
        search_table_id: str = None,
        search_table_name: str = None,
    ):
        self.search_table_id = search_table_id
        self.search_table_name = search_table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_table_id is not None:
            result['SearchTableId'] = self.search_table_id
        if self.search_table_name is not None:
            result['SearchTableName'] = self.search_table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SearchTableId') is not None:
            self.search_table_id = m.get('SearchTableId')
        if m.get('SearchTableName') is not None:
            self.search_table_name = m.get('SearchTableName')
        return self


class UpdateSearchTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateSearchTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateSearchTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSearchTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateUserRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        age: int = None,
        attachment: str = None,
        biz_id: str = None,
        corp_id: str = None,
        face_image_content: str = None,
        face_image_url: str = None,
        gender: int = None,
        id_number: str = None,
        isv_sub_id: str = None,
        phone_no: str = None,
        plate_no: str = None,
        user_group_id: int = None,
        user_id: int = None,
        user_name: str = None,
    ):
        self.address = address
        self.age = age
        self.attachment = attachment
        self.biz_id = biz_id
        self.corp_id = corp_id
        self.face_image_content = face_image_content
        self.face_image_url = face_image_url
        self.gender = gender
        self.id_number = id_number
        self.isv_sub_id = isv_sub_id
        self.phone_no = phone_no
        self.plate_no = plate_no
        self.user_group_id = user_group_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.age is not None:
            result['Age'] = self.age
        if self.attachment is not None:
            result['Attachment'] = self.attachment
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.face_image_content is not None:
            result['FaceImageContent'] = self.face_image_content
        if self.face_image_url is not None:
            result['FaceImageUrl'] = self.face_image_url
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.id_number is not None:
            result['IdNumber'] = self.id_number
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.phone_no is not None:
            result['PhoneNo'] = self.phone_no
        if self.plate_no is not None:
            result['PlateNo'] = self.plate_no
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Age') is not None:
            self.age = m.get('Age')
        if m.get('Attachment') is not None:
            self.attachment = m.get('Attachment')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('FaceImageContent') is not None:
            self.face_image_content = m.get('FaceImageContent')
        if m.get('FaceImageUrl') is not None:
            self.face_image_url = m.get('FaceImageUrl')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('IdNumber') is not None:
            self.id_number = m.get('IdNumber')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('PhoneNo') is not None:
            self.phone_no = m.get('PhoneNo')
        if m.get('PlateNo') is not None:
            self.plate_no = m.get('PlateNo')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class UpdateUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateUserGroupRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_sub_id: str = None,
        user_group_id: int = None,
        user_group_name: str = None,
    ):
        self.corp_id = corp_id
        self.isv_sub_id = isv_sub_id
        self.user_group_id = user_group_id
        self.user_group_name = user_group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_group_name is not None:
            result['UserGroupName'] = self.user_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserGroupName') is not None:
            self.user_group_name = m.get('UserGroupName')
        return self


class UpdateUserGroupResponseBodyData(TeaModel):
    def __init__(
        self,
        isv_sub_id: str = None,
        parent_user_group_id: str = None,
        user_count: int = None,
        user_group_id: int = None,
        user_group_name: str = None,
    ):
        self.isv_sub_id = isv_sub_id
        self.parent_user_group_id = parent_user_group_id
        self.user_count = user_count
        self.user_group_id = user_group_id
        self.user_group_name = user_group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_sub_id is not None:
            result['IsvSubId'] = self.isv_sub_id
        if self.parent_user_group_id is not None:
            result['ParentUserGroupId'] = self.parent_user_group_id
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.user_group_id is not None:
            result['UserGroupId'] = self.user_group_id
        if self.user_group_name is not None:
            result['UserGroupName'] = self.user_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsvSubId') is not None:
            self.isv_sub_id = m.get('IsvSubId')
        if m.get('ParentUserGroupId') is not None:
            self.parent_user_group_id = m.get('ParentUserGroupId')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('UserGroupId') is not None:
            self.user_group_id = m.get('UserGroupId')
        if m.get('UserGroupName') is not None:
            self.user_group_name = m.get('UserGroupName')
        return self


class UpdateUserGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: UpdateUserGroupResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UpdateUserGroupResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateUserGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateUserGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateUserGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateWatchPolicyRequest(TeaModel):
    def __init__(
        self,
        item_match_type: str = None,
        similarity_threshold: float = None,
        target_type: str = None,
        watch_mode: str = None,
        watch_policy_id: str = None,
        watch_policy_name: str = None,
    ):
        self.item_match_type = item_match_type
        self.similarity_threshold = similarity_threshold
        self.target_type = target_type
        self.watch_mode = watch_mode
        self.watch_policy_id = watch_policy_id
        self.watch_policy_name = watch_policy_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.item_match_type is not None:
            result['ItemMatchType'] = self.item_match_type
        if self.similarity_threshold is not None:
            result['SimilarityThreshold'] = self.similarity_threshold
        if self.target_type is not None:
            result['TargetType'] = self.target_type
        if self.watch_mode is not None:
            result['WatchMode'] = self.watch_mode
        if self.watch_policy_id is not None:
            result['WatchPolicyId'] = self.watch_policy_id
        if self.watch_policy_name is not None:
            result['WatchPolicyName'] = self.watch_policy_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ItemMatchType') is not None:
            self.item_match_type = m.get('ItemMatchType')
        if m.get('SimilarityThreshold') is not None:
            self.similarity_threshold = m.get('SimilarityThreshold')
        if m.get('TargetType') is not None:
            self.target_type = m.get('TargetType')
        if m.get('WatchMode') is not None:
            self.watch_mode = m.get('WatchMode')
        if m.get('WatchPolicyId') is not None:
            self.watch_policy_id = m.get('WatchPolicyId')
        if m.get('WatchPolicyName') is not None:
            self.watch_policy_name = m.get('WatchPolicyName')
        return self


class UpdateWatchPolicyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateWatchPolicyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateWatchPolicyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateWatchPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateWatchTaskRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        device_list: str = None,
        message_receiver: str = None,
        schedule_cycle_dates: str = None,
        schedule_times: str = None,
        schedule_type: str = None,
        task_name: str = None,
        watch_policy_ids: str = None,
        watch_task_id: str = None,
    ):
        self.description = description
        self.device_list = device_list
        self.message_receiver = message_receiver
        self.schedule_cycle_dates = schedule_cycle_dates
        self.schedule_times = schedule_times
        self.schedule_type = schedule_type
        self.task_name = task_name
        self.watch_policy_ids = watch_policy_ids
        self.watch_task_id = watch_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.device_list is not None:
            result['DeviceList'] = self.device_list
        if self.message_receiver is not None:
            result['MessageReceiver'] = self.message_receiver
        if self.schedule_cycle_dates is not None:
            result['ScheduleCycleDates'] = self.schedule_cycle_dates
        if self.schedule_times is not None:
            result['ScheduleTimes'] = self.schedule_times
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.watch_policy_ids is not None:
            result['WatchPolicyIds'] = self.watch_policy_ids
        if self.watch_task_id is not None:
            result['WatchTaskId'] = self.watch_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceList') is not None:
            self.device_list = m.get('DeviceList')
        if m.get('MessageReceiver') is not None:
            self.message_receiver = m.get('MessageReceiver')
        if m.get('ScheduleCycleDates') is not None:
            self.schedule_cycle_dates = m.get('ScheduleCycleDates')
        if m.get('ScheduleTimes') is not None:
            self.schedule_times = m.get('ScheduleTimes')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('WatchPolicyIds') is not None:
            self.watch_policy_ids = m.get('WatchPolicyIds')
        if m.get('WatchTaskId') is not None:
            self.watch_task_id = m.get('WatchTaskId')
        return self


class UpdateWatchTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        # Id of the request
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateWatchTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateWatchTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateWatchTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadFileRequest(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        data_source_id: str = None,
        file_alias_name: str = None,
        file_content: str = None,
        file_name: str = None,
        file_path: str = None,
        file_type: str = None,
        md5: str = None,
    ):
        self.corp_id = corp_id
        self.data_source_id = data_source_id
        self.file_alias_name = file_alias_name
        self.file_content = file_content
        self.file_name = file_name
        self.file_path = file_path
        self.file_type = file_type
        self.md5 = md5

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.file_alias_name is not None:
            result['FileAliasName'] = self.file_alias_name
        if self.file_content is not None:
            result['FileContent'] = self.file_content
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.file_type is not None:
            result['FileType'] = self.file_type
        if self.md5 is not None:
            result['MD5'] = self.md5
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('FileAliasName') is not None:
            self.file_alias_name = m.get('FileAliasName')
        if m.get('FileContent') is not None:
            self.file_content = m.get('FileContent')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('FileType') is not None:
            self.file_type = m.get('FileType')
        if m.get('MD5') is not None:
            self.md5 = m.get('MD5')
        return self


class UploadFileResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        oss_path: str = None,
        source_id: str = None,
    ):
        self.oss_path = oss_path
        self.source_id = source_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        return self


class UploadFileResponseBodyData(TeaModel):
    def __init__(
        self,
        records: List[UploadFileResponseBodyDataRecords] = None,
    ):
        self.records = records

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = UploadFileResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        return self


class UploadFileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: UploadFileResponseBodyData = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UploadFileResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UploadFileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UploadFileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadFileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadImageRequest(TeaModel):
    def __init__(
        self,
        image_url: str = None,
    ):
        self.image_url = image_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image_url is not None:
            result['ImageUrl'] = self.image_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ImageUrl') is not None:
            self.image_url = m.get('ImageUrl')
        return self


class UploadImageResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UploadImageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UploadImageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadImageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class VerifyDeviceRequest(TeaModel):
    def __init__(
        self,
        device_address: str = None,
        file_path: str = None,
        nvr_existed: int = None,
    ):
        # 设备安装地址
        self.device_address = device_address
        # OSS路径
        self.file_path = file_path
        self.nvr_existed = nvr_existed

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_address is not None:
            result['DeviceAddress'] = self.device_address
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.nvr_existed is not None:
            result['NvrExisted'] = self.nvr_existed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DeviceAddress') is not None:
            self.device_address = m.get('DeviceAddress')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('NvrExisted') is not None:
            self.nvr_existed = m.get('NvrExisted')
        return self


class VerifyDeviceResponseBodyData(TeaModel):
    def __init__(
        self,
        code: str = None,
        id: str = None,
        message: str = None,
        original_gb_id: str = None,
        row_number: int = None,
        suggest_gb_id: str = None,
    ):
        # 格式错误或国标冲突的错误码，0为成功，-1为失败
        self.code = code
        # Excel中的序号列的值
        self.id = id
        # 格式错误或国标冲突提示
        self.message = message
        # 原始国标编码
        self.original_gb_id = original_gb_id
        # 记录所在行号
        self.row_number = row_number
        # 建议的国标编码
        self.suggest_gb_id = suggest_gb_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.id is not None:
            result['Id'] = self.id
        if self.message is not None:
            result['Message'] = self.message
        if self.original_gb_id is not None:
            result['OriginalGbId'] = self.original_gb_id
        if self.row_number is not None:
            result['RowNumber'] = self.row_number
        if self.suggest_gb_id is not None:
            result['SuggestGbId'] = self.suggest_gb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OriginalGbId') is not None:
            self.original_gb_id = m.get('OriginalGbId')
        if m.get('RowNumber') is not None:
            self.row_number = m.get('RowNumber')
        if m.get('SuggestGbId') is not None:
            self.suggest_gb_id = m.get('SuggestGbId')
        return self


class VerifyDeviceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[VerifyDeviceResponseBodyData] = None,
        message: str = None,
        request_id: str = None,
    ):
        # 响应码
        self.code = code
        self.data = data
        # 响应码描述
        self.message = message
        # Id of the request
        self.request_id = request_id

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = VerifyDeviceResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class VerifyDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: VerifyDeviceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = VerifyDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


