{"version":3,"sources":["apis/Dashboard.js","components/PanelLoader.js","components/ErrorLoader.js","components/BaseTable.js","components/DashTable.js","index.js"],"names":["a","axios","get","api","console","log","data","defaults","xsrfHeaderName","PanelLoader","Panel","Body","className","ErrorLoader","xmlns","width","height","fill","class","viewBox","d","colourStyles","option","styles","color","MyTooltip","message","Tooltip","id","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","textColumnFilter","count","length","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","options","React","useMemo","Set","forEach","row","values","add","title","label","defaultValue","concat","map","o","i","defaultPropGetter","BaseTable","isLoading","isFetching","error","columns","asyncExpandFunction","getRowProps","defaultColumn","Filter","filterTypes","text","rows","ids","filter","some","rowValue","name","hasOwnProperty","originalSubRows","reduce","p","r","ob","split","prop","toLowerCase","includes","useTable","initialState","pageSize","useFilters","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","visibleColumns","state","pageIndex","Table","striped","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canSort","isSorted","isSortedDesc","Glyphicon","glyph","canFilter","rowProps","cells","cell","style","verticalAlign","getCellProps","isExpanded","ButtonToolbar","ButtonGroup","Button","bsStyle","onClick","disabled","active","SplitButton","onSelect","Number","MenuItem","eventKey","OverlayTrigger","placement","overlay","Date","toLocaleString","Dashboard","useQuery","loadDash","Header","accessor","Cell","props","whiteSpace","service","c","str","TimeAgo","addDefaultLocale","en","queryClient","QueryClient","InvoicesView","client","appDiv","document","getElementById"],"mappings":"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","file":"static/js/main.fd3c2074.chunk.js","sourcesContent":["import axios from \"axios\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nexport async function loadDash() {\n  const api = await axios.get(`/indy/api/structure/list`);\n  console.log(`get structure list in api`);\n  console.log(api);\n  return api.data;\n}\n","import React from \"react\";\nimport { Bars } from \"@agney/react-loading\";\nimport { Panel } from \"react-bootstrap\";\nexport const PanelLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <Bars className=\"spinner-size\" />\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Panel } from \"react-bootstrap\";\nimport \"./PanelLoader.css\";\n\nexport const ErrorLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <div className=\"text-center\">\n        <div className=\"error-size bottom-text\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"100\"\n            height=\"100\"\n            fill=\"currentColor\"\n            class=\"bi bi-exclamation-triangle error-anim\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z\" />\n            <path d=\"M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-margin\">Error Loading Component</h3>\n      </div>\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Button, Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport {\n  useTable,\n  useFilters,\n  usePagination,\n  useSortBy,\n  useExpanded,\n} from \"react-table\";\nimport Select from \"react-select\";\nimport { Bars } from \"@agney/react-loading\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Glyphicon,\n  MenuItem,\n  SplitButton,\n  Table,\n} from \"react-bootstrap\";\nimport \"./BaseTable.css\";\nimport { ErrorLoader } from \"../components/ErrorLoader\";\n\nexport function SubRows({\n  row,\n  rowProps,\n  visibleColumns,\n  data,\n  error,\n  isLoading,\n}) {\n  if (isLoading) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Loading...</td>\n      </tr>\n    );\n  }\n  if (error) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Unable to Fetch from API!</td>\n      </tr>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Empty!</td>\n      </tr>\n    );\n  }\n\n  // error handling here :)\n\n  return (\n    <>\n      {data.map((x, i) => {\n        return (\n          <tr {...rowProps} key={`${rowProps.key}-expanded-${i}`}>\n            {row.cells.map((cell) => {\n              return (\n                <td {...cell.getCellProps()}>\n                  {cell.render(cell.column.SubCell ? \"SubCell\" : \"Cell\", {\n                    value: cell.column.accessor && cell.column.accessor(x, i),\n                    row: { ...row, original: x },\n                  })}\n                </td>\n              );\n            })}\n          </tr>\n        );\n      })}\n    </>\n  );\n}\n\nexport const colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\nfunction MyTooltip({ message }) {\n  return <Tooltip id=\"character_tooltip\">{message}</Tooltip>;\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  return <></>;\n}\n\nexport function textColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      className=\"form-control\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { setFilter, filterValue, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    if (!preFilteredRows) {\n      return [];\n    }\n    preFilteredRows.forEach((row) => {\n      if (row.values[id] !== null) {\n        if (typeof row.values[id] === \"object\") {\n          options.add(row.values[id][\"name\"]);\n        } else {\n          options.add(row.values[id]);\n        }\n      }\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      key={filterValue}\n      title={filterValue}\n      onChange={(e) => setFilter(e.value)}\n      value={{ label: filterValue || \"All\" }}\n      defaultValue={{ label: \"All\" }}\n      styles={colourStyles}\n      options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n        options.map((o, i) => {\n          return { id: i, value: o, label: o };\n        })\n      )}\n    />\n  );\n}\n\nconst defaultPropGetter = () => ({});\n\nfunction strToKey(keyString, ob) {\n  return keyString.split(\".\").reduce(function (p, prop) {\n    return p[prop];\n  }, ob);\n}\n\nexport const BaseTable = ({\n  isLoading,\n  isFetching,\n  data,\n  error,\n  columns,\n  asyncExpandFunction,\n  getRowProps = defaultPropGetter,\n}) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, ids, filterValue) => {\n        return rows.filter((row) => {\n          return ids.some((id) => {\n            if (!filterValue) {\n              return true;\n            } else {\n              let rowValue = row.values[id];\n              if (typeof rowValue === \"object\") {\n                rowValue = rowValue.name;\n              }\n              if (row.hasOwnProperty(\"originalSubRows\")) {\n                rowValue += row.originalSubRows.reduce((p, r) => {\n                  return (p += \" \" + strToKey(id, r));\n                }, \"\");\n              }\n              return rowValue\n                ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                : false;\n            }\n          });\n        });\n      },\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    visibleColumns,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      initialState: { pageSize: 20 },\n    },\n    useFilters,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  if (isLoading)\n    return (\n      <div className=\"col-xs-12 text-center\">\n        <Bars className=\"spinner-size\" />\n      </div>\n    );\n\n  if (error) return <ErrorLoader />;\n\n  return (\n    <>\n      <Table striped>\n        <thead {...getTableProps()}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span className=\"pull-right\">\n                    {column.canSort ? (\n                      column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <Glyphicon glyph=\"sort-by-attributes-alt\" />\n                        ) : (\n                          <Glyphicon glyph=\"sort-by-attributes\" />\n                        )\n                      ) : (\n                        <Glyphicon glyph=\"sort\" />\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            const rowProps = getRowProps(row);\n            return (\n              <>\n                <tr {...row.getRowProps(rowProps)}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        style={{ verticalAlign: \"middle\" }}\n                        {...cell.getCellProps()}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n                {row.isExpanded &&\n                  asyncExpandFunction({ row, rowProps, visibleColumns })}\n              </>\n            );\n          })}\n        </tbody>\n      </Table>\n      <div className=\"pagination pull-right\">\n        <ButtonToolbar>\n          <ButtonGroup>\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"step-backward\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"triangle-left\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"triangle-right\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"step-forward\" />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <Button active bsStyle=\"success\">\n              {\"Page Size:\"}\n            </Button>{\" \"}\n            <SplitButton\n              id=\"pageSizeDropdown\"\n              bsStyle=\"success\"\n              title={pageSize}\n              onSelect={(e) => {\n                setPageSize(Number(e));\n              }}\n            >\n              {[20, 50, 100, 1000000].map((pageSize) => (\n                <MenuItem\n                  id={pageSize}\n                  key={pageSize}\n                  eventKey={pageSize}\n                  value={pageSize}\n                >\n                  Show {pageSize}\n                </MenuItem>\n              ))}\n            </SplitButton>\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n      <div className=\"pagination pull-left\">\n        <ButtonGroup>\n          <Button active bsStyle=\"info\">\n            {\n              <>\n                {pageOptions.length > 0 ? (\n                  <>\n                    Page{\" \"}\n                    <strong>\n                      {pageIndex + 1} of {pageOptions.length}\n                    </strong>\n                  </>\n                ) : (\n                  <>\n                    Page <strong>- of -</strong>\n                  </>\n                )}\n              </>\n            }\n          </Button>{\" \"}\n          {isFetching ? (\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={MyTooltip({ message: \"Refreshing Data\" })}\n            >\n              <Button bsStyle=\"info\">\n                <Glyphicon\n                  className=\"glyphicon-refresh-animate\"\n                  glyph=\"refresh\"\n                />\n              </Button>\n            </OverlayTrigger>\n          ) : (\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={MyTooltip({\n                message: \"Data Loaded: \" + new Date().toLocaleString(),\n              })}\n            >\n              <Button bsStyle=\"info\">\n                <Glyphicon glyph=\"ok\" />\n              </Button>\n            </OverlayTrigger>\n          )}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Panel, Label } from \"react-bootstrap\";\nimport { useQuery } from \"react-query\";\nimport { loadDash } from \"../apis/Dashboard\";\nimport { PanelLoader } from \"./PanelLoader\";\nimport { BaseTable, textColumnFilter, colourStyles, SelectColumnFilter } from \"./BaseTable\";\nimport Select from \"react-select\";\n\nexport const Dashboard = () => {\n  const { isLoading, error, data, isFetching } = useQuery([\"dashboard\"], () => loadDash());\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Type\",\n        accessor: \"type\",\n        Filter: SelectColumnFilter,\n        filter: \"includes\"\n      },\n      {\n        Header: \"Structure\",\n        accessor: \"name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            {props.value}\n          </div>\n        ),\n\n      },\n      {\n        Header: \"Services\",\n        accessor: \"services\",\n        Filter: ({\n          column: { setFilter, filterValue, preFilteredRows, id },\n        }) => {\n          const options = React.useMemo(() => {\n            const options = new Set();\n            if (!preFilteredRows) {\n              return [];\n            }\n            preFilteredRows.forEach((row) => {\n              if (row.values[id] !== null) {\n                row.values[id].forEach((service) => {\n                  options.add(service);\n                });\n              }\n            });\n            return [...options.values()];\n          }, [id, preFilteredRows]);\n          return (\n            <Select\n              key={filterValue}\n              title={filterValue}\n              onChange={(e) => setFilter(e.value)}\n              value={{ label: filterValue || \"All\" }}\n              defaultValue={{ label: \"All\" }}\n              styles={colourStyles}\n              options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n                options.map((o, i) => {\n                  return { id: i, value: o, label: o };\n                })\n              )}\n            />\n          );\n        },\n        filter: (rows, ids, filterValue) => {\n          return rows.filter((row) => {\n            return ids.some((id) => {\n              if (!filterValue) {\n                return true;\n              } else {\n                let rowValue = row.values[id].reduce((p, c) => {\n                  return p + \"  \" + c;\n                }, \"\");\n                return rowValue\n                  ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                  : false;\n              }\n            });\n          });\n        },\n        Cell: (props) =>\n          props.value ? (\n            <div className=\"text-center\">\n              {props.value.map((service) => {\n                return (\n                  <p\n                    className=\"padded-label\"\n                  >\n                    {service}\n                  </p>\n                );\n              })}\n            </div>\n          ) : (\n            <></>\n          ),\n      },\n      {\n        Header: \"Rigs\",\n        accessor: \"rigs\",\n        Filter: textColumnFilter,\n        filter: (rows, ids, filterValue) => {\n          return rows.filter((row) => {\n            return ids.some((id) => {\n              if (!filterValue) {\n                return true;\n              } else {\n                let rowValue = row.values[id].reduce((p, c) => {\n                  return p + \"  \" + c;\n                }, \"\");\n                return rowValue\n                  ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                  : false;\n              }\n            });\n          });\n        },\n        Cell: (props) => (\n          <div>\n            {props.value.map(str => <p>{str}</p>)}\n          </div>\n        ),\n\n      },\n    ],\n    []\n  );\n\n  if (isLoading) return <PanelLoader />;\n\n  if (error) return <div></div>;\n\n  return (\n    <Panel.Body>\n      <BaseTable {...{ isLoading, data, columns, error, isFetching }} />\n    </Panel.Body>\n  );\n};\n","import TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Dashboard }  from \"./components/DashTable\";\nimport \"./index.css\";\n\nTimeAgo.addDefaultLocale(en);\n\nconst queryClient = new QueryClient();\n\nconst InvoicesView = () => {    \n  return (\n    <QueryClientProvider client={queryClient}>\n      <Dashboard />\n    </QueryClientProvider>\n  );\n};\n\nconst appDiv = document.getElementById(\"root\");\nrender(<InvoicesView />, appDiv);\n"],"sourceRoot":""}