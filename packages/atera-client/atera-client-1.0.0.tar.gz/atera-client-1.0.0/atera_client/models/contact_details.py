# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class ContactDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "company_name": "str",
        "contact_first_name": "str",
        "contact_last_name": "str",
        "contact_full_name": "str",
        "address": "str",
        "state": "str",
        "country": "str",
        "zip_code": "int",
        "city": "str",
        "phone": "str",
        "email": "str",
    }

    attribute_map = {
        "company_name": "CompanyName",
        "contact_first_name": "ContactFirstName",
        "contact_last_name": "ContactLastName",
        "contact_full_name": "ContactFullName",
        "address": "Address",
        "state": "State",
        "country": "Country",
        "zip_code": "ZipCode",
        "city": "City",
        "phone": "Phone",
        "email": "Email",
    }

    def __init__(
        self,
        company_name=None,
        contact_first_name=None,
        contact_last_name=None,
        contact_full_name=None,
        address=None,
        state=None,
        country=None,
        zip_code=None,
        city=None,
        phone=None,
        email=None,
        _configuration=None,
    ):  # noqa: E501
        """ContactDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company_name = None
        self._contact_first_name = None
        self._contact_last_name = None
        self._contact_full_name = None
        self._address = None
        self._state = None
        self._country = None
        self._zip_code = None
        self._city = None
        self._phone = None
        self._email = None
        self.discriminator = None

        if company_name is not None:
            self.company_name = company_name
        if contact_first_name is not None:
            self.contact_first_name = contact_first_name
        if contact_last_name is not None:
            self.contact_last_name = contact_last_name
        if contact_full_name is not None:
            self.contact_full_name = contact_full_name
        if address is not None:
            self.address = address
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email

    @property
    def company_name(self):
        """Gets the company_name of this ContactDetails.  # noqa: E501


        :return: The company_name of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ContactDetails.


        :param company_name: The company_name of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this ContactDetails.  # noqa: E501


        :return: The contact_first_name of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this ContactDetails.


        :param contact_first_name: The contact_first_name of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this ContactDetails.  # noqa: E501


        :return: The contact_last_name of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this ContactDetails.


        :param contact_last_name: The contact_last_name of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._contact_last_name = contact_last_name

    @property
    def contact_full_name(self):
        """Gets the contact_full_name of this ContactDetails.  # noqa: E501


        :return: The contact_full_name of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._contact_full_name

    @contact_full_name.setter
    def contact_full_name(self, contact_full_name):
        """Sets the contact_full_name of this ContactDetails.


        :param contact_full_name: The contact_full_name of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._contact_full_name = contact_full_name

    @property
    def address(self):
        """Gets the address of this ContactDetails.  # noqa: E501


        :return: The address of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactDetails.


        :param address: The address of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def state(self):
        """Gets the state of this ContactDetails.  # noqa: E501


        :return: The state of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContactDetails.


        :param state: The state of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this ContactDetails.  # noqa: E501


        :return: The country of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactDetails.


        :param country: The country of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def zip_code(self):
        """Gets the zip_code of this ContactDetails.  # noqa: E501


        :return: The zip_code of this ContactDetails.  # noqa: E501
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ContactDetails.


        :param zip_code: The zip_code of this ContactDetails.  # noqa: E501
        :type: int
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this ContactDetails.  # noqa: E501


        :return: The city of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactDetails.


        :param city: The city of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def phone(self):
        """Gets the phone of this ContactDetails.  # noqa: E501


        :return: The phone of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactDetails.


        :param phone: The phone of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this ContactDetails.  # noqa: E501


        :return: The email of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetails.


        :param email: The email of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ContactDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactDetails):
            return True

        return self.to_dict() != other.to_dict()
