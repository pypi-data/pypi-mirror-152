# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class UpdateProductExpenseRateDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"category": "str", "description": "str", "amount": "float", "sku": "str", "archived": "bool"}

    attribute_map = {
        "category": "Category",
        "description": "Description",
        "amount": "Amount",
        "sku": "SKU",
        "archived": "Archived",
    }

    def __init__(
        self, category=None, description=None, amount=None, sku=None, archived=None, _configuration=None
    ):  # noqa: E501
        """UpdateProductExpenseRateDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category = None
        self._description = None
        self._amount = None
        self._sku = None
        self._archived = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if sku is not None:
            self.sku = sku
        if archived is not None:
            self.archived = archived

    @property
    def category(self):
        """Gets the category of this UpdateProductExpenseRateDTO.  # noqa: E501


        :return: The category of this UpdateProductExpenseRateDTO.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateProductExpenseRateDTO.


        :param category: The category of this UpdateProductExpenseRateDTO.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this UpdateProductExpenseRateDTO.  # noqa: E501


        :return: The description of this UpdateProductExpenseRateDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProductExpenseRateDTO.


        :param description: The description of this UpdateProductExpenseRateDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this UpdateProductExpenseRateDTO.  # noqa: E501


        :return: The amount of this UpdateProductExpenseRateDTO.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this UpdateProductExpenseRateDTO.


        :param amount: The amount of this UpdateProductExpenseRateDTO.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def sku(self):
        """Gets the sku of this UpdateProductExpenseRateDTO.  # noqa: E501


        :return: The sku of this UpdateProductExpenseRateDTO.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this UpdateProductExpenseRateDTO.


        :param sku: The sku of this UpdateProductExpenseRateDTO.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def archived(self):
        """Gets the archived of this UpdateProductExpenseRateDTO.  # noqa: E501


        :return: The archived of this UpdateProductExpenseRateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UpdateProductExpenseRateDTO.


        :param archived: The archived of this UpdateProductExpenseRateDTO.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UpdateProductExpenseRateDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProductExpenseRateDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateProductExpenseRateDTO):
            return True

        return self.to_dict() != other.to_dict()
