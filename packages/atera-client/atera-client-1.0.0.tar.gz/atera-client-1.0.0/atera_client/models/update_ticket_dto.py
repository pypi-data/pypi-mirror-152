# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class UpdateTicketDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ticket_title": "str",
        "ticket_status": "str",
        "ticket_type": "str",
        "ticket_priority": "str",
        "ticket_impact": "str",
        "technician_contact_id": "int",
    }

    attribute_map = {
        "ticket_title": "TicketTitle",
        "ticket_status": "TicketStatus",
        "ticket_type": "TicketType",
        "ticket_priority": "TicketPriority",
        "ticket_impact": "TicketImpact",
        "technician_contact_id": "TechnicianContactID",
    }

    def __init__(
        self,
        ticket_title=None,
        ticket_status=None,
        ticket_type=None,
        ticket_priority=None,
        ticket_impact=None,
        technician_contact_id=None,
        _configuration=None,
    ):  # noqa: E501
        """UpdateTicketDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ticket_title = None
        self._ticket_status = None
        self._ticket_type = None
        self._ticket_priority = None
        self._ticket_impact = None
        self._technician_contact_id = None
        self.discriminator = None

        if ticket_title is not None:
            self.ticket_title = ticket_title
        if ticket_status is not None:
            self.ticket_status = ticket_status
        if ticket_type is not None:
            self.ticket_type = ticket_type
        if ticket_priority is not None:
            self.ticket_priority = ticket_priority
        if ticket_impact is not None:
            self.ticket_impact = ticket_impact
        if technician_contact_id is not None:
            self.technician_contact_id = technician_contact_id

    @property
    def ticket_title(self):
        """Gets the ticket_title of this UpdateTicketDTO.  # noqa: E501


        :return: The ticket_title of this UpdateTicketDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_title

    @ticket_title.setter
    def ticket_title(self, ticket_title):
        """Sets the ticket_title of this UpdateTicketDTO.


        :param ticket_title: The ticket_title of this UpdateTicketDTO.  # noqa: E501
        :type: str
        """

        self._ticket_title = ticket_title

    @property
    def ticket_status(self):
        """Gets the ticket_status of this UpdateTicketDTO.  # noqa: E501


        :return: The ticket_status of this UpdateTicketDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this UpdateTicketDTO.


        :param ticket_status: The ticket_status of this UpdateTicketDTO.  # noqa: E501
        :type: str
        """

        self._ticket_status = ticket_status

    @property
    def ticket_type(self):
        """Gets the ticket_type of this UpdateTicketDTO.  # noqa: E501


        :return: The ticket_type of this UpdateTicketDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """Sets the ticket_type of this UpdateTicketDTO.


        :param ticket_type: The ticket_type of this UpdateTicketDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Incident", "Problem", "Request", "Change"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_type` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_type, allowed_values
                )
            )

        self._ticket_type = ticket_type

    @property
    def ticket_priority(self):
        """Gets the ticket_priority of this UpdateTicketDTO.  # noqa: E501


        :return: The ticket_priority of this UpdateTicketDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_priority

    @ticket_priority.setter
    def ticket_priority(self, ticket_priority):
        """Sets the ticket_priority of this UpdateTicketDTO.


        :param ticket_priority: The ticket_priority of this UpdateTicketDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Medium", "High", "Critical"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_priority` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_priority, allowed_values
                )
            )

        self._ticket_priority = ticket_priority

    @property
    def ticket_impact(self):
        """Gets the ticket_impact of this UpdateTicketDTO.  # noqa: E501


        :return: The ticket_impact of this UpdateTicketDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_impact

    @ticket_impact.setter
    def ticket_impact(self, ticket_impact):
        """Sets the ticket_impact of this UpdateTicketDTO.


        :param ticket_impact: The ticket_impact of this UpdateTicketDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoImpact", "SiteDown", "ServerIssue", "Minor", "Major", "Crisis"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_impact` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_impact, allowed_values
                )
            )

        self._ticket_impact = ticket_impact

    @property
    def technician_contact_id(self):
        """Gets the technician_contact_id of this UpdateTicketDTO.  # noqa: E501


        :return: The technician_contact_id of this UpdateTicketDTO.  # noqa: E501
        :rtype: int
        """
        return self._technician_contact_id

    @technician_contact_id.setter
    def technician_contact_id(self, technician_contact_id):
        """Sets the technician_contact_id of this UpdateTicketDTO.


        :param technician_contact_id: The technician_contact_id of this UpdateTicketDTO.  # noqa: E501
        :type: int
        """

        self._technician_contact_id = technician_contact_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UpdateTicketDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTicketDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateTicketDTO):
            return True

        return self.to_dict() != other.to_dict()
