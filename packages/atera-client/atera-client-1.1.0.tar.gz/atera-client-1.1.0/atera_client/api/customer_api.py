# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from atera_client.api_client import ApiClient


class CustomerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def customer_delete(self, customer_id, **kwargs):  # noqa: E501
        """Delete specified customer  # noqa: E501

        Deletes a specified customer. Requires the customer ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_delete(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_delete_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_delete_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def customer_delete_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Delete specified customer  # noqa: E501

        Deletes a specified customer. Requires the customer ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_delete_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["customer_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_delete" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and (
            "customer_id" not in params or params["customer_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `customer_id` when calling `customer_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "customer_id" in params:
            path_params["customerId"] = params["customer_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/{customerId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_get(self, **kwargs):  # noqa: E501
        """Find Customers  # noqa: E501

        Returns a list of customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index, based on items per page (default is 1)
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :return: APIResultWrapperCustomerQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.customer_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def customer_get_with_http_info(self, **kwargs):  # noqa: E501
        """Find Customers  # noqa: E501

        Returns a list of customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index, based on items per page (default is 1)
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :return: APIResultWrapperCustomerQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page", "items_in_page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_get" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "items_in_page" in params:
            query_params.append(("itemsInPage", params["items_in_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="APIResultWrapperCustomerQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_get_0(self, customer_id, **kwargs):  # noqa: E501
        """Find specified customer  # noqa: E501

        Returns a specified customer. Requires the customer ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_get_0(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :return: CustomerQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_get_0_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_get_0_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def customer_get_0_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Find specified customer  # noqa: E501

        Returns a specified customer. Requires the customer ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_get_0_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :return: CustomerQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["customer_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_get_0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and (
            "customer_id" not in params or params["customer_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `customer_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "customer_id" in params:
            path_params["customerId"] = params["customer_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/{customerId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomerQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_post(self, customer, **kwargs):  # noqa: E501
        """Create Customer  # noqa: E501

        Creates a new customer. Requires the customer name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post(customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_post_with_http_info(customer, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_post_with_http_info(customer, **kwargs)  # noqa: E501
            return data

    def customer_post_with_http_info(self, customer, **kwargs):  # noqa: E501
        """Create Customer  # noqa: E501

        Creates a new customer. Requires the customer name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post_with_http_info(customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["customer"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_post" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'customer' is set
        if self.api_client.client_side_validation and (
            "customer" not in params or params["customer"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer` when calling `customer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "customer" in params:
            body_params = params["customer"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Result",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_post_0(self, folder, **kwargs):  # noqa: E501
        """Create Customer Folder  # noqa: E501

        Requires the folder name and customer ID.              Threshold profile ID is optional; if not included, the folder will inherit the threshold profile applied to the customer, if applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post_0(folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerFolderDTO folder: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_post_0_with_http_info(folder, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_post_0_with_http_info(folder, **kwargs)  # noqa: E501
            return data

    def customer_post_0_with_http_info(self, folder, **kwargs):  # noqa: E501
        """Create Customer Folder  # noqa: E501

        Requires the folder name and customer ID.              Threshold profile ID is optional; if not included, the folder will inherit the threshold profile applied to the customer, if applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post_0_with_http_info(folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerFolderDTO folder: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["folder"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_post_0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and (
            "folder" not in params or params["folder"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `customer_post_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "folder" in params:
            body_params = params["folder"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/folders",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Result",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_post_1(self, attachment, **kwargs):  # noqa: E501
        """Create Customer Attachment  # noqa: E501

        Requires the customer ID and attachment name, including the file extension. Requires attachment to be represented in Base64 encoding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post_1(attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerAttachmentDTO attachment: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_post_1_with_http_info(attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_post_1_with_http_info(attachment, **kwargs)  # noqa: E501
            return data

    def customer_post_1_with_http_info(self, attachment, **kwargs):  # noqa: E501
        """Create Customer Attachment  # noqa: E501

        Requires the customer ID and attachment name, including the file extension. Requires attachment to be represented in Base64 encoding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_post_1_with_http_info(attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerAttachmentDTO attachment: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["attachment"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_post_1" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'attachment' is set
        if self.api_client.client_side_validation and (
            "attachment" not in params or params["attachment"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment` when calling `customer_post_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "attachment" in params:
            body_params = params["attachment"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/attachments",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Result",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_put(self, customer_id, customer, **kwargs):  # noqa: E501
        """Update specified customer  # noqa: E501

        Updates an existing customer. Requires the customer ID.              <br /><br />               The following fields are editable:              <br /><br />               Customer Name (CustomerName)              <br />              Business Number (BusinessNumber)              <br />               Domain (Domain)              <br />              Address (Address)              <br />              City (City)              <br />              State (State)              <br />              Country (Country)              <br />              Phone (Phone)              <br />              Fax (Fax)              <br />              Notes (Notes)              <br />              Links (Links)              <br />              Longitude (Longitude)              <br />              Latitude (Latitude)              <br />              Zip Code (ZipCodeStr)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_put(customer_id, customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :param UpdateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_put_with_http_info(customer_id, customer, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_put_with_http_info(customer_id, customer, **kwargs)  # noqa: E501
            return data

    def customer_put_with_http_info(self, customer_id, customer, **kwargs):  # noqa: E501
        """Update specified customer  # noqa: E501

        Updates an existing customer. Requires the customer ID.              <br /><br />               The following fields are editable:              <br /><br />               Customer Name (CustomerName)              <br />              Business Number (BusinessNumber)              <br />               Domain (Domain)              <br />              Address (Address)              <br />              City (City)              <br />              State (State)              <br />              Country (Country)              <br />              Phone (Phone)              <br />              Fax (Fax)              <br />              Notes (Notes)              <br />              Links (Links)              <br />              Longitude (Longitude)              <br />              Latitude (Latitude)              <br />              Zip Code (ZipCodeStr)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_put_with_http_info(customer_id, customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :param UpdateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["customer_id", "customer"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_put" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and (
            "customer_id" not in params or params["customer_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `customer_put`")  # noqa: E501
        # verify the required parameter 'customer' is set
        if self.api_client.client_side_validation and (
            "customer" not in params or params["customer"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer` when calling `customer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "customer_id" in params:
            path_params["customerId"] = params["customer_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "customer" in params:
            body_params = params["customer"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/{customerId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Result",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def customer_put_0(self, customer_id, customer, **kwargs):  # noqa: E501
        """Update specified customer  # noqa: E501

        Updates an existing customer. Requires the customer ID.              <br /><br />               The following fields are editable:              <br /><br />               Customer Name (CustomerName)              <br />              Business Number (BusinessNumber)              <br />               Domain (Domain)              <br />              Address (Address)              <br />              City (City)              <br />              State (State)              <br />              Country (Country)              <br />              Phone (Phone)              <br />              Fax (Fax)              <br />              Notes (Notes)              <br />              Links (Links)              <br />              Longitude (Longitude)              <br />              Latitude (Latitude)              <br />              Zip Code (ZipCodeStr)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_put_0(customer_id, customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :param UpdateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.customer_put_0_with_http_info(customer_id, customer, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_put_0_with_http_info(customer_id, customer, **kwargs)  # noqa: E501
            return data

    def customer_put_0_with_http_info(self, customer_id, customer, **kwargs):  # noqa: E501
        """Update specified customer  # noqa: E501

        Updates an existing customer. Requires the customer ID.              <br /><br />               The following fields are editable:              <br /><br />               Customer Name (CustomerName)              <br />              Business Number (BusinessNumber)              <br />               Domain (Domain)              <br />              Address (Address)              <br />              City (City)              <br />              State (State)              <br />              Country (Country)              <br />              Phone (Phone)              <br />              Fax (Fax)              <br />              Notes (Notes)              <br />              Links (Links)              <br />              Longitude (Longitude)              <br />              Latitude (Latitude)              <br />              Zip Code (ZipCodeStr)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_put_0_with_http_info(customer_id, customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Required (required)
        :param UpdateCustomerDTO customer: Required (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["customer_id", "customer"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method customer_put_0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and (
            "customer_id" not in params or params["customer_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `customer_put_0`")  # noqa: E501
        # verify the required parameter 'customer' is set
        if self.api_client.client_side_validation and (
            "customer" not in params or params["customer"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `customer` when calling `customer_put_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "customer_id" in params:
            path_params["customerId"] = params["customer_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "customer" in params:
            body_params = params["customer"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["api-key"]  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/customers/{customerId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Result",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
