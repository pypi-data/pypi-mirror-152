# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class CustomerQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "customer_id": "int",
        "customer_name": "str",
        "created_on": "datetime",
        "last_modified": "datetime",
        "business_number": "str",
        "domain": "str",
        "address": "str",
        "city": "str",
        "state": "str",
        "country": "str",
        "phone": "str",
        "fax": "str",
        "notes": "str",
        "logo": "str",
        "links": "str",
        "longitude": "float",
        "latitude": "float",
        "zip_code_str": "str",
    }

    attribute_map = {
        "customer_id": "CustomerID",
        "customer_name": "CustomerName",
        "created_on": "CreatedOn",
        "last_modified": "LastModified",
        "business_number": "BusinessNumber",
        "domain": "Domain",
        "address": "Address",
        "city": "City",
        "state": "State",
        "country": "Country",
        "phone": "Phone",
        "fax": "Fax",
        "notes": "Notes",
        "logo": "Logo",
        "links": "Links",
        "longitude": "Longitude",
        "latitude": "Latitude",
        "zip_code_str": "ZipCodeStr",
    }

    def __init__(
        self,
        customer_id=None,
        customer_name=None,
        created_on=None,
        last_modified=None,
        business_number=None,
        domain=None,
        address=None,
        city=None,
        state=None,
        country=None,
        phone=None,
        fax=None,
        notes=None,
        logo=None,
        links=None,
        longitude=None,
        latitude=None,
        zip_code_str=None,
        _configuration=None,
    ):  # noqa: E501
        """CustomerQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_id = None
        self._customer_name = None
        self._created_on = None
        self._last_modified = None
        self._business_number = None
        self._domain = None
        self._address = None
        self._city = None
        self._state = None
        self._country = None
        self._phone = None
        self._fax = None
        self._notes = None
        self._logo = None
        self._links = None
        self._longitude = None
        self._latitude = None
        self._zip_code_str = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if created_on is not None:
            self.created_on = created_on
        if last_modified is not None:
            self.last_modified = last_modified
        if business_number is not None:
            self.business_number = business_number
        if domain is not None:
            self.domain = domain
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone
        if fax is not None:
            self.fax = fax
        if notes is not None:
            self.notes = notes
        if logo is not None:
            self.logo = logo
        if links is not None:
            self.links = links
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if zip_code_str is not None:
            self.zip_code_str = zip_code_str

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerQueryDTO.  # noqa: E501


        :return: The customer_id of this CustomerQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerQueryDTO.


        :param customer_id: The customer_id of this CustomerQueryDTO.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this CustomerQueryDTO.  # noqa: E501


        :return: The customer_name of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CustomerQueryDTO.


        :param customer_name: The customer_name of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def created_on(self):
        """Gets the created_on of this CustomerQueryDTO.  # noqa: E501


        :return: The created_on of this CustomerQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this CustomerQueryDTO.


        :param created_on: The created_on of this CustomerQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def last_modified(self):
        """Gets the last_modified of this CustomerQueryDTO.  # noqa: E501


        :return: The last_modified of this CustomerQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CustomerQueryDTO.


        :param last_modified: The last_modified of this CustomerQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def business_number(self):
        """Gets the business_number of this CustomerQueryDTO.  # noqa: E501


        :return: The business_number of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._business_number

    @business_number.setter
    def business_number(self, business_number):
        """Sets the business_number of this CustomerQueryDTO.


        :param business_number: The business_number of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._business_number = business_number

    @property
    def domain(self):
        """Gets the domain of this CustomerQueryDTO.  # noqa: E501


        :return: The domain of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CustomerQueryDTO.


        :param domain: The domain of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def address(self):
        """Gets the address of this CustomerQueryDTO.  # noqa: E501


        :return: The address of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerQueryDTO.


        :param address: The address of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this CustomerQueryDTO.  # noqa: E501


        :return: The city of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerQueryDTO.


        :param city: The city of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this CustomerQueryDTO.  # noqa: E501


        :return: The state of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomerQueryDTO.


        :param state: The state of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this CustomerQueryDTO.  # noqa: E501


        :return: The country of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerQueryDTO.


        :param country: The country of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this CustomerQueryDTO.  # noqa: E501


        :return: The phone of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerQueryDTO.


        :param phone: The phone of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def fax(self):
        """Gets the fax of this CustomerQueryDTO.  # noqa: E501


        :return: The fax of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this CustomerQueryDTO.


        :param fax: The fax of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def notes(self):
        """Gets the notes of this CustomerQueryDTO.  # noqa: E501


        :return: The notes of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CustomerQueryDTO.


        :param notes: The notes of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def logo(self):
        """Gets the logo of this CustomerQueryDTO.  # noqa: E501


        :return: The logo of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CustomerQueryDTO.


        :param logo: The logo of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def links(self):
        """Gets the links of this CustomerQueryDTO.  # noqa: E501


        :return: The links of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerQueryDTO.


        :param links: The links of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._links = links

    @property
    def longitude(self):
        """Gets the longitude of this CustomerQueryDTO.  # noqa: E501


        :return: The longitude of this CustomerQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CustomerQueryDTO.


        :param longitude: The longitude of this CustomerQueryDTO.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this CustomerQueryDTO.  # noqa: E501


        :return: The latitude of this CustomerQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CustomerQueryDTO.


        :param latitude: The latitude of this CustomerQueryDTO.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def zip_code_str(self):
        """Gets the zip_code_str of this CustomerQueryDTO.  # noqa: E501


        :return: The zip_code_str of this CustomerQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._zip_code_str

    @zip_code_str.setter
    def zip_code_str(self, zip_code_str):
        """Sets the zip_code_str of this CustomerQueryDTO.


        :param zip_code_str: The zip_code_str of this CustomerQueryDTO.  # noqa: E501
        :type: str
        """

        self._zip_code_str = zip_code_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CustomerQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
