# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class TicketCommentQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "_date": "datetime",
        "comment": "str",
        "end_user_id": "int",
        "technician_contact_id": "int",
        "email": "str",
        "first_name": "str",
        "last_name": "str",
        "is_internal": "bool",
    }

    attribute_map = {
        "_date": "Date",
        "comment": "Comment",
        "end_user_id": "EndUserID",
        "technician_contact_id": "TechnicianContactID",
        "email": "Email",
        "first_name": "FirstName",
        "last_name": "LastName",
        "is_internal": "IsInternal",
    }

    def __init__(
        self,
        _date=None,
        comment=None,
        end_user_id=None,
        technician_contact_id=None,
        email=None,
        first_name=None,
        last_name=None,
        is_internal=None,
        _configuration=None,
    ):  # noqa: E501
        """TicketCommentQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._comment = None
        self._end_user_id = None
        self._technician_contact_id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._is_internal = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if comment is not None:
            self.comment = comment
        if end_user_id is not None:
            self.end_user_id = end_user_id
        if technician_contact_id is not None:
            self.technician_contact_id = technician_contact_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if is_internal is not None:
            self.is_internal = is_internal

    @property
    def _date(self):
        """Gets the _date of this TicketCommentQueryDTO.  # noqa: E501


        :return: The _date of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TicketCommentQueryDTO.


        :param _date: The _date of this TicketCommentQueryDTO.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def comment(self):
        """Gets the comment of this TicketCommentQueryDTO.  # noqa: E501


        :return: The comment of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TicketCommentQueryDTO.


        :param comment: The comment of this TicketCommentQueryDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def end_user_id(self):
        """Gets the end_user_id of this TicketCommentQueryDTO.  # noqa: E501


        :return: The end_user_id of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._end_user_id

    @end_user_id.setter
    def end_user_id(self, end_user_id):
        """Sets the end_user_id of this TicketCommentQueryDTO.


        :param end_user_id: The end_user_id of this TicketCommentQueryDTO.  # noqa: E501
        :type: int
        """

        self._end_user_id = end_user_id

    @property
    def technician_contact_id(self):
        """Gets the technician_contact_id of this TicketCommentQueryDTO.  # noqa: E501


        :return: The technician_contact_id of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._technician_contact_id

    @technician_contact_id.setter
    def technician_contact_id(self, technician_contact_id):
        """Sets the technician_contact_id of this TicketCommentQueryDTO.


        :param technician_contact_id: The technician_contact_id of this TicketCommentQueryDTO.  # noqa: E501
        :type: int
        """

        self._technician_contact_id = technician_contact_id

    @property
    def email(self):
        """Gets the email of this TicketCommentQueryDTO.  # noqa: E501


        :return: The email of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TicketCommentQueryDTO.


        :param email: The email of this TicketCommentQueryDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this TicketCommentQueryDTO.  # noqa: E501


        :return: The first_name of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TicketCommentQueryDTO.


        :param first_name: The first_name of this TicketCommentQueryDTO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this TicketCommentQueryDTO.  # noqa: E501


        :return: The last_name of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TicketCommentQueryDTO.


        :param last_name: The last_name of this TicketCommentQueryDTO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def is_internal(self):
        """Gets the is_internal of this TicketCommentQueryDTO.  # noqa: E501


        :return: The is_internal of this TicketCommentQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this TicketCommentQueryDTO.


        :param is_internal: The is_internal of this TicketCommentQueryDTO.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TicketCommentQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketCommentQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketCommentQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
