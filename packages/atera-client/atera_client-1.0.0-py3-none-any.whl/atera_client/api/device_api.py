# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from atera_client.api_client import ApiClient


class DeviceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_create_generic_device(self, request, **kwargs):  # noqa: E501
        """Create Generic device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_generic_device(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGenericDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_create_generic_device_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_create_generic_device_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def device_create_generic_device_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create Generic device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_generic_device_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGenericDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method device_create_generic_device" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and (
            "request" not in params or params["request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `device_create_generic_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/genericdevice",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CreatedDeviceRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_create_http_device(self, request, **kwargs):  # noqa: E501
        """Create HTTP device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_http_device(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateHttpDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_create_http_device_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_create_http_device_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def device_create_http_device_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create HTTP device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_http_device_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateHttpDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_create_http_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and (
            "request" not in params or params["request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `device_create_http_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/httpdevice",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CreatedDeviceRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_create_snmp_device_v1_v2(self, request, **kwargs):  # noqa: E501
        """Create SNMP device V1/V2  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_snmp_device_v1_v2(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSNMPDTOV1V2 request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_create_snmp_device_v1_v2_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_create_snmp_device_v1_v2_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def device_create_snmp_device_v1_v2_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create SNMP device V1/V2  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_snmp_device_v1_v2_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSNMPDTOV1V2 request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method device_create_snmp_device_v1_v2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and (
            "request" not in params or params["request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `device_create_snmp_device_v1_v2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/snmpdevice/v1v2",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CreatedDeviceRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_create_snmp_device_v3(self, request, **kwargs):  # noqa: E501
        """Create SNMP device V3  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_snmp_device_v3(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSNMPDTOV3 request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_create_snmp_device_v3_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_create_snmp_device_v3_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def device_create_snmp_device_v3_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create SNMP device V3  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_snmp_device_v3_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSNMPDTOV3 request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method device_create_snmp_device_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and (
            "request" not in params or params["request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `device_create_snmp_device_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/snmpdevice/v3",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CreatedDeviceRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_create_tcp_device(self, request, **kwargs):  # noqa: E501
        """Create TCP device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_tcp_device(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTCPDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_create_tcp_device_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_create_tcp_device_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def device_create_tcp_device_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create TCP device  # noqa: E501

        Returns device ID and Device Guid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_create_tcp_device_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTCPDTO request: Required - new device params (required)
        :return: CreatedDeviceRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_create_tcp_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and (
            "request" not in params or params["request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `device_create_tcp_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/tcpdevice",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CreatedDeviceRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_delete(self, device_id, **kwargs):  # noqa: E501
        """Delete specified Generic device  # noqa: E501

        Deletes a Generic device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_delete_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_delete_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_delete_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Delete specified Generic device  # noqa: E501

        Deletes a Generic device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_delete" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `device_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/genericdevice/{deviceId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_delete_http(self, device_id, **kwargs):  # noqa: E501
        """Delete specified HTTP device  # noqa: E501

        Deletes an HTTP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_http(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_delete_http_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_delete_http_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_delete_http_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Delete specified HTTP device  # noqa: E501

        Deletes an HTTP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_http_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_delete_http" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_delete_http`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/httpdevice/{deviceId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_delete_snmp(self, device_id, **kwargs):  # noqa: E501
        """Delete specified SNMP device  # noqa: E501

        Deletes an SNMP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_snmp(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_delete_snmp_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_delete_snmp_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_delete_snmp_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Delete specified SNMP device  # noqa: E501

        Deletes an SNMP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_snmp_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_delete_snmp" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_delete_snmp`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/snmpdevice/{deviceId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_delete_tcp(self, device_id, **kwargs):  # noqa: E501
        """Delete specified TCP device  # noqa: E501

        Deletes a TCP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_tcp(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_delete_tcp_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_delete_tcp_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_delete_tcp_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Delete specified TCP device  # noqa: E501

        Deletes a TCP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_delete_tcp_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_delete_tcp" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_delete_tcp`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/tcpdevice/{deviceId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_generic_device(self, device_id, **kwargs):  # noqa: E501
        """Find specified Generic device  # noqa: E501

        Returns a Generic device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_generic_device(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: GenericDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_generic_device_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_get_generic_device_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_get_generic_device_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Find specified Generic device  # noqa: E501

        Returns a Generic device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_generic_device_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: GenericDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_generic_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_get_generic_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/genericdevice/{deviceId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GenericDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_generic_devices(self, **kwargs):  # noqa: E501
        """Find Generic devices  # noqa: E501

        Returns a list of Generic devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_generic_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperGenericDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_generic_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_get_generic_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_get_generic_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Find Generic devices  # noqa: E501

        Returns a list of Generic devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_generic_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperGenericDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page", "items_in_page", "customer_id", "monitoring_agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_generic_devices" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "items_in_page" in params:
            query_params.append(("itemsInPage", params["items_in_page"]))  # noqa: E501
        if "customer_id" in params:
            query_params.append(("customerId", params["customer_id"]))  # noqa: E501
        if "monitoring_agent_id" in params:
            query_params.append(("monitoringAgentId", params["monitoring_agent_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/genericdevices",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="APIResultWrapperGenericDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_http_device(self, device_id, **kwargs):  # noqa: E501
        """Find specified HTTP device  # noqa: E501

        Returns an HTTP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_http_device(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: HttpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_http_device_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_get_http_device_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_get_http_device_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Find specified HTTP device  # noqa: E501

        Returns an HTTP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_http_device_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: HttpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_http_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_get_http_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/httpdevice/{deviceId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HttpDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_http_devices(self, **kwargs):  # noqa: E501
        """Find HTTP devices  # noqa: E501

        Returns a list of HTTP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_http_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperHttpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_http_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_get_http_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_get_http_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Find HTTP devices  # noqa: E501

        Returns a list of HTTP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_http_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperHttpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page", "items_in_page", "customer_id", "monitoring_agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_http_devices" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "items_in_page" in params:
            query_params.append(("itemsInPage", params["items_in_page"]))  # noqa: E501
        if "customer_id" in params:
            query_params.append(("customerId", params["customer_id"]))  # noqa: E501
        if "monitoring_agent_id" in params:
            query_params.append(("monitoringAgentId", params["monitoring_agent_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/httpdevices",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="APIResultWrapperHttpDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_snmp_device(self, device_id, **kwargs):  # noqa: E501
        """Find specified SNMP device  # noqa: E501

        Returns an SNMP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_snmp_device(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: SNMPDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_snmp_device_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_get_snmp_device_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_get_snmp_device_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Find specified SNMP device  # noqa: E501

        Returns an SNMP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_snmp_device_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: SNMPDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_snmp_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_get_snmp_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/snmpdevice/{deviceId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SNMPDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_snmp_devices(self, **kwargs):  # noqa: E501
        """Find SNMP devices  # noqa: E501

        Returns a list of SNMP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_snmp_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperSNMPDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_snmp_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_get_snmp_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_get_snmp_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Find SNMP devices  # noqa: E501

        Returns a list of SNMP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_snmp_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperSNMPDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page", "items_in_page", "customer_id", "monitoring_agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_snmp_devices" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "items_in_page" in params:
            query_params.append(("itemsInPage", params["items_in_page"]))  # noqa: E501
        if "customer_id" in params:
            query_params.append(("customerId", params["customer_id"]))  # noqa: E501
        if "monitoring_agent_id" in params:
            query_params.append(("monitoringAgentId", params["monitoring_agent_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/snmpdevices",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="APIResultWrapperSNMPDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_tcp_device(self, device_id, **kwargs):  # noqa: E501
        """Find specified TCP device  # noqa: E501

        Returns a TCP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_tcp_device(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: TcpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_tcp_device_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_get_tcp_device_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def device_get_tcp_device_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Find specified TCP device  # noqa: E501

        Returns a TCP device. Requires the device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_tcp_device_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Required - System Device ID (required)
        :return: TcpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["device_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_tcp_device" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and (
            "device_id" not in params or params["device_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device_id` when calling `device_get_tcp_device`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "device_id" in params:
            path_params["deviceId"] = params["device_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/tcpdevice/{deviceId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TcpDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def device_get_tcp_devices(self, **kwargs):  # noqa: E501
        """Find TCP devices  # noqa: E501

        Returns a list of TCP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_tcp_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperTcpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.device_get_tcp_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_get_tcp_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_get_tcp_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Find TCP devices  # noqa: E501

        Returns a list of TCP devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_tcp_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Optional - Page index (default is 1), based on items per page
        :param int items_in_page: Optional - Number of items per page (default is 20, max is 50)
        :param int customer_id: Optional - Customer ID (default is NULL)
        :param int monitoring_agent_id: Optional - Monitoring Agent ID (default is NULL)
        :return: APIResultWrapperTcpDeviceQueryDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page", "items_in_page", "customer_id", "monitoring_agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method device_get_tcp_devices" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "items_in_page" in params:
            query_params.append(("itemsInPage", params["items_in_page"]))  # noqa: E501
        if "customer_id" in params:
            query_params.append(("customerId", params["customer_id"]))  # noqa: E501
        if "monitoring_agent_id" in params:
            query_params.append(("monitoringAgentId", params["monitoring_agent_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v3/devices/tcpdevices",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="APIResultWrapperTcpDeviceQueryDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
