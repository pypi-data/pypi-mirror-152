# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class TicketDurationQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "off_sla_duration_hours": "float",
        "off_site_duration_hours": "float",
        "on_sla_duration_hours": "float",
        "on_site_duration_hours": "float",
        "total_duration_hours": "float",
        "ticket_id": "int",
    }

    attribute_map = {
        "off_sla_duration_hours": "OffSLADurationHours",
        "off_site_duration_hours": "OffSiteDurationHours",
        "on_sla_duration_hours": "OnSLADurationHours",
        "on_site_duration_hours": "OnSiteDurationHours",
        "total_duration_hours": "TotalDurationHours",
        "ticket_id": "ticketId",
    }

    def __init__(
        self,
        off_sla_duration_hours=None,
        off_site_duration_hours=None,
        on_sla_duration_hours=None,
        on_site_duration_hours=None,
        total_duration_hours=None,
        ticket_id=None,
        _configuration=None,
    ):  # noqa: E501
        """TicketDurationQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._off_sla_duration_hours = None
        self._off_site_duration_hours = None
        self._on_sla_duration_hours = None
        self._on_site_duration_hours = None
        self._total_duration_hours = None
        self._ticket_id = None
        self.discriminator = None

        if off_sla_duration_hours is not None:
            self.off_sla_duration_hours = off_sla_duration_hours
        if off_site_duration_hours is not None:
            self.off_site_duration_hours = off_site_duration_hours
        if on_sla_duration_hours is not None:
            self.on_sla_duration_hours = on_sla_duration_hours
        if on_site_duration_hours is not None:
            self.on_site_duration_hours = on_site_duration_hours
        if total_duration_hours is not None:
            self.total_duration_hours = total_duration_hours
        if ticket_id is not None:
            self.ticket_id = ticket_id

    @property
    def off_sla_duration_hours(self):
        """Gets the off_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501


        :return: The off_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._off_sla_duration_hours

    @off_sla_duration_hours.setter
    def off_sla_duration_hours(self, off_sla_duration_hours):
        """Sets the off_sla_duration_hours of this TicketDurationQueryDTO.


        :param off_sla_duration_hours: The off_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :type: float
        """

        self._off_sla_duration_hours = off_sla_duration_hours

    @property
    def off_site_duration_hours(self):
        """Gets the off_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501


        :return: The off_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._off_site_duration_hours

    @off_site_duration_hours.setter
    def off_site_duration_hours(self, off_site_duration_hours):
        """Sets the off_site_duration_hours of this TicketDurationQueryDTO.


        :param off_site_duration_hours: The off_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :type: float
        """

        self._off_site_duration_hours = off_site_duration_hours

    @property
    def on_sla_duration_hours(self):
        """Gets the on_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501


        :return: The on_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._on_sla_duration_hours

    @on_sla_duration_hours.setter
    def on_sla_duration_hours(self, on_sla_duration_hours):
        """Sets the on_sla_duration_hours of this TicketDurationQueryDTO.


        :param on_sla_duration_hours: The on_sla_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :type: float
        """

        self._on_sla_duration_hours = on_sla_duration_hours

    @property
    def on_site_duration_hours(self):
        """Gets the on_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501


        :return: The on_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._on_site_duration_hours

    @on_site_duration_hours.setter
    def on_site_duration_hours(self, on_site_duration_hours):
        """Sets the on_site_duration_hours of this TicketDurationQueryDTO.


        :param on_site_duration_hours: The on_site_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :type: float
        """

        self._on_site_duration_hours = on_site_duration_hours

    @property
    def total_duration_hours(self):
        """Gets the total_duration_hours of this TicketDurationQueryDTO.  # noqa: E501


        :return: The total_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: float
        """
        return self._total_duration_hours

    @total_duration_hours.setter
    def total_duration_hours(self, total_duration_hours):
        """Sets the total_duration_hours of this TicketDurationQueryDTO.


        :param total_duration_hours: The total_duration_hours of this TicketDurationQueryDTO.  # noqa: E501
        :type: float
        """

        self._total_duration_hours = total_duration_hours

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketDurationQueryDTO.  # noqa: E501


        :return: The ticket_id of this TicketDurationQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketDurationQueryDTO.


        :param ticket_id: The ticket_id of this TicketDurationQueryDTO.  # noqa: E501
        :type: int
        """

        self._ticket_id = ticket_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TicketDurationQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketDurationQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketDurationQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
