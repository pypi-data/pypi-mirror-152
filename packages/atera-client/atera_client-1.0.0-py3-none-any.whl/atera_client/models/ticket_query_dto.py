# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class TicketQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ticket_id": "int",
        "ticket_title": "str",
        "ticket_number": "str",
        "ticket_priority": "str",
        "ticket_impact": "str",
        "ticket_status": "str",
        "ticket_source": "str",
        "ticket_type": "str",
        "end_user_id": "int",
        "end_user_email": "str",
        "end_user_first_name": "str",
        "end_user_last_name": "str",
        "end_user_phone": "str",
        "ticket_resolved_date": "datetime",
        "ticket_created_date": "datetime",
        "technician_first_comment_date": "datetime",
        "first_response_due_date": "datetime",
        "closed_ticket_due_date": "datetime",
        "first_comment": "str",
        "last_end_user_comment": "str",
        "last_end_user_comment_timestamp": "datetime",
        "last_technician_comment": "str",
        "last_technician_comment_timestamp": "datetime",
        "on_site_duration_seconds": "int",
        "on_site_duration_minutes": "int",
        "off_site_duration_seconds": "int",
        "off_site_duration_minutes": "int",
        "on_sla_duration_seconds": "int",
        "on_sla_duration_minutes": "int",
        "off_sla_duration_seconds": "int",
        "off_sla_duration_minutes": "int",
        "total_duration_seconds": "int",
        "total_duration_minutes": "int",
        "customer_id": "int",
        "customer_name": "str",
        "customer_business_number": "str",
        "technician_contact_id": "int",
        "technician_full_name": "str",
        "technician_email": "str",
        "contract_id": "int",
    }

    attribute_map = {
        "ticket_id": "TicketID",
        "ticket_title": "TicketTitle",
        "ticket_number": "TicketNumber",
        "ticket_priority": "TicketPriority",
        "ticket_impact": "TicketImpact",
        "ticket_status": "TicketStatus",
        "ticket_source": "TicketSource",
        "ticket_type": "TicketType",
        "end_user_id": "EndUserID",
        "end_user_email": "EndUserEmail",
        "end_user_first_name": "EndUserFirstName",
        "end_user_last_name": "EndUserLastName",
        "end_user_phone": "EndUserPhone",
        "ticket_resolved_date": "TicketResolvedDate",
        "ticket_created_date": "TicketCreatedDate",
        "technician_first_comment_date": "TechnicianFirstCommentDate",
        "first_response_due_date": "FirstResponseDueDate",
        "closed_ticket_due_date": "ClosedTicketDueDate",
        "first_comment": "FirstComment",
        "last_end_user_comment": "LastEndUserComment",
        "last_end_user_comment_timestamp": "LastEndUserCommentTimestamp",
        "last_technician_comment": "LastTechnicianComment",
        "last_technician_comment_timestamp": "LastTechnicianCommentTimestamp",
        "on_site_duration_seconds": "OnSiteDurationSeconds",
        "on_site_duration_minutes": "OnSiteDurationMinutes",
        "off_site_duration_seconds": "OffSiteDurationSeconds",
        "off_site_duration_minutes": "OffSiteDurationMinutes",
        "on_sla_duration_seconds": "OnSLADurationSeconds",
        "on_sla_duration_minutes": "OnSLADurationMinutes",
        "off_sla_duration_seconds": "OffSLADurationSeconds",
        "off_sla_duration_minutes": "OffSLADurationMinutes",
        "total_duration_seconds": "TotalDurationSeconds",
        "total_duration_minutes": "TotalDurationMinutes",
        "customer_id": "CustomerID",
        "customer_name": "CustomerName",
        "customer_business_number": "CustomerBusinessNumber",
        "technician_contact_id": "TechnicianContactID",
        "technician_full_name": "TechnicianFullName",
        "technician_email": "TechnicianEmail",
        "contract_id": "ContractID",
    }

    def __init__(
        self,
        ticket_id=None,
        ticket_title=None,
        ticket_number=None,
        ticket_priority=None,
        ticket_impact=None,
        ticket_status=None,
        ticket_source=None,
        ticket_type=None,
        end_user_id=None,
        end_user_email=None,
        end_user_first_name=None,
        end_user_last_name=None,
        end_user_phone=None,
        ticket_resolved_date=None,
        ticket_created_date=None,
        technician_first_comment_date=None,
        first_response_due_date=None,
        closed_ticket_due_date=None,
        first_comment=None,
        last_end_user_comment=None,
        last_end_user_comment_timestamp=None,
        last_technician_comment=None,
        last_technician_comment_timestamp=None,
        on_site_duration_seconds=None,
        on_site_duration_minutes=None,
        off_site_duration_seconds=None,
        off_site_duration_minutes=None,
        on_sla_duration_seconds=None,
        on_sla_duration_minutes=None,
        off_sla_duration_seconds=None,
        off_sla_duration_minutes=None,
        total_duration_seconds=None,
        total_duration_minutes=None,
        customer_id=None,
        customer_name=None,
        customer_business_number=None,
        technician_contact_id=None,
        technician_full_name=None,
        technician_email=None,
        contract_id=None,
        _configuration=None,
    ):  # noqa: E501
        """TicketQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ticket_id = None
        self._ticket_title = None
        self._ticket_number = None
        self._ticket_priority = None
        self._ticket_impact = None
        self._ticket_status = None
        self._ticket_source = None
        self._ticket_type = None
        self._end_user_id = None
        self._end_user_email = None
        self._end_user_first_name = None
        self._end_user_last_name = None
        self._end_user_phone = None
        self._ticket_resolved_date = None
        self._ticket_created_date = None
        self._technician_first_comment_date = None
        self._first_response_due_date = None
        self._closed_ticket_due_date = None
        self._first_comment = None
        self._last_end_user_comment = None
        self._last_end_user_comment_timestamp = None
        self._last_technician_comment = None
        self._last_technician_comment_timestamp = None
        self._on_site_duration_seconds = None
        self._on_site_duration_minutes = None
        self._off_site_duration_seconds = None
        self._off_site_duration_minutes = None
        self._on_sla_duration_seconds = None
        self._on_sla_duration_minutes = None
        self._off_sla_duration_seconds = None
        self._off_sla_duration_minutes = None
        self._total_duration_seconds = None
        self._total_duration_minutes = None
        self._customer_id = None
        self._customer_name = None
        self._customer_business_number = None
        self._technician_contact_id = None
        self._technician_full_name = None
        self._technician_email = None
        self._contract_id = None
        self.discriminator = None

        if ticket_id is not None:
            self.ticket_id = ticket_id
        if ticket_title is not None:
            self.ticket_title = ticket_title
        if ticket_number is not None:
            self.ticket_number = ticket_number
        if ticket_priority is not None:
            self.ticket_priority = ticket_priority
        if ticket_impact is not None:
            self.ticket_impact = ticket_impact
        if ticket_status is not None:
            self.ticket_status = ticket_status
        if ticket_source is not None:
            self.ticket_source = ticket_source
        if ticket_type is not None:
            self.ticket_type = ticket_type
        if end_user_id is not None:
            self.end_user_id = end_user_id
        if end_user_email is not None:
            self.end_user_email = end_user_email
        if end_user_first_name is not None:
            self.end_user_first_name = end_user_first_name
        if end_user_last_name is not None:
            self.end_user_last_name = end_user_last_name
        if end_user_phone is not None:
            self.end_user_phone = end_user_phone
        if ticket_resolved_date is not None:
            self.ticket_resolved_date = ticket_resolved_date
        if ticket_created_date is not None:
            self.ticket_created_date = ticket_created_date
        if technician_first_comment_date is not None:
            self.technician_first_comment_date = technician_first_comment_date
        if first_response_due_date is not None:
            self.first_response_due_date = first_response_due_date
        if closed_ticket_due_date is not None:
            self.closed_ticket_due_date = closed_ticket_due_date
        if first_comment is not None:
            self.first_comment = first_comment
        if last_end_user_comment is not None:
            self.last_end_user_comment = last_end_user_comment
        if last_end_user_comment_timestamp is not None:
            self.last_end_user_comment_timestamp = last_end_user_comment_timestamp
        if last_technician_comment is not None:
            self.last_technician_comment = last_technician_comment
        if last_technician_comment_timestamp is not None:
            self.last_technician_comment_timestamp = last_technician_comment_timestamp
        if on_site_duration_seconds is not None:
            self.on_site_duration_seconds = on_site_duration_seconds
        if on_site_duration_minutes is not None:
            self.on_site_duration_minutes = on_site_duration_minutes
        if off_site_duration_seconds is not None:
            self.off_site_duration_seconds = off_site_duration_seconds
        if off_site_duration_minutes is not None:
            self.off_site_duration_minutes = off_site_duration_minutes
        if on_sla_duration_seconds is not None:
            self.on_sla_duration_seconds = on_sla_duration_seconds
        if on_sla_duration_minutes is not None:
            self.on_sla_duration_minutes = on_sla_duration_minutes
        if off_sla_duration_seconds is not None:
            self.off_sla_duration_seconds = off_sla_duration_seconds
        if off_sla_duration_minutes is not None:
            self.off_sla_duration_minutes = off_sla_duration_minutes
        if total_duration_seconds is not None:
            self.total_duration_seconds = total_duration_seconds
        if total_duration_minutes is not None:
            self.total_duration_minutes = total_duration_minutes
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_business_number is not None:
            self.customer_business_number = customer_business_number
        if technician_contact_id is not None:
            self.technician_contact_id = technician_contact_id
        if technician_full_name is not None:
            self.technician_full_name = technician_full_name
        if technician_email is not None:
            self.technician_email = technician_email
        if contract_id is not None:
            self.contract_id = contract_id

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_id of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketQueryDTO.


        :param ticket_id: The ticket_id of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._ticket_id = ticket_id

    @property
    def ticket_title(self):
        """Gets the ticket_title of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_title of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_title

    @ticket_title.setter
    def ticket_title(self, ticket_title):
        """Sets the ticket_title of this TicketQueryDTO.


        :param ticket_title: The ticket_title of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._ticket_title = ticket_title

    @property
    def ticket_number(self):
        """Gets the ticket_number of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_number of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """Sets the ticket_number of this TicketQueryDTO.


        :param ticket_number: The ticket_number of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._ticket_number = ticket_number

    @property
    def ticket_priority(self):
        """Gets the ticket_priority of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_priority of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_priority

    @ticket_priority.setter
    def ticket_priority(self, ticket_priority):
        """Sets the ticket_priority of this TicketQueryDTO.


        :param ticket_priority: The ticket_priority of this TicketQueryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Medium", "High", "Critical"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_priority` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_priority, allowed_values
                )
            )

        self._ticket_priority = ticket_priority

    @property
    def ticket_impact(self):
        """Gets the ticket_impact of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_impact of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_impact

    @ticket_impact.setter
    def ticket_impact(self, ticket_impact):
        """Sets the ticket_impact of this TicketQueryDTO.


        :param ticket_impact: The ticket_impact of this TicketQueryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoImpact", "SiteDown", "ServerIssue", "Minor", "Major", "Crisis"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_impact` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_impact, allowed_values
                )
            )

        self._ticket_impact = ticket_impact

    @property
    def ticket_status(self):
        """Gets the ticket_status of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_status of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this TicketQueryDTO.


        :param ticket_status: The ticket_status of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._ticket_status = ticket_status

    @property
    def ticket_source(self):
        """Gets the ticket_source of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_source of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_source

    @ticket_source.setter
    def ticket_source(self, ticket_source):
        """Sets the ticket_source of this TicketQueryDTO.


        :param ticket_source: The ticket_source of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._ticket_source = ticket_source

    @property
    def ticket_type(self):
        """Gets the ticket_type of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_type of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """Sets the ticket_type of this TicketQueryDTO.


        :param ticket_type: The ticket_type of this TicketQueryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Incident", "Problem", "Request", "Change"]  # noqa: E501
        if self._configuration.client_side_validation and ticket_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_type` ({0}), must be one of {1}".format(  # noqa: E501
                    ticket_type, allowed_values
                )
            )

        self._ticket_type = ticket_type

    @property
    def end_user_id(self):
        """Gets the end_user_id of this TicketQueryDTO.  # noqa: E501


        :return: The end_user_id of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._end_user_id

    @end_user_id.setter
    def end_user_id(self, end_user_id):
        """Sets the end_user_id of this TicketQueryDTO.


        :param end_user_id: The end_user_id of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._end_user_id = end_user_id

    @property
    def end_user_email(self):
        """Gets the end_user_email of this TicketQueryDTO.  # noqa: E501


        :return: The end_user_email of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_user_email

    @end_user_email.setter
    def end_user_email(self, end_user_email):
        """Sets the end_user_email of this TicketQueryDTO.


        :param end_user_email: The end_user_email of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._end_user_email = end_user_email

    @property
    def end_user_first_name(self):
        """Gets the end_user_first_name of this TicketQueryDTO.  # noqa: E501


        :return: The end_user_first_name of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_user_first_name

    @end_user_first_name.setter
    def end_user_first_name(self, end_user_first_name):
        """Sets the end_user_first_name of this TicketQueryDTO.


        :param end_user_first_name: The end_user_first_name of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._end_user_first_name = end_user_first_name

    @property
    def end_user_last_name(self):
        """Gets the end_user_last_name of this TicketQueryDTO.  # noqa: E501


        :return: The end_user_last_name of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_user_last_name

    @end_user_last_name.setter
    def end_user_last_name(self, end_user_last_name):
        """Sets the end_user_last_name of this TicketQueryDTO.


        :param end_user_last_name: The end_user_last_name of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._end_user_last_name = end_user_last_name

    @property
    def end_user_phone(self):
        """Gets the end_user_phone of this TicketQueryDTO.  # noqa: E501


        :return: The end_user_phone of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_user_phone

    @end_user_phone.setter
    def end_user_phone(self, end_user_phone):
        """Sets the end_user_phone of this TicketQueryDTO.


        :param end_user_phone: The end_user_phone of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._end_user_phone = end_user_phone

    @property
    def ticket_resolved_date(self):
        """Gets the ticket_resolved_date of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_resolved_date of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._ticket_resolved_date

    @ticket_resolved_date.setter
    def ticket_resolved_date(self, ticket_resolved_date):
        """Sets the ticket_resolved_date of this TicketQueryDTO.


        :param ticket_resolved_date: The ticket_resolved_date of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._ticket_resolved_date = ticket_resolved_date

    @property
    def ticket_created_date(self):
        """Gets the ticket_created_date of this TicketQueryDTO.  # noqa: E501


        :return: The ticket_created_date of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._ticket_created_date

    @ticket_created_date.setter
    def ticket_created_date(self, ticket_created_date):
        """Sets the ticket_created_date of this TicketQueryDTO.


        :param ticket_created_date: The ticket_created_date of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._ticket_created_date = ticket_created_date

    @property
    def technician_first_comment_date(self):
        """Gets the technician_first_comment_date of this TicketQueryDTO.  # noqa: E501


        :return: The technician_first_comment_date of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._technician_first_comment_date

    @technician_first_comment_date.setter
    def technician_first_comment_date(self, technician_first_comment_date):
        """Sets the technician_first_comment_date of this TicketQueryDTO.


        :param technician_first_comment_date: The technician_first_comment_date of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._technician_first_comment_date = technician_first_comment_date

    @property
    def first_response_due_date(self):
        """Gets the first_response_due_date of this TicketQueryDTO.  # noqa: E501


        :return: The first_response_due_date of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._first_response_due_date

    @first_response_due_date.setter
    def first_response_due_date(self, first_response_due_date):
        """Sets the first_response_due_date of this TicketQueryDTO.


        :param first_response_due_date: The first_response_due_date of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._first_response_due_date = first_response_due_date

    @property
    def closed_ticket_due_date(self):
        """Gets the closed_ticket_due_date of this TicketQueryDTO.  # noqa: E501


        :return: The closed_ticket_due_date of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_ticket_due_date

    @closed_ticket_due_date.setter
    def closed_ticket_due_date(self, closed_ticket_due_date):
        """Sets the closed_ticket_due_date of this TicketQueryDTO.


        :param closed_ticket_due_date: The closed_ticket_due_date of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._closed_ticket_due_date = closed_ticket_due_date

    @property
    def first_comment(self):
        """Gets the first_comment of this TicketQueryDTO.  # noqa: E501


        :return: The first_comment of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_comment

    @first_comment.setter
    def first_comment(self, first_comment):
        """Sets the first_comment of this TicketQueryDTO.


        :param first_comment: The first_comment of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._first_comment = first_comment

    @property
    def last_end_user_comment(self):
        """Gets the last_end_user_comment of this TicketQueryDTO.  # noqa: E501


        :return: The last_end_user_comment of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_end_user_comment

    @last_end_user_comment.setter
    def last_end_user_comment(self, last_end_user_comment):
        """Sets the last_end_user_comment of this TicketQueryDTO.


        :param last_end_user_comment: The last_end_user_comment of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._last_end_user_comment = last_end_user_comment

    @property
    def last_end_user_comment_timestamp(self):
        """Gets the last_end_user_comment_timestamp of this TicketQueryDTO.  # noqa: E501


        :return: The last_end_user_comment_timestamp of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_end_user_comment_timestamp

    @last_end_user_comment_timestamp.setter
    def last_end_user_comment_timestamp(self, last_end_user_comment_timestamp):
        """Sets the last_end_user_comment_timestamp of this TicketQueryDTO.


        :param last_end_user_comment_timestamp: The last_end_user_comment_timestamp of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._last_end_user_comment_timestamp = last_end_user_comment_timestamp

    @property
    def last_technician_comment(self):
        """Gets the last_technician_comment of this TicketQueryDTO.  # noqa: E501


        :return: The last_technician_comment of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_technician_comment

    @last_technician_comment.setter
    def last_technician_comment(self, last_technician_comment):
        """Sets the last_technician_comment of this TicketQueryDTO.


        :param last_technician_comment: The last_technician_comment of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._last_technician_comment = last_technician_comment

    @property
    def last_technician_comment_timestamp(self):
        """Gets the last_technician_comment_timestamp of this TicketQueryDTO.  # noqa: E501


        :return: The last_technician_comment_timestamp of this TicketQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_technician_comment_timestamp

    @last_technician_comment_timestamp.setter
    def last_technician_comment_timestamp(self, last_technician_comment_timestamp):
        """Sets the last_technician_comment_timestamp of this TicketQueryDTO.


        :param last_technician_comment_timestamp: The last_technician_comment_timestamp of this TicketQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._last_technician_comment_timestamp = last_technician_comment_timestamp

    @property
    def on_site_duration_seconds(self):
        """Gets the on_site_duration_seconds of this TicketQueryDTO.  # noqa: E501


        :return: The on_site_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._on_site_duration_seconds

    @on_site_duration_seconds.setter
    def on_site_duration_seconds(self, on_site_duration_seconds):
        """Sets the on_site_duration_seconds of this TicketQueryDTO.


        :param on_site_duration_seconds: The on_site_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._on_site_duration_seconds = on_site_duration_seconds

    @property
    def on_site_duration_minutes(self):
        """Gets the on_site_duration_minutes of this TicketQueryDTO.  # noqa: E501


        :return: The on_site_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._on_site_duration_minutes

    @on_site_duration_minutes.setter
    def on_site_duration_minutes(self, on_site_duration_minutes):
        """Sets the on_site_duration_minutes of this TicketQueryDTO.


        :param on_site_duration_minutes: The on_site_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._on_site_duration_minutes = on_site_duration_minutes

    @property
    def off_site_duration_seconds(self):
        """Gets the off_site_duration_seconds of this TicketQueryDTO.  # noqa: E501


        :return: The off_site_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._off_site_duration_seconds

    @off_site_duration_seconds.setter
    def off_site_duration_seconds(self, off_site_duration_seconds):
        """Sets the off_site_duration_seconds of this TicketQueryDTO.


        :param off_site_duration_seconds: The off_site_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._off_site_duration_seconds = off_site_duration_seconds

    @property
    def off_site_duration_minutes(self):
        """Gets the off_site_duration_minutes of this TicketQueryDTO.  # noqa: E501


        :return: The off_site_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._off_site_duration_minutes

    @off_site_duration_minutes.setter
    def off_site_duration_minutes(self, off_site_duration_minutes):
        """Sets the off_site_duration_minutes of this TicketQueryDTO.


        :param off_site_duration_minutes: The off_site_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._off_site_duration_minutes = off_site_duration_minutes

    @property
    def on_sla_duration_seconds(self):
        """Gets the on_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501


        :return: The on_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._on_sla_duration_seconds

    @on_sla_duration_seconds.setter
    def on_sla_duration_seconds(self, on_sla_duration_seconds):
        """Sets the on_sla_duration_seconds of this TicketQueryDTO.


        :param on_sla_duration_seconds: The on_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._on_sla_duration_seconds = on_sla_duration_seconds

    @property
    def on_sla_duration_minutes(self):
        """Gets the on_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501


        :return: The on_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._on_sla_duration_minutes

    @on_sla_duration_minutes.setter
    def on_sla_duration_minutes(self, on_sla_duration_minutes):
        """Sets the on_sla_duration_minutes of this TicketQueryDTO.


        :param on_sla_duration_minutes: The on_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._on_sla_duration_minutes = on_sla_duration_minutes

    @property
    def off_sla_duration_seconds(self):
        """Gets the off_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501


        :return: The off_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._off_sla_duration_seconds

    @off_sla_duration_seconds.setter
    def off_sla_duration_seconds(self, off_sla_duration_seconds):
        """Sets the off_sla_duration_seconds of this TicketQueryDTO.


        :param off_sla_duration_seconds: The off_sla_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._off_sla_duration_seconds = off_sla_duration_seconds

    @property
    def off_sla_duration_minutes(self):
        """Gets the off_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501


        :return: The off_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._off_sla_duration_minutes

    @off_sla_duration_minutes.setter
    def off_sla_duration_minutes(self, off_sla_duration_minutes):
        """Sets the off_sla_duration_minutes of this TicketQueryDTO.


        :param off_sla_duration_minutes: The off_sla_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._off_sla_duration_minutes = off_sla_duration_minutes

    @property
    def total_duration_seconds(self):
        """Gets the total_duration_seconds of this TicketQueryDTO.  # noqa: E501


        :return: The total_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._total_duration_seconds

    @total_duration_seconds.setter
    def total_duration_seconds(self, total_duration_seconds):
        """Sets the total_duration_seconds of this TicketQueryDTO.


        :param total_duration_seconds: The total_duration_seconds of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._total_duration_seconds = total_duration_seconds

    @property
    def total_duration_minutes(self):
        """Gets the total_duration_minutes of this TicketQueryDTO.  # noqa: E501


        :return: The total_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._total_duration_minutes

    @total_duration_minutes.setter
    def total_duration_minutes(self, total_duration_minutes):
        """Sets the total_duration_minutes of this TicketQueryDTO.


        :param total_duration_minutes: The total_duration_minutes of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._total_duration_minutes = total_duration_minutes

    @property
    def customer_id(self):
        """Gets the customer_id of this TicketQueryDTO.  # noqa: E501


        :return: The customer_id of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this TicketQueryDTO.


        :param customer_id: The customer_id of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this TicketQueryDTO.  # noqa: E501


        :return: The customer_name of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this TicketQueryDTO.


        :param customer_name: The customer_name of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_business_number(self):
        """Gets the customer_business_number of this TicketQueryDTO.  # noqa: E501


        :return: The customer_business_number of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_business_number

    @customer_business_number.setter
    def customer_business_number(self, customer_business_number):
        """Sets the customer_business_number of this TicketQueryDTO.


        :param customer_business_number: The customer_business_number of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._customer_business_number = customer_business_number

    @property
    def technician_contact_id(self):
        """Gets the technician_contact_id of this TicketQueryDTO.  # noqa: E501


        :return: The technician_contact_id of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._technician_contact_id

    @technician_contact_id.setter
    def technician_contact_id(self, technician_contact_id):
        """Sets the technician_contact_id of this TicketQueryDTO.


        :param technician_contact_id: The technician_contact_id of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._technician_contact_id = technician_contact_id

    @property
    def technician_full_name(self):
        """Gets the technician_full_name of this TicketQueryDTO.  # noqa: E501


        :return: The technician_full_name of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._technician_full_name

    @technician_full_name.setter
    def technician_full_name(self, technician_full_name):
        """Sets the technician_full_name of this TicketQueryDTO.


        :param technician_full_name: The technician_full_name of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._technician_full_name = technician_full_name

    @property
    def technician_email(self):
        """Gets the technician_email of this TicketQueryDTO.  # noqa: E501


        :return: The technician_email of this TicketQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._technician_email

    @technician_email.setter
    def technician_email(self, technician_email):
        """Sets the technician_email of this TicketQueryDTO.


        :param technician_email: The technician_email of this TicketQueryDTO.  # noqa: E501
        :type: str
        """

        self._technician_email = technician_email

    @property
    def contract_id(self):
        """Gets the contract_id of this TicketQueryDTO.  # noqa: E501


        :return: The contract_id of this TicketQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this TicketQueryDTO.


        :param contract_id: The contract_id of this TicketQueryDTO.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TicketQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
