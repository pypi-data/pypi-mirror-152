# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class TicketTimeEntriesQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ticket_id": "int",
        "work_hours_id": "int",
        "start_work_hour": "datetime",
        "end_work_hour": "datetime",
        "technician_contact_id": "int",
        "billiable": "bool",
        "on_customer_site": "bool",
        "description": "str",
        "technician_full_name": "str",
        "technician_email": "str",
    }

    attribute_map = {
        "ticket_id": "TicketID",
        "work_hours_id": "WorkHoursID",
        "start_work_hour": "StartWorkHour",
        "end_work_hour": "EndWorkHour",
        "technician_contact_id": "TechnicianContactID",
        "billiable": "Billiable",
        "on_customer_site": "OnCustomerSite",
        "description": "Description",
        "technician_full_name": "TechnicianFullName",
        "technician_email": "TechnicianEmail",
    }

    def __init__(
        self,
        ticket_id=None,
        work_hours_id=None,
        start_work_hour=None,
        end_work_hour=None,
        technician_contact_id=None,
        billiable=None,
        on_customer_site=None,
        description=None,
        technician_full_name=None,
        technician_email=None,
        _configuration=None,
    ):  # noqa: E501
        """TicketTimeEntriesQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ticket_id = None
        self._work_hours_id = None
        self._start_work_hour = None
        self._end_work_hour = None
        self._technician_contact_id = None
        self._billiable = None
        self._on_customer_site = None
        self._description = None
        self._technician_full_name = None
        self._technician_email = None
        self.discriminator = None

        if ticket_id is not None:
            self.ticket_id = ticket_id
        if work_hours_id is not None:
            self.work_hours_id = work_hours_id
        if start_work_hour is not None:
            self.start_work_hour = start_work_hour
        if end_work_hour is not None:
            self.end_work_hour = end_work_hour
        if technician_contact_id is not None:
            self.technician_contact_id = technician_contact_id
        if billiable is not None:
            self.billiable = billiable
        if on_customer_site is not None:
            self.on_customer_site = on_customer_site
        if description is not None:
            self.description = description
        if technician_full_name is not None:
            self.technician_full_name = technician_full_name
        if technician_email is not None:
            self.technician_email = technician_email

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The ticket_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketTimeEntriesQueryDTO.


        :param ticket_id: The ticket_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: int
        """

        self._ticket_id = ticket_id

    @property
    def work_hours_id(self):
        """Gets the work_hours_id of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The work_hours_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._work_hours_id

    @work_hours_id.setter
    def work_hours_id(self, work_hours_id):
        """Sets the work_hours_id of this TicketTimeEntriesQueryDTO.


        :param work_hours_id: The work_hours_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: int
        """

        self._work_hours_id = work_hours_id

    @property
    def start_work_hour(self):
        """Gets the start_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The start_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._start_work_hour

    @start_work_hour.setter
    def start_work_hour(self, start_work_hour):
        """Sets the start_work_hour of this TicketTimeEntriesQueryDTO.


        :param start_work_hour: The start_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._start_work_hour = start_work_hour

    @property
    def end_work_hour(self):
        """Gets the end_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The end_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._end_work_hour

    @end_work_hour.setter
    def end_work_hour(self, end_work_hour):
        """Sets the end_work_hour of this TicketTimeEntriesQueryDTO.


        :param end_work_hour: The end_work_hour of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: datetime
        """

        self._end_work_hour = end_work_hour

    @property
    def technician_contact_id(self):
        """Gets the technician_contact_id of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The technician_contact_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._technician_contact_id

    @technician_contact_id.setter
    def technician_contact_id(self, technician_contact_id):
        """Sets the technician_contact_id of this TicketTimeEntriesQueryDTO.


        :param technician_contact_id: The technician_contact_id of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: int
        """

        self._technician_contact_id = technician_contact_id

    @property
    def billiable(self):
        """Gets the billiable of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The billiable of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._billiable

    @billiable.setter
    def billiable(self, billiable):
        """Sets the billiable of this TicketTimeEntriesQueryDTO.


        :param billiable: The billiable of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: bool
        """

        self._billiable = billiable

    @property
    def on_customer_site(self):
        """Gets the on_customer_site of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The on_customer_site of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._on_customer_site

    @on_customer_site.setter
    def on_customer_site(self, on_customer_site):
        """Sets the on_customer_site of this TicketTimeEntriesQueryDTO.


        :param on_customer_site: The on_customer_site of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: bool
        """

        self._on_customer_site = on_customer_site

    @property
    def description(self):
        """Gets the description of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The description of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketTimeEntriesQueryDTO.


        :param description: The description of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def technician_full_name(self):
        """Gets the technician_full_name of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The technician_full_name of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._technician_full_name

    @technician_full_name.setter
    def technician_full_name(self, technician_full_name):
        """Sets the technician_full_name of this TicketTimeEntriesQueryDTO.


        :param technician_full_name: The technician_full_name of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: str
        """

        self._technician_full_name = technician_full_name

    @property
    def technician_email(self):
        """Gets the technician_email of this TicketTimeEntriesQueryDTO.  # noqa: E501


        :return: The technician_email of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._technician_email

    @technician_email.setter
    def technician_email(self, technician_email):
        """Sets the technician_email of this TicketTimeEntriesQueryDTO.


        :param technician_email: The technician_email of this TicketTimeEntriesQueryDTO.  # noqa: E501
        :type: str
        """

        self._technician_email = technician_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TicketTimeEntriesQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketTimeEntriesQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketTimeEntriesQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
