# coding: utf-8

"""
    Welcome to the Atera API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atera_client.configuration import Configuration


class TicketTimeEntriesSummaryQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"ticket_id": "int", "billable": "TicketDurationQueryDTO", "non_billable": "TicketDurationQueryDTO"}

    attribute_map = {"ticket_id": "TicketID", "billable": "Billable", "non_billable": "NonBillable"}

    def __init__(self, ticket_id=None, billable=None, non_billable=None, _configuration=None):  # noqa: E501
        """TicketTimeEntriesSummaryQueryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ticket_id = None
        self._billable = None
        self._non_billable = None
        self.discriminator = None

        if ticket_id is not None:
            self.ticket_id = ticket_id
        if billable is not None:
            self.billable = billable
        if non_billable is not None:
            self.non_billable = non_billable

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501


        :return: The ticket_id of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketTimeEntriesSummaryQueryDTO.


        :param ticket_id: The ticket_id of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :type: int
        """

        self._ticket_id = ticket_id

    @property
    def billable(self):
        """Gets the billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501


        :return: The billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :rtype: TicketDurationQueryDTO
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this TicketTimeEntriesSummaryQueryDTO.


        :param billable: The billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :type: TicketDurationQueryDTO
        """

        self._billable = billable

    @property
    def non_billable(self):
        """Gets the non_billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501


        :return: The non_billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :rtype: TicketDurationQueryDTO
        """
        return self._non_billable

    @non_billable.setter
    def non_billable(self, non_billable):
        """Sets the non_billable of this TicketTimeEntriesSummaryQueryDTO.


        :param non_billable: The non_billable of this TicketTimeEntriesSummaryQueryDTO.  # noqa: E501
        :type: TicketDurationQueryDTO
        """

        self._non_billable = non_billable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TicketTimeEntriesSummaryQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketTimeEntriesSummaryQueryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketTimeEntriesSummaryQueryDTO):
            return True

        return self.to_dict() != other.to_dict()
