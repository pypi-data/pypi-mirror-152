# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api import ir_enable_disable_pb2 as bosdyn_dot_api_dot_ir__enable__disable__pb2


class IREnableDisableServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.IREnableDisable = channel.unary_unary(
        '/bosdyn.api.IREnableDisableService/IREnableDisable',
        request_serializer=bosdyn_dot_api_dot_ir__enable__disable__pb2.IREnableDisableRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_ir__enable__disable__pb2.IREnableDisableResponse.FromString,
        )


class IREnableDisableServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def IREnableDisable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IREnableDisableServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'IREnableDisable': grpc.unary_unary_rpc_method_handler(
          servicer.IREnableDisable,
          request_deserializer=bosdyn_dot_api_dot_ir__enable__disable__pb2.IREnableDisableRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_ir__enable__disable__pb2.IREnableDisableResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.IREnableDisableService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
