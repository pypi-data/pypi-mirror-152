import os
import os.path

try:

    import ast
    import setuptools
    import distutils.command.build_ext

    import Cython.Build

    import da.python.extension

except ImportError:

    def build(setup_kwargs):
        pass

else:

    # --------------------------------------------------------------------------
    def build(setup_kwargs):
        """
        This build function will be executed inside
        the setup.py script that is generated by
        poetry. Updated setup_kwargs will be
        passed to the setuptools setup function.

        """

        relpath_src           = 'src'
        relpath_build         = 'build/cython/codegen'
        relpath_include       = 'build/cython/include'
        relpath_output        = 'build/cython/output'
        relfilepath_self      = __file__ if __file__ else argv[0]
        dirpath_lwc_root      = os.path.dirname(os.path.realpath(relfilepath_self))
        dirpath_src           = os.path.join(dirpath_lwc_root, relpath_src)
        dirpath_build         = os.path.join(dirpath_lwc_root, relpath_build)
        dirpath_include       = os.path.join(dirpath_lwc_root, relpath_include)
        dirpath_output        = os.path.join(dirpath_lwc_root, relpath_output)
        filepath_coverage_xml = os.path.join(dirpath_build,    'coverage.xml')

        os.makedirs(dirpath_build,   exist_ok = True)
        os.makedirs(dirpath_include, exist_ok = True)
        os.makedirs(dirpath_output,  exist_ok = True)

        list_setuptools_extension = []
        for map_ext in da.python.extension.iter_map_ext(dirpath_src):
            list_relpath_from_root = [
                os.path.relpath(filepath, dirpath_lwc_root)
                    for filepath in map_ext['list_filepath']]
            list_setuptools_extension.append(
                setuptools.Extension(
                    name                   = map_ext['name_extension'],
                    sources                = list_relpath_from_root,
                    # include_dirs         = [],
                    # define_macros        = [],
                    # undef_macros         = [],
                    # library_dirs         = []
                    # libraries            = [],
                    # runtime_library_dirs = [],
                    # extra_objects        = [],
                    # extra_compile_args   = [],
                    # extra_link_args      = [],
                    # export_symbols       = [],
                    # depends              = [],
                    language             = 'C',
                    optional             = False))

        if not list_setuptools_extension:
            return

        # gcc arguments hack: enable optimizations
        os.environ['CFLAGS'] = '-O3'

        # https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives
        #
        compiler_directives = {

            # Directives controlling code generation.
            #
            'binding':                      True,  # Enable binding to an instance, allowing introspections like argument names and annotations.
            'boundscheck':                  True,  # Generate code to check for index overflow
            'wraparound':                   True,  # Generate code to handle negative indices.
            'initializedcheck':             True,  # Check for initialized memoryviews and classes.
            'nonecheck':                    False, # Enable checks for None when performing field or buffer accesses.
            'overflowcheck':                False, # Raise error on integer overflow.
            'overflowcheck.fold':           True,  # Potential optimization for overflowcheck
            'embedsignature':               False, # Embed text copy of the call signature in the docstring.
            'cdivision':                    False, # Use (faster) C-style integer division
            'cdivision_warnings':           False, # Emit runtime warnings when dividing by a negative operand.
            'always_allow_keywords':        True,
            'c_api_binop_methods':          False,
            'profile':                      False, # Generate code to support python profilers
            'linetrace':                    False,
            'infer_types':                  None,
            'language_level':               3,
            'c_string_type':                'unicode',
            'c_string_encoding':            'utf-8',
            'type_version_tag':             True,
            'unraisable_tracebacks':        True,
            'iterable_coroutine':           False,
            'annotation_typing':            True,
            'emit_code_comments':           True,

            # Directives controlling optimization.
            #
            'optimize.use_switch':          True,
            'optimize.unpack_method_calls': True,

            # Directives controlling warnings.
            #
            'warn.undeclared':              True,
            'warn.unreachable':             True,
            'warn.maybe_uninitialized':     True,
            'warn.unused':                  True,
            'warn.unused_arg':              True,
            'warn.unused_result':           True,
            'warn.multiple_declarators' :   True,
        }

        # https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#cythonize-arguments
        #
        ext_modules = Cython.Build.cythonize(
            list_setuptools_extension,
            exclude                    = None,                 # Module names to exclude
            nthreads                   = 1,                    # Number of threads for parallel compilation.
            aliases                    = None,                 # Build time aliases.
            quiet                      = False,                # Suppress messages
            force                      = True,                 # Force recompilation of cython modules, ignoring timestamps.
            language                   = None,                 # "c++" to enable C++ mode.
            exclude_failures           = False,                # Skip modules with compilation errors.
            annotate                   = True,                 # Generate HTML annotation.
            compiler_directives        = compiler_directives,  # Compiler directives for setup.py
            language_level             = 3,                    # Python3
            verbose                    = True,                 # Print which source files are being compiled to stdout.
            errors_to_stderr           = False,                # Print errors to STDERR
            build_dir                  = dirpath_build,        # Generated C/C++ source files are placed here.
            output_dir                 = dirpath_output,       # Not used?
            common_utility_include_dir = dirpath_include,      # Common header files.
            working_path               = dirpath_lwc_root,     # chdir to this location before build
            annotate_coverage_xml      = filepath_coverage_xml)

            # include_path = [...]

            # c_line_in_traceback                     = True,
            # cache                                   = None,
            # capi_reexport_cincludes                 = 0,
            # compile_time_env                        = None,
            # cplus                                   = 0,
            # create_extension                        = None,
            # embedded_metadata                       = {},
            # emit_linenums                           = False,
            # evaluate_tree_assertions                = False,
            # formal_grammar                          = False,
            # gdb_debug                               = False,
            # generate_pxi                            = 0,
            # np_pythran                              = False,
            # output_file                             = None,
            # relative_path_in_code_position_comments = True,
            # show_version                            = 0,
            # timestamps                              = None,
            # use_listing_file                        = 0,

        # https://setuptools.pypa.io/en/latest/references/keywords.html
        #
        setup_kwargs.update({
            'ext_modules': ext_modules,
            'cmdclass':    {'build_ext': distutils.command.build_ext.build_ext}
        })

