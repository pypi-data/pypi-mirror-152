# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, In your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 1.19.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_client.deci_api.configuration import Configuration


class StopTrainJobResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'str',
        'message': 'str',
        'errors': 'list[str]',
        'stopped': 'bool'
    }

    attribute_map = {
        'task_id': 'taskId',
        'message': 'message',
        'errors': 'errors',
        'stopped': 'stopped'
    }

    def __init__(self, task_id=None, message=None, errors=None, stopped=None, local_vars_configuration=None):  # noqa: E501
        """StopTrainJobResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._message = None
        self._errors = None
        self._stopped = None
        self.discriminator = None

        self.task_id = task_id
        self.message = message
        self.errors = errors
        self.stopped = stopped

    @property
    def task_id(self):
        """Gets the task_id of this StopTrainJobResponse.  # noqa: E501


        :return: The task_id of this StopTrainJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this StopTrainJobResponse.


        :param task_id: The task_id of this StopTrainJobResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def message(self):
        """Gets the message of this StopTrainJobResponse.  # noqa: E501


        :return: The message of this StopTrainJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StopTrainJobResponse.


        :param message: The message of this StopTrainJobResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def errors(self):
        """Gets the errors of this StopTrainJobResponse.  # noqa: E501


        :return: The errors of this StopTrainJobResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this StopTrainJobResponse.


        :param errors: The errors of this StopTrainJobResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def stopped(self):
        """Gets the stopped of this StopTrainJobResponse.  # noqa: E501


        :return: The stopped of this StopTrainJobResponse.  # noqa: E501
        :rtype: bool
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this StopTrainJobResponse.


        :param stopped: The stopped of this StopTrainJobResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and stopped is None:  # noqa: E501
            raise ValueError("Invalid value for `stopped`, must not be `None`")  # noqa: E501

        self._stopped = stopped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StopTrainJobResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StopTrainJobResponse):
            return True

        return self.to_dict() != other.to_dict()
