# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, In your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 1.19.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_client.deci_api.configuration import Configuration


class TrainExperimentArchitectureParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_classes': 'int',
        'multi_gpu_mode': 'str',
        'load_checkpoint': 'bool',
        'load_weights_only': 'bool',
        'strict_load': 'bool',
        'load_backbone': 'bool',
        'source_ckpt_folder_name': 'str'
    }

    attribute_map = {
        'num_classes': 'numClasses',
        'multi_gpu_mode': 'multiGpuMode',
        'load_checkpoint': 'loadCheckpoint',
        'load_weights_only': 'loadWeightsOnly',
        'strict_load': 'strictLoad',
        'load_backbone': 'loadBackbone',
        'source_ckpt_folder_name': 'sourceCkptFolderName'
    }

    def __init__(self, num_classes=None, multi_gpu_mode=None, load_checkpoint=False, load_weights_only=None, strict_load=True, load_backbone=False, source_ckpt_folder_name=None, local_vars_configuration=None):  # noqa: E501
        """TrainExperimentArchitectureParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_classes = None
        self._multi_gpu_mode = None
        self._load_checkpoint = None
        self._load_weights_only = None
        self._strict_load = None
        self._load_backbone = None
        self._source_ckpt_folder_name = None
        self.discriminator = None

        if num_classes is not None:
            self.num_classes = num_classes
        if multi_gpu_mode is not None:
            self.multi_gpu_mode = multi_gpu_mode
        if load_checkpoint is not None:
            self.load_checkpoint = load_checkpoint
        if load_weights_only is not None:
            self.load_weights_only = load_weights_only
        if strict_load is not None:
            self.strict_load = strict_load
        if load_backbone is not None:
            self.load_backbone = load_backbone
        if source_ckpt_folder_name is not None:
            self.source_ckpt_folder_name = source_ckpt_folder_name

    @property
    def num_classes(self):
        """Gets the num_classes of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The num_classes of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: int
        """
        return self._num_classes

    @num_classes.setter
    def num_classes(self, num_classes):
        """Sets the num_classes of this TrainExperimentArchitectureParameters.


        :param num_classes: The num_classes of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: int
        """

        self._num_classes = num_classes

    @property
    def multi_gpu_mode(self):
        """Gets the multi_gpu_mode of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The multi_gpu_mode of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: str
        """
        return self._multi_gpu_mode

    @multi_gpu_mode.setter
    def multi_gpu_mode(self, multi_gpu_mode):
        """Sets the multi_gpu_mode of this TrainExperimentArchitectureParameters.


        :param multi_gpu_mode: The multi_gpu_mode of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: str
        """

        self._multi_gpu_mode = multi_gpu_mode

    @property
    def load_checkpoint(self):
        """Gets the load_checkpoint of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The load_checkpoint of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: bool
        """
        return self._load_checkpoint

    @load_checkpoint.setter
    def load_checkpoint(self, load_checkpoint):
        """Sets the load_checkpoint of this TrainExperimentArchitectureParameters.


        :param load_checkpoint: The load_checkpoint of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: bool
        """

        self._load_checkpoint = load_checkpoint

    @property
    def load_weights_only(self):
        """Gets the load_weights_only of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The load_weights_only of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: bool
        """
        return self._load_weights_only

    @load_weights_only.setter
    def load_weights_only(self, load_weights_only):
        """Sets the load_weights_only of this TrainExperimentArchitectureParameters.


        :param load_weights_only: The load_weights_only of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: bool
        """

        self._load_weights_only = load_weights_only

    @property
    def strict_load(self):
        """Gets the strict_load of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The strict_load of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: bool
        """
        return self._strict_load

    @strict_load.setter
    def strict_load(self, strict_load):
        """Sets the strict_load of this TrainExperimentArchitectureParameters.


        :param strict_load: The strict_load of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: bool
        """

        self._strict_load = strict_load

    @property
    def load_backbone(self):
        """Gets the load_backbone of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The load_backbone of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: bool
        """
        return self._load_backbone

    @load_backbone.setter
    def load_backbone(self, load_backbone):
        """Sets the load_backbone of this TrainExperimentArchitectureParameters.


        :param load_backbone: The load_backbone of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: bool
        """

        self._load_backbone = load_backbone

    @property
    def source_ckpt_folder_name(self):
        """Gets the source_ckpt_folder_name of this TrainExperimentArchitectureParameters.  # noqa: E501


        :return: The source_ckpt_folder_name of this TrainExperimentArchitectureParameters.  # noqa: E501
        :rtype: str
        """
        return self._source_ckpt_folder_name

    @source_ckpt_folder_name.setter
    def source_ckpt_folder_name(self, source_ckpt_folder_name):
        """Sets the source_ckpt_folder_name of this TrainExperimentArchitectureParameters.


        :param source_ckpt_folder_name: The source_ckpt_folder_name of this TrainExperimentArchitectureParameters.  # noqa: E501
        :type: str
        """

        self._source_ckpt_folder_name = source_ckpt_folder_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainExperimentArchitectureParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrainExperimentArchitectureParameters):
            return True

        return self.to_dict() != other.to_dict()
