# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, In your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 1.19.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_client.deci_api.configuration import Configuration


class TrainExperimentDataSetParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_size': 'int',
        'test_batch_size': 'int',
        'batch_accumulate': 'int',
        'dataset_dir': 'str',
        's3_link': 'str',
        'img_size': 'int',
        'train_loader_drop_last': 'bool',
        'sub_classes_inclusion_dict': 'dict(str, str)'
    }

    attribute_map = {
        'batch_size': 'batchSize',
        'test_batch_size': 'testBatchSize',
        'batch_accumulate': 'batchAccumulate',
        'dataset_dir': 'datasetDir',
        's3_link': 's3Link',
        'img_size': 'imgSize',
        'train_loader_drop_last': 'trainLoaderDropLast',
        'sub_classes_inclusion_dict': 'subClassesInclusionDict'
    }

    def __init__(self, batch_size=None, test_batch_size=None, batch_accumulate=1, dataset_dir=None, s3_link=None, img_size=None, train_loader_drop_last=False, sub_classes_inclusion_dict=None, local_vars_configuration=None):  # noqa: E501
        """TrainExperimentDataSetParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_size = None
        self._test_batch_size = None
        self._batch_accumulate = None
        self._dataset_dir = None
        self._s3_link = None
        self._img_size = None
        self._train_loader_drop_last = None
        self._sub_classes_inclusion_dict = None
        self.discriminator = None

        self.batch_size = batch_size
        self.test_batch_size = test_batch_size
        if batch_accumulate is not None:
            self.batch_accumulate = batch_accumulate
        if dataset_dir is not None:
            self.dataset_dir = dataset_dir
        if s3_link is not None:
            self.s3_link = s3_link
        if img_size is not None:
            self.img_size = img_size
        if train_loader_drop_last is not None:
            self.train_loader_drop_last = train_loader_drop_last
        if sub_classes_inclusion_dict is not None:
            self.sub_classes_inclusion_dict = sub_classes_inclusion_dict

    @property
    def batch_size(self):
        """Gets the batch_size of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The batch_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this TrainExperimentDataSetParameters.


        :param batch_size: The batch_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and batch_size is None:  # noqa: E501
            raise ValueError("Invalid value for `batch_size`, must not be `None`")  # noqa: E501

        self._batch_size = batch_size

    @property
    def test_batch_size(self):
        """Gets the test_batch_size of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The test_batch_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: int
        """
        return self._test_batch_size

    @test_batch_size.setter
    def test_batch_size(self, test_batch_size):
        """Sets the test_batch_size of this TrainExperimentDataSetParameters.


        :param test_batch_size: The test_batch_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and test_batch_size is None:  # noqa: E501
            raise ValueError("Invalid value for `test_batch_size`, must not be `None`")  # noqa: E501

        self._test_batch_size = test_batch_size

    @property
    def batch_accumulate(self):
        """Gets the batch_accumulate of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The batch_accumulate of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: int
        """
        return self._batch_accumulate

    @batch_accumulate.setter
    def batch_accumulate(self, batch_accumulate):
        """Sets the batch_accumulate of this TrainExperimentDataSetParameters.


        :param batch_accumulate: The batch_accumulate of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: int
        """

        self._batch_accumulate = batch_accumulate

    @property
    def dataset_dir(self):
        """Gets the dataset_dir of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The dataset_dir of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: str
        """
        return self._dataset_dir

    @dataset_dir.setter
    def dataset_dir(self, dataset_dir):
        """Sets the dataset_dir of this TrainExperimentDataSetParameters.


        :param dataset_dir: The dataset_dir of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: str
        """

        self._dataset_dir = dataset_dir

    @property
    def s3_link(self):
        """Gets the s3_link of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The s3_link of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: str
        """
        return self._s3_link

    @s3_link.setter
    def s3_link(self, s3_link):
        """Sets the s3_link of this TrainExperimentDataSetParameters.


        :param s3_link: The s3_link of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: str
        """

        self._s3_link = s3_link

    @property
    def img_size(self):
        """Gets the img_size of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The img_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: int
        """
        return self._img_size

    @img_size.setter
    def img_size(self, img_size):
        """Sets the img_size of this TrainExperimentDataSetParameters.


        :param img_size: The img_size of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: int
        """

        self._img_size = img_size

    @property
    def train_loader_drop_last(self):
        """Gets the train_loader_drop_last of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The train_loader_drop_last of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: bool
        """
        return self._train_loader_drop_last

    @train_loader_drop_last.setter
    def train_loader_drop_last(self, train_loader_drop_last):
        """Sets the train_loader_drop_last of this TrainExperimentDataSetParameters.


        :param train_loader_drop_last: The train_loader_drop_last of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: bool
        """

        self._train_loader_drop_last = train_loader_drop_last

    @property
    def sub_classes_inclusion_dict(self):
        """Gets the sub_classes_inclusion_dict of this TrainExperimentDataSetParameters.  # noqa: E501


        :return: The sub_classes_inclusion_dict of this TrainExperimentDataSetParameters.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._sub_classes_inclusion_dict

    @sub_classes_inclusion_dict.setter
    def sub_classes_inclusion_dict(self, sub_classes_inclusion_dict):
        """Sets the sub_classes_inclusion_dict of this TrainExperimentDataSetParameters.


        :param sub_classes_inclusion_dict: The sub_classes_inclusion_dict of this TrainExperimentDataSetParameters.  # noqa: E501
        :type: dict(str, str)
        """

        self._sub_classes_inclusion_dict = sub_classes_inclusion_dict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainExperimentDataSetParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrainExperimentDataSetParameters):
            return True

        return self.to_dict() != other.to_dict()
