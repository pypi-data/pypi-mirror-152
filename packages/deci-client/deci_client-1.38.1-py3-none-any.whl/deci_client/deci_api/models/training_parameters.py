# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, In your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 1.19.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_client.deci_api.configuration import Configuration


class TrainingParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dl_task': 'str',
        'model': 'str',
        'dataset': 'str',
        'data_loader_workers_num': 'int',
        'train_experiment_name': 'str',
        'model_checkpoints_data_source': 'str',
        'gpus_num': 'int',
        'ckpt_name': 'str',
        'epoch_metric_headers': 'object',
        'results_titles': 'list[object]',
        'tensorboard_port': 'int',
        'train_experiment_hyper_params': 'TrainExperimentHyperParameters',
        'train_experiment_dataset_params': 'TrainExperimentDataSetParameters',
        'train_experiment_arch_params': 'TrainExperimentArchitectureParameters'
    }

    attribute_map = {
        'dl_task': 'dlTask',
        'model': 'model',
        'dataset': 'dataset',
        'data_loader_workers_num': 'dataLoaderWorkersNum',
        'train_experiment_name': 'trainExperimentName',
        'model_checkpoints_data_source': 'modelCheckpointsDataSource',
        'gpus_num': 'gpusNum',
        'ckpt_name': 'ckptName',
        'epoch_metric_headers': 'epochMetricHeaders',
        'results_titles': 'resultsTitles',
        'tensorboard_port': 'tensorboardPort',
        'train_experiment_hyper_params': 'trainExperimentHyperParams',
        'train_experiment_dataset_params': 'trainExperimentDatasetParams',
        'train_experiment_arch_params': 'trainExperimentArchParams'
    }

    def __init__(self, dl_task=None, model=None, dataset=None, data_loader_workers_num=None, train_experiment_name=None, model_checkpoints_data_source=None, gpus_num=None, ckpt_name=None, epoch_metric_headers=None, results_titles=None, tensorboard_port=6006, train_experiment_hyper_params=None, train_experiment_dataset_params=None, train_experiment_arch_params=None, local_vars_configuration=None):  # noqa: E501
        """TrainingParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dl_task = None
        self._model = None
        self._dataset = None
        self._data_loader_workers_num = None
        self._train_experiment_name = None
        self._model_checkpoints_data_source = None
        self._gpus_num = None
        self._ckpt_name = None
        self._epoch_metric_headers = None
        self._results_titles = None
        self._tensorboard_port = None
        self._train_experiment_hyper_params = None
        self._train_experiment_dataset_params = None
        self._train_experiment_arch_params = None
        self.discriminator = None

        self.dl_task = dl_task
        self.model = model
        self.dataset = dataset
        self.data_loader_workers_num = data_loader_workers_num
        self.train_experiment_name = train_experiment_name
        self.model_checkpoints_data_source = model_checkpoints_data_source
        self.gpus_num = gpus_num
        if ckpt_name is not None:
            self.ckpt_name = ckpt_name
        if epoch_metric_headers is not None:
            self.epoch_metric_headers = epoch_metric_headers
        if results_titles is not None:
            self.results_titles = results_titles
        if tensorboard_port is not None:
            self.tensorboard_port = tensorboard_port
        self.train_experiment_hyper_params = train_experiment_hyper_params
        if train_experiment_dataset_params is not None:
            self.train_experiment_dataset_params = train_experiment_dataset_params
        if train_experiment_arch_params is not None:
            self.train_experiment_arch_params = train_experiment_arch_params

    @property
    def dl_task(self):
        """Gets the dl_task of this TrainingParameters.  # noqa: E501


        :return: The dl_task of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._dl_task

    @dl_task.setter
    def dl_task(self, dl_task):
        """Sets the dl_task of this TrainingParameters.


        :param dl_task: The dl_task of this TrainingParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dl_task is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task`, must not be `None`")  # noqa: E501

        self._dl_task = dl_task

    @property
    def model(self):
        """Gets the model of this TrainingParameters.  # noqa: E501


        :return: The model of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TrainingParameters.


        :param model: The model of this TrainingParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def dataset(self):
        """Gets the dataset of this TrainingParameters.  # noqa: E501


        :return: The dataset of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this TrainingParameters.


        :param dataset: The dataset of this TrainingParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def data_loader_workers_num(self):
        """Gets the data_loader_workers_num of this TrainingParameters.  # noqa: E501


        :return: The data_loader_workers_num of this TrainingParameters.  # noqa: E501
        :rtype: int
        """
        return self._data_loader_workers_num

    @data_loader_workers_num.setter
    def data_loader_workers_num(self, data_loader_workers_num):
        """Sets the data_loader_workers_num of this TrainingParameters.


        :param data_loader_workers_num: The data_loader_workers_num of this TrainingParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and data_loader_workers_num is None:  # noqa: E501
            raise ValueError("Invalid value for `data_loader_workers_num`, must not be `None`")  # noqa: E501

        self._data_loader_workers_num = data_loader_workers_num

    @property
    def train_experiment_name(self):
        """Gets the train_experiment_name of this TrainingParameters.  # noqa: E501


        :return: The train_experiment_name of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._train_experiment_name

    @train_experiment_name.setter
    def train_experiment_name(self, train_experiment_name):
        """Sets the train_experiment_name of this TrainingParameters.


        :param train_experiment_name: The train_experiment_name of this TrainingParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and train_experiment_name is None:  # noqa: E501
            raise ValueError("Invalid value for `train_experiment_name`, must not be `None`")  # noqa: E501

        self._train_experiment_name = train_experiment_name

    @property
    def model_checkpoints_data_source(self):
        """Gets the model_checkpoints_data_source of this TrainingParameters.  # noqa: E501


        :return: The model_checkpoints_data_source of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._model_checkpoints_data_source

    @model_checkpoints_data_source.setter
    def model_checkpoints_data_source(self, model_checkpoints_data_source):
        """Sets the model_checkpoints_data_source of this TrainingParameters.


        :param model_checkpoints_data_source: The model_checkpoints_data_source of this TrainingParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_checkpoints_data_source is None:  # noqa: E501
            raise ValueError("Invalid value for `model_checkpoints_data_source`, must not be `None`")  # noqa: E501

        self._model_checkpoints_data_source = model_checkpoints_data_source

    @property
    def gpus_num(self):
        """Gets the gpus_num of this TrainingParameters.  # noqa: E501


        :return: The gpus_num of this TrainingParameters.  # noqa: E501
        :rtype: int
        """
        return self._gpus_num

    @gpus_num.setter
    def gpus_num(self, gpus_num):
        """Sets the gpus_num of this TrainingParameters.


        :param gpus_num: The gpus_num of this TrainingParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and gpus_num is None:  # noqa: E501
            raise ValueError("Invalid value for `gpus_num`, must not be `None`")  # noqa: E501

        self._gpus_num = gpus_num

    @property
    def ckpt_name(self):
        """Gets the ckpt_name of this TrainingParameters.  # noqa: E501


        :return: The ckpt_name of this TrainingParameters.  # noqa: E501
        :rtype: str
        """
        return self._ckpt_name

    @ckpt_name.setter
    def ckpt_name(self, ckpt_name):
        """Sets the ckpt_name of this TrainingParameters.


        :param ckpt_name: The ckpt_name of this TrainingParameters.  # noqa: E501
        :type: str
        """

        self._ckpt_name = ckpt_name

    @property
    def epoch_metric_headers(self):
        """Gets the epoch_metric_headers of this TrainingParameters.  # noqa: E501


        :return: The epoch_metric_headers of this TrainingParameters.  # noqa: E501
        :rtype: object
        """
        return self._epoch_metric_headers

    @epoch_metric_headers.setter
    def epoch_metric_headers(self, epoch_metric_headers):
        """Sets the epoch_metric_headers of this TrainingParameters.


        :param epoch_metric_headers: The epoch_metric_headers of this TrainingParameters.  # noqa: E501
        :type: object
        """

        self._epoch_metric_headers = epoch_metric_headers

    @property
    def results_titles(self):
        """Gets the results_titles of this TrainingParameters.  # noqa: E501


        :return: The results_titles of this TrainingParameters.  # noqa: E501
        :rtype: list[object]
        """
        return self._results_titles

    @results_titles.setter
    def results_titles(self, results_titles):
        """Sets the results_titles of this TrainingParameters.


        :param results_titles: The results_titles of this TrainingParameters.  # noqa: E501
        :type: list[object]
        """

        self._results_titles = results_titles

    @property
    def tensorboard_port(self):
        """Gets the tensorboard_port of this TrainingParameters.  # noqa: E501


        :return: The tensorboard_port of this TrainingParameters.  # noqa: E501
        :rtype: int
        """
        return self._tensorboard_port

    @tensorboard_port.setter
    def tensorboard_port(self, tensorboard_port):
        """Sets the tensorboard_port of this TrainingParameters.


        :param tensorboard_port: The tensorboard_port of this TrainingParameters.  # noqa: E501
        :type: int
        """

        self._tensorboard_port = tensorboard_port

    @property
    def train_experiment_hyper_params(self):
        """Gets the train_experiment_hyper_params of this TrainingParameters.  # noqa: E501


        :return: The train_experiment_hyper_params of this TrainingParameters.  # noqa: E501
        :rtype: TrainExperimentHyperParameters
        """
        return self._train_experiment_hyper_params

    @train_experiment_hyper_params.setter
    def train_experiment_hyper_params(self, train_experiment_hyper_params):
        """Sets the train_experiment_hyper_params of this TrainingParameters.


        :param train_experiment_hyper_params: The train_experiment_hyper_params of this TrainingParameters.  # noqa: E501
        :type: TrainExperimentHyperParameters
        """
        if self.local_vars_configuration.client_side_validation and train_experiment_hyper_params is None:  # noqa: E501
            raise ValueError("Invalid value for `train_experiment_hyper_params`, must not be `None`")  # noqa: E501

        self._train_experiment_hyper_params = train_experiment_hyper_params

    @property
    def train_experiment_dataset_params(self):
        """Gets the train_experiment_dataset_params of this TrainingParameters.  # noqa: E501


        :return: The train_experiment_dataset_params of this TrainingParameters.  # noqa: E501
        :rtype: TrainExperimentDataSetParameters
        """
        return self._train_experiment_dataset_params

    @train_experiment_dataset_params.setter
    def train_experiment_dataset_params(self, train_experiment_dataset_params):
        """Sets the train_experiment_dataset_params of this TrainingParameters.


        :param train_experiment_dataset_params: The train_experiment_dataset_params of this TrainingParameters.  # noqa: E501
        :type: TrainExperimentDataSetParameters
        """

        self._train_experiment_dataset_params = train_experiment_dataset_params

    @property
    def train_experiment_arch_params(self):
        """Gets the train_experiment_arch_params of this TrainingParameters.  # noqa: E501


        :return: The train_experiment_arch_params of this TrainingParameters.  # noqa: E501
        :rtype: TrainExperimentArchitectureParameters
        """
        return self._train_experiment_arch_params

    @train_experiment_arch_params.setter
    def train_experiment_arch_params(self, train_experiment_arch_params):
        """Sets the train_experiment_arch_params of this TrainingParameters.


        :param train_experiment_arch_params: The train_experiment_arch_params of this TrainingParameters.  # noqa: E501
        :type: TrainExperimentArchitectureParameters
        """

        self._train_experiment_arch_params = train_experiment_arch_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrainingParameters):
            return True

        return self.to_dict() != other.to_dict()
