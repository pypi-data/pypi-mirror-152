# coding: utf-8

"""
    Deci RTiC API

    Serves any model with robust runtime.  # noqa: E501

    The version of the OpenAPI document: 2.2.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from deci_client.rtic.api_client import ApiClient
from deci_client.rtic.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InferencerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def de_register_model(self, model_name, **kwargs):  # noqa: E501
        """Deregister Model  # noqa: E501

        Stops the serving of a model and disposes it's resources (RAM, GPU Memory, etc).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.de_register_model(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model to dispose. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseDict
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.de_register_model_with_http_info(model_name, **kwargs)  # noqa: E501

    def de_register_model_with_http_info(self, model_name, **kwargs):  # noqa: E501
        """Deregister Model  # noqa: E501

        Stops the serving of a model and disposes it's resources (RAM, GPU Memory, etc).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.de_register_model_with_http_info(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model to dispose. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseDict, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method de_register_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `de_register_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_name' in local_var_params and local_var_params['model_name'] is not None:  # noqa: E501
            query_params.append(('model_name', local_var_params['model_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/de-register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseDict',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model(self, model_name, **kwargs):  # noqa: E501
        """Get Model By Name  # noqa: E501

        Gets all the available information on a served model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseRTiCModelMetaData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_with_http_info(model_name, **kwargs)  # noqa: E501

    def get_model_with_http_info(self, model_name, **kwargs):  # noqa: E501
        """Get Model By Name  # noqa: E501

        Gets all the available information on a served model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_with_http_info(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseRTiCModelMetaData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `get_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_name' in local_var_params:
            path_params['model_name'] = local_var_params['model_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/model/{model_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseRTiCModelMetaData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_registered_models(self, **kwargs):  # noqa: E501
        """Get Registered Models  # noqa: E501

        Gets all the available information on all the served models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_registered_models(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseDictUuidUUIDRticAppControllersRticControllerRTiCModelMetaData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_registered_models_with_http_info(**kwargs)  # noqa: E501

    def list_registered_models_with_http_info(self, **kwargs):  # noqa: E501
        """Get Registered Models  # noqa: E501

        Gets all the available information on all the served models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_registered_models_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseDictUuidUUIDRticAppControllersRticControllerRTiCModelMetaData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_registered_models" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseDictUuidUUIDRticAppControllersRticControllerRTiCModelMetaData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def measure(self, model_name, batch_size, input_dims, **kwargs):  # noqa: E501
        """Measure Model  # noqa: E501

        Measures the mode's runtime benchmarks on the current hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.measure(model_name, batch_size, input_dims, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model. (required)
        :param int batch_size: The batch size to use. (required)
        :param list[int] input_dims: (required)
        :param int repetitions: How many batches to run (iterations). An average is taken.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseDict
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.measure_with_http_info(model_name, batch_size, input_dims, **kwargs)  # noqa: E501

    def measure_with_http_info(self, model_name, batch_size, input_dims, **kwargs):  # noqa: E501
        """Measure Model  # noqa: E501

        Measures the mode's runtime benchmarks on the current hardware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.measure_with_http_info(model_name, batch_size, input_dims, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model. (required)
        :param int batch_size: The batch size to use. (required)
        :param list[int] input_dims: (required)
        :param int repetitions: How many batches to run (iterations). An average is taken.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseDict, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_name',
            'batch_size',
            'input_dims',
            'repetitions'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method measure" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `measure`")  # noqa: E501
        # verify the required parameter 'batch_size' is set
        if self.api_client.client_side_validation and ('batch_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['batch_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `batch_size` when calling `measure`")  # noqa: E501
        # verify the required parameter 'input_dims' is set
        if self.api_client.client_side_validation and ('input_dims' not in local_var_params or  # noqa: E501
                                                        local_var_params['input_dims'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `input_dims` when calling `measure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_name' in local_var_params and local_var_params['model_name'] is not None:  # noqa: E501
            query_params.append(('model_name', local_var_params['model_name']))  # noqa: E501
        if 'batch_size' in local_var_params and local_var_params['batch_size'] is not None:  # noqa: E501
            query_params.append(('batch_size', local_var_params['batch_size']))  # noqa: E501
        if 'repetitions' in local_var_params and local_var_params['repetitions'] is not None:  # noqa: E501
            query_params.append(('repetitions', local_var_params['repetitions']))  # noqa: E501
        if 'input_dims' in local_var_params and local_var_params['input_dims'] is not None:  # noqa: E501
            query_params.append(('input_dims', local_var_params['input_dims']))  # noqa: E501
            collection_formats['input_dims'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/measure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseDict',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def predict(self, model_name, **kwargs):  # noqa: E501
        """Predict  # noqa: E501

        Predict (Classify) input tensors. The request body is the input tensor, serialized with nump. Use Deci's API client for maximum result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model. (required)
        :param str x_deci_transport: A header that determines the source (transport protocol) for the input and output tensors.
        :param str x_shared_memory_path: A header that determines the source (transport protocol) for the input and output tensors.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.predict_with_http_info(model_name, **kwargs)  # noqa: E501

    def predict_with_http_info(self, model_name, **kwargs):  # noqa: E501
        """Predict  # noqa: E501

        Predict (Classify) input tensors. The request body is the input tensor, serialized with nump. Use Deci's API client for maximum result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict_with_http_info(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: The unique name of the model. (required)
        :param str x_deci_transport: A header that determines the source (transport protocol) for the input and output tensors.
        :param str x_shared_memory_path: A header that determines the source (transport protocol) for the input and output tensors.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_name',
            'x_deci_transport',
            'x_shared_memory_path'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method predict" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `predict`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_name' in local_var_params:
            path_params['model_name'] = local_var_params['model_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_deci_transport' in local_var_params:
            header_params['x-deci-transport'] = local_var_params['x_deci_transport']  # noqa: E501
        if 'x_shared_memory_path' in local_var_params:
            header_params['x-shared-memory-path'] = local_var_params['x_shared_memory_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/predict/{model_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_model(self, model_name, framework_type, inference_hardware, model_weights_source, weights_path, **kwargs):  # noqa: E501
        """Register Model  # noqa: E501

        Loads (registers) a new model runtime for inference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_model(model_name, framework_type, inference_hardware, model_weights_source, weights_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: A unique name for the model. Further operations on the model will use this name for context. (required)
        :param FrameworkType framework_type: The Deep Learning framework of the model. Must be one of: tf1, tf2, pytorch, onnx, torchscript, trt, tvm, openvino, keras, tflite (required)
        :param InferenceHardware inference_hardware: The hardware to use. Must be one of: cpu, gpu (required)
        :param ModelWeightsSource model_weights_source: The source of the model weights. Must be one of: local, s3, gcp, azure (required)
        :param str weights_path: The full url (path) to the model's weights, according to the data source. (required)
        :param str tensorflow_input_layer_name: The input layer name in Tensorflow. Must be present only if the framework type is tensorflow.
        :param str tensorflow_output_layer_name: The output layer name in Tensorflow. Must be present only if the framework type is tensorflow.
        :param DataTransportProtocol transport: The transport protocol that will be used for inference. Default is HTTP. Consider using IPC (Inner-Process-Communication using shared memory) for big batch sizes, to prevent network (TCP) overhead.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseRTiCModelMetaData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.register_model_with_http_info(model_name, framework_type, inference_hardware, model_weights_source, weights_path, **kwargs)  # noqa: E501

    def register_model_with_http_info(self, model_name, framework_type, inference_hardware, model_weights_source, weights_path, **kwargs):  # noqa: E501
        """Register Model  # noqa: E501

        Loads (registers) a new model runtime for inference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_model_with_http_info(model_name, framework_type, inference_hardware, model_weights_source, weights_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: A unique name for the model. Further operations on the model will use this name for context. (required)
        :param FrameworkType framework_type: The Deep Learning framework of the model. Must be one of: tf1, tf2, pytorch, onnx, torchscript, trt, tvm, openvino, keras, tflite (required)
        :param InferenceHardware inference_hardware: The hardware to use. Must be one of: cpu, gpu (required)
        :param ModelWeightsSource model_weights_source: The source of the model weights. Must be one of: local, s3, gcp, azure (required)
        :param str weights_path: The full url (path) to the model's weights, according to the data source. (required)
        :param str tensorflow_input_layer_name: The input layer name in Tensorflow. Must be present only if the framework type is tensorflow.
        :param str tensorflow_output_layer_name: The output layer name in Tensorflow. Must be present only if the framework type is tensorflow.
        :param DataTransportProtocol transport: The transport protocol that will be used for inference. Default is HTTP. Consider using IPC (Inner-Process-Communication using shared memory) for big batch sizes, to prevent network (TCP) overhead.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseRTiCModelMetaData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_name',
            'framework_type',
            'inference_hardware',
            'model_weights_source',
            'weights_path',
            'tensorflow_input_layer_name',
            'tensorflow_output_layer_name',
            'transport'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `register_model`")  # noqa: E501
        # verify the required parameter 'framework_type' is set
        if self.api_client.client_side_validation and ('framework_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['framework_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `framework_type` when calling `register_model`")  # noqa: E501
        # verify the required parameter 'inference_hardware' is set
        if self.api_client.client_side_validation and ('inference_hardware' not in local_var_params or  # noqa: E501
                                                        local_var_params['inference_hardware'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inference_hardware` when calling `register_model`")  # noqa: E501
        # verify the required parameter 'model_weights_source' is set
        if self.api_client.client_side_validation and ('model_weights_source' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_weights_source'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_weights_source` when calling `register_model`")  # noqa: E501
        # verify the required parameter 'weights_path' is set
        if self.api_client.client_side_validation and ('weights_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['weights_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `weights_path` when calling `register_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_name' in local_var_params and local_var_params['model_name'] is not None:  # noqa: E501
            query_params.append(('model_name', local_var_params['model_name']))  # noqa: E501
        if 'framework_type' in local_var_params and local_var_params['framework_type'] is not None:  # noqa: E501
            query_params.append(('framework_type', local_var_params['framework_type']))  # noqa: E501
        if 'inference_hardware' in local_var_params and local_var_params['inference_hardware'] is not None:  # noqa: E501
            query_params.append(('inference_hardware', local_var_params['inference_hardware']))  # noqa: E501
        if 'model_weights_source' in local_var_params and local_var_params['model_weights_source'] is not None:  # noqa: E501
            query_params.append(('model_weights_source', local_var_params['model_weights_source']))  # noqa: E501
        if 'weights_path' in local_var_params and local_var_params['weights_path'] is not None:  # noqa: E501
            query_params.append(('weights_path', local_var_params['weights_path']))  # noqa: E501
        if 'tensorflow_input_layer_name' in local_var_params and local_var_params['tensorflow_input_layer_name'] is not None:  # noqa: E501
            query_params.append(('tensorflow_input_layer_name', local_var_params['tensorflow_input_layer_name']))  # noqa: E501
        if 'tensorflow_output_layer_name' in local_var_params and local_var_params['tensorflow_output_layer_name'] is not None:  # noqa: E501
            query_params.append(('tensorflow_output_layer_name', local_var_params['tensorflow_output_layer_name']))  # noqa: E501
        if 'transport' in local_var_params and local_var_params['transport'] is not None:  # noqa: E501
            query_params.append(('transport', local_var_params['transport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseRTiCModelMetaData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_model_from_repository(self, model_id, model_name, **kwargs):  # noqa: E501
        """Register Model From Repository  # noqa: E501

        Loads (registers) a new model runtime for inference from your company's model repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_model_from_repository(model_id, model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_id: The unique id of the model in the model repository. The model must be already registered in the Deci Platform. (required)
        :param str model_name: A unique name for the model. Further operations on the model will use this name for context. (required)
        :param DataTransportProtocol transport: The transport protocol that will be used for inference. Default is HTTP. Consider using IPC (Inner-Process-Communication using shared memory) for big batch sizes, to prevent network (TCP) overhead.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponseRTiCModelMetaData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.register_model_from_repository_with_http_info(model_id, model_name, **kwargs)  # noqa: E501

    def register_model_from_repository_with_http_info(self, model_id, model_name, **kwargs):  # noqa: E501
        """Register Model From Repository  # noqa: E501

        Loads (registers) a new model runtime for inference from your company's model repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_model_from_repository_with_http_info(model_id, model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_id: The unique id of the model in the model repository. The model must be already registered in the Deci Platform. (required)
        :param str model_name: A unique name for the model. Further operations on the model will use this name for context. (required)
        :param DataTransportProtocol transport: The transport protocol that will be used for inference. Default is HTTP. Consider using IPC (Inner-Process-Communication using shared memory) for big batch sizes, to prevent network (TCP) overhead.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponseRTiCModelMetaData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'model_name',
            'transport'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_model_from_repository" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and ('model_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `register_model_from_repository`")  # noqa: E501
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `register_model_from_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_id' in local_var_params and local_var_params['model_id'] is not None:  # noqa: E501
            query_params.append(('model_id', local_var_params['model_id']))  # noqa: E501
        if 'model_name' in local_var_params and local_var_params['model_name'] is not None:  # noqa: E501
            query_params.append(('model_name', local_var_params['model_name']))  # noqa: E501
        if 'transport' in local_var_params and local_var_params['transport'] is not None:  # noqa: E501
            query_params.append(('transport', local_var_params['transport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/repository/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponseRTiCModelMetaData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_platform_api_key(self, token, **kwargs):  # noqa: E501
        """Set Platform Api Key  # noqa: E501

        Sets an API key for platform authentication. The API key is generated in the platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_platform_api_key(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: The API key to use. The key is generated in the client. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.set_platform_api_key_with_http_info(token, **kwargs)  # noqa: E501

    def set_platform_api_key_with_http_info(self, token, **kwargs):  # noqa: E501
        """Set Platform Api Key  # noqa: E501

        Sets an API key for platform authentication. The API key is generated in the platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_platform_api_key_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: The API key to use. The key is generated in the client. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(APIResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_platform_api_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `set_platform_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/platform', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
