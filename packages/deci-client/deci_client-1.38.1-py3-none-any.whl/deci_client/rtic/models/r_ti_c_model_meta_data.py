# coding: utf-8

"""
    Deci RTiC API

    Serves any model with robust runtime.  # noqa: E501

    The version of the OpenAPI document: 2.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_client.rtic.configuration import Configuration


class RTiCModelMetaData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_name': 'str',
        'model_uuid': 'str',
        'state': 'RegisteredModelState',
        'inference_framework': 'FrameworkType',
        'inference_hw': 'InferenceHardware',
        'errors': 'list[str]',
        'transport': 'DataTransportProtocol',
        'input_tensors': 'list[RTiCTensorMetadata]',
        'output_tensors': 'list[RTiCTensorMetadata]',
        'platform_model_uuid': 'str'
    }

    attribute_map = {
        'model_name': 'modelName',
        'model_uuid': 'modelUuid',
        'state': 'state',
        'inference_framework': 'inferenceFramework',
        'inference_hw': 'inferenceHw',
        'errors': 'errors',
        'transport': 'transport',
        'input_tensors': 'inputTensors',
        'output_tensors': 'outputTensors',
        'platform_model_uuid': 'platformModelUuid'
    }

    def __init__(self, model_name=None, model_uuid=None, state=None, inference_framework=None, inference_hw=None, errors=[], transport=None, input_tensors=[], output_tensors=[], platform_model_uuid=None, local_vars_configuration=None):  # noqa: E501
        """RTiCModelMetaData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_name = None
        self._model_uuid = None
        self._state = None
        self._inference_framework = None
        self._inference_hw = None
        self._errors = None
        self._transport = None
        self._input_tensors = None
        self._output_tensors = None
        self._platform_model_uuid = None
        self.discriminator = None

        self.model_name = model_name
        self.model_uuid = model_uuid
        self.state = state
        self.inference_framework = inference_framework
        self.inference_hw = inference_hw
        if errors is not None:
            self.errors = errors
        if transport is not None:
            self.transport = transport
        if input_tensors is not None:
            self.input_tensors = input_tensors
        if output_tensors is not None:
            self.output_tensors = output_tensors
        if platform_model_uuid is not None:
            self.platform_model_uuid = platform_model_uuid

    @property
    def model_name(self):
        """Gets the model_name of this RTiCModelMetaData.  # noqa: E501


        :return: The model_name of this RTiCModelMetaData.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this RTiCModelMetaData.


        :param model_name: The model_name of this RTiCModelMetaData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_name is None:  # noqa: E501
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def model_uuid(self):
        """Gets the model_uuid of this RTiCModelMetaData.  # noqa: E501


        :return: The model_uuid of this RTiCModelMetaData.  # noqa: E501
        :rtype: str
        """
        return self._model_uuid

    @model_uuid.setter
    def model_uuid(self, model_uuid):
        """Sets the model_uuid of this RTiCModelMetaData.


        :param model_uuid: The model_uuid of this RTiCModelMetaData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `model_uuid`, must not be `None`")  # noqa: E501

        self._model_uuid = model_uuid

    @property
    def state(self):
        """Gets the state of this RTiCModelMetaData.  # noqa: E501


        :return: The state of this RTiCModelMetaData.  # noqa: E501
        :rtype: RegisteredModelState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RTiCModelMetaData.


        :param state: The state of this RTiCModelMetaData.  # noqa: E501
        :type: RegisteredModelState
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def inference_framework(self):
        """Gets the inference_framework of this RTiCModelMetaData.  # noqa: E501


        :return: The inference_framework of this RTiCModelMetaData.  # noqa: E501
        :rtype: FrameworkType
        """
        return self._inference_framework

    @inference_framework.setter
    def inference_framework(self, inference_framework):
        """Sets the inference_framework of this RTiCModelMetaData.


        :param inference_framework: The inference_framework of this RTiCModelMetaData.  # noqa: E501
        :type: FrameworkType
        """
        if self.local_vars_configuration.client_side_validation and inference_framework is None:  # noqa: E501
            raise ValueError("Invalid value for `inference_framework`, must not be `None`")  # noqa: E501

        self._inference_framework = inference_framework

    @property
    def inference_hw(self):
        """Gets the inference_hw of this RTiCModelMetaData.  # noqa: E501


        :return: The inference_hw of this RTiCModelMetaData.  # noqa: E501
        :rtype: InferenceHardware
        """
        return self._inference_hw

    @inference_hw.setter
    def inference_hw(self, inference_hw):
        """Sets the inference_hw of this RTiCModelMetaData.


        :param inference_hw: The inference_hw of this RTiCModelMetaData.  # noqa: E501
        :type: InferenceHardware
        """
        if self.local_vars_configuration.client_side_validation and inference_hw is None:  # noqa: E501
            raise ValueError("Invalid value for `inference_hw`, must not be `None`")  # noqa: E501

        self._inference_hw = inference_hw

    @property
    def errors(self):
        """Gets the errors of this RTiCModelMetaData.  # noqa: E501


        :return: The errors of this RTiCModelMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this RTiCModelMetaData.


        :param errors: The errors of this RTiCModelMetaData.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def transport(self):
        """Gets the transport of this RTiCModelMetaData.  # noqa: E501


        :return: The transport of this RTiCModelMetaData.  # noqa: E501
        :rtype: DataTransportProtocol
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this RTiCModelMetaData.


        :param transport: The transport of this RTiCModelMetaData.  # noqa: E501
        :type: DataTransportProtocol
        """

        self._transport = transport

    @property
    def input_tensors(self):
        """Gets the input_tensors of this RTiCModelMetaData.  # noqa: E501


        :return: The input_tensors of this RTiCModelMetaData.  # noqa: E501
        :rtype: list[RTiCTensorMetadata]
        """
        return self._input_tensors

    @input_tensors.setter
    def input_tensors(self, input_tensors):
        """Sets the input_tensors of this RTiCModelMetaData.


        :param input_tensors: The input_tensors of this RTiCModelMetaData.  # noqa: E501
        :type: list[RTiCTensorMetadata]
        """

        self._input_tensors = input_tensors

    @property
    def output_tensors(self):
        """Gets the output_tensors of this RTiCModelMetaData.  # noqa: E501


        :return: The output_tensors of this RTiCModelMetaData.  # noqa: E501
        :rtype: list[RTiCTensorMetadata]
        """
        return self._output_tensors

    @output_tensors.setter
    def output_tensors(self, output_tensors):
        """Sets the output_tensors of this RTiCModelMetaData.


        :param output_tensors: The output_tensors of this RTiCModelMetaData.  # noqa: E501
        :type: list[RTiCTensorMetadata]
        """

        self._output_tensors = output_tensors

    @property
    def platform_model_uuid(self):
        """Gets the platform_model_uuid of this RTiCModelMetaData.  # noqa: E501


        :return: The platform_model_uuid of this RTiCModelMetaData.  # noqa: E501
        :rtype: str
        """
        return self._platform_model_uuid

    @platform_model_uuid.setter
    def platform_model_uuid(self, platform_model_uuid):
        """Sets the platform_model_uuid of this RTiCModelMetaData.


        :param platform_model_uuid: The platform_model_uuid of this RTiCModelMetaData.  # noqa: E501
        :type: str
        """

        self._platform_model_uuid = platform_model_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RTiCModelMetaData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RTiCModelMetaData):
            return True

        return self.to_dict() != other.to_dict()
