# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['deny', 'deny._async', 'deny._sync', 'deny.ext']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'deny',
    'version': '0.1.1a2',
    'description': 'Library for managing permissions in your Python 3.7+ projects',
    'long_description': '# deny\n\nLibrary for managing permissions in your Python 3.7+ projects.  \nFor example, it can be used to grant access to some API endpoints based on policies you defined.\n\n## Installation\n\n```\npip install deny\n```\n\n## Usage\n\nFirst define the permissions needed in your project:\n\n```python \nfrom deny import AutoPermission, Permission\n\nclass ProfilePermissions:\n    view = Permission(name="view_project")\n    edit = AutoPermission()  # name will be automatically set to "ProjectPermissions.edit"\n\nclass SessionPermissions:\n    create = AutoPermission()\n    delete = AutoPermission()\n```\n\nThen create policies that will be used to grant the permissions:\n\n```python\nfrom deny import Policy, authorize\n\nclass LoggedInUser:\n    @authorize(SessionPermissions.delete)\n    async def can_logout(self):\n        return True\n\n\nclass AnonymousUser(Policy):\n    @authorize(SessionPermissions.create)\n    async def can_logout(self):\n        return True\n\n\nclass UserPolicy(LoggedInUser, Policy):\n    def __init__(self, current_user_id: int):\n        """You should inject any dependency this policy relies on.\n        Here we just save the current user ID, but you might need \n        a connection to a database, a whole user object, etc.\n        """\n        self._current_user_id = current_user_id\n\n    @authorize(ProfilePermissions.edit)\n    async def can_edit_profile(self, user_id: int) -> bool:\n        """Only current user can edit his own profile."""\n        return self._current_user_id == user_id\n\n    @authorize(ProfilePermissions.view)\n    async def can_view_profile(self, user_id: int) -> bool:\n        """Everybody can view the user profiles."""\n        return True\n```\n\nFinally create an Ability with the right policy and check if the permissions are granted:\n\n```python\nfrom deny import Ability\n\ndef get_ability(current_user_id: Optional[int]) -> Ability:\n    if current_user_id:\n        policy = UserPolicy(current_user_id)\n    else:\n        policy = AnonymousUser()\n\n    return Ability(policy=policy)\n\n################\n# Logged in user\nability = get_ability(1)\nawait ability.can(ProfilePermissions.view, 1) # True\nawait ability.can(ProfilePermissions.view, 2) # True\nawait ability.can(ProfilePermissions.edit, 1) # True\nawait ability.authorize(ProfilePermissions.edit, 1) # does not throw any error\nawait ability.can(ProfilePermissions.edit, 2) # False\nawait ability.authorize(ProfilePermissions.edit, 2) # throw an UnauthorizedError\nawait ability.can(SessionPermission.create) # False\nawait ability.can(ProfilePermissions.delete) # True\n\n################\n# Anonymous user\nability = get_ability(None)\nawait ability.can(ProfilePermissions.view, 1) # False\nawait ability.can(ProfilePermissions.view, 2) # False\nawait ability.can(ProfilePermissions.edit, 1) # False\nawait ability.authorize(ProfilePermissions.edit, 1) # throw an UnauthorizedError\nawait ability.can(ProfilePermissions.edit, 2) # False\nawait ability.authorize(ProfilePermissions.edit, 2) # throw an UnauthorizedError\nawait ability.can(SessionPermission.create) # True\nawait ability.can(ProfilePermissions.delete) # False\n```\n\nYou can see the full example in [examples/usage.py](https://github.com/holinnn/deny/tree/main/examples/usage.py) (you will need `asyncio` to run it, `pip install asyncio`)\n\n\n## Web frameworks\n\nDeny can be used with any web framework.  \nBut it comes with some helper functions for [Falcon](https://falcon.readthedocs.io/en/stable/), [Sanic](https://sanic.dev/en/), [FastAPI](https://fastapi.tiangolo.com/) and [Flask](https://flask.palletsprojects.com/).\n\nHere is an example for the [Sanic](https://sanic.dev/en/) web framework:\n```python \nfrom sanic import Sanic\nfrom sanic.request import Request\nfrom sanic.response import HTTPResponse, json\n\nfrom deny import Ability, AutoPermission, Policy, authorize as policy_authorize\nfrom deny.errors import UnauthorizedError\nfrom deny.ext.sanic import authorize\n\n\n\nclass ProjectPermissions:\n    view = AutoPermission()\n\n\nclass UserPolicy(Policy):\n    @authorize(ProjectPermissions.view)\n    async def can_view_project(self, request: Request, id: int) -> bool:\n        return id == 1\n\n\napp = Sanic("example")\n\n\n@app.middleware("request")\nasync def inject_ability(request: Request) -> None:\n    request.ctx.ability = Ability(policy=UserPolicy())\n\n\n@app.get("/projects/<id:int>")\n@authorize(ProjectPermissions.view)\nasync def get(request: Request, id: int) -> HTTPResponse:\n    return json({"id": id})\n\n\n@app.exception(UnauthorizedError)\nasync def unauthorized_handler(request: Request, exc: Exception):\n    return json({"error": str(exc)}, status=403)\n```\n\nYou can find the examples for each of those frameworks in the [examples/](https://github.com/holinnn/deny/tree/main/examples) folder from this repository.\n\n\n## Sync support\n\nBy default all the classes provided by `deny` are built to run in an asynchronous environement.  \nIf you run in a synchronous environement (without `async`, `await`), then import from `deny.sync` instead of `deny`.  \nSee [examples/sync.py](https://github.com/holinnn/deny/tree/main/examples/sync.py) for a full example.\n\n',
    'author': 'AurÃ©lien',
    'author_email': 'aurelien.amilin@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/holinnn/deny',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
