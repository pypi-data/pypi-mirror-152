# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['dotpyle',
 'dotpyle.commands',
 'dotpyle.commands.add',
 'dotpyle.commands.edit',
 'dotpyle.decorators',
 'dotpyle.errors',
 'dotpyle.objects',
 'dotpyle.services',
 'dotpyle.templates',
 'dotpyle.utils']

package_data = \
{'': ['*']}

install_requires = \
['Cerberus>=1.3.2,<2.0.0',
 'GitPython>=3.1.24,<4.0.0',
 'PyYAML>=5.4.1,<6.0.0',
 'click>=8.0.1,<9.0.0',
 'rich>=10.1.0,<11.0.0',
 'setuptools>=57.4.0,<58.0.0']

entry_points = \
{'console_scripts': ['dotpyle = dotpyle.main:main', 'test = pytest:main']}

setup_kwargs = {
    'name': 'dotpyle',
    'version': '0.1.4',
    'description': 'Dotpyle is a Python implementation of a dotfile system manager, allowing users to keep a secure copy of all program configurations remotely, create different profiles, etc.',
    'long_description': '\n<p align="center">\n  <img src="./docs/logo.png" alt="logo" width="240" />\n</p>\n\n<h1 align="center" style="text-align: center;">dotPyle</h1>\n\n<p align="center">\n    <a href="https://github.com/neovim/neovim/actions">\n        <img src="https://github.com/jorgebodega/dotpyle/workflows/CI/badge.svg" alt="CI Status">\n    </a>\n    <a href="https://coveralls.io/github/jorgebodega/dotpyle?branch=development">\n        <img src="https://coveralls.io/repos/github/jorgebodega/dotpyle/badge.svg?branch=development&t=Hv5NfN" alt="Coverage Status">\n    </a>\n    <a href="https://github.com/psf/black">\n        <img src="https://img.shields.io/badge/code%20style-black-000000.svg" alt="Code style: black">\n    </a>\n    <a href="https://opensource.org/licenses/MIT">\n        <img src="https://img.shields.io/badge/License-MIT-yellow.svg" alt="License: MIT">\n    </a>\n</p>\n\n<p align="center">\n  <b>Manage all your configuration files with different profiles remotely.</b></br>\n  <sub>Made with ❤️  by <a href="https://github.com/jorgebodega">Jorge Bodega</a> and <a href="https://github.com/perseogi">Perseo Gutierrez</a></sub>\n</p>\n\n<br/>\n\n\ndotPyle is a Python implementation of a dotfile system manager, allowing users\nto keep a secure copy of all program configurations remotely, create different\nprofiles, etc.\n\n\n## Commands\n\n### Init\n\nThis will request a git url and a git token If it is the first time you use\nDotpyle, you will need to create an empty repo on GitHub, GitLab, etc.\n\nIf you want to manage an existing repo you just need to input url and token\n\n    dotpyle init [--url <git url>]  [--protocol (git/https)] [--token (if repo is private)]\n\n\n### Add\n\n\n1. Copy file to repo location\n2. Delete file of path\n3. Generate symbolic link to path\n\nExamples:\n\n1. Create program_name key\n1. Create profile (default by default)\n1. Set root and paths (optionally pre and post hooks)\n\n```sh\n    dotpyle add dotfile <program_name> [--profile <profile_name>] [--root\n    <root_path>] [--path <dotfile_path1> [--path dotfile_path2>] ...] [--pre\n    <pre_config_install_command> [--pre <...>]] [--post\n    <post_config_install_command> [--post <...>]]\n```\n\n### List\n\n    dotpyle list [--name <program_name>] [--profile <profile_name>]\n\n### Link\n\n    dotpyle install <program_name> [--profile <profile_name>]\n\n### Interacting with Git repository\n\nUser may avoid interacting directly with Dotpyle git repository\n\nTODO: Considering only one dotpyle sync command for pulling && pussing\n\n#### Pulling changes\n\nThis command will fetch new changes from the remote repository and check nothing will break\n\nTODO\n\n    dotpyle pull\n\n#### Pushing changes (TODO)\n\n    dotpyle push\n\n#### Commiting changes\n\nCommiting should be as granular and personal as possible so Dotpyle offers the\ngranularity you may need.\n\n    dotpyle commit [-n <program_name> [--path=<path1> --path=<path2> ...]] [-p <profile_name>] -m <commit_message>\n\nExamples:\n\n- General commit for all changes on all programs and profiles installed and managed by Dotpyle:\n\n    `dotpyle commit -m \'fix typo on vimrc\'`\n\n- Commit for all dotfiles of specific program (e.g. nvim):\n\n    `dotpyle commit -n nvim -m \'commit message\'`\n\n- Commit for all programs (and all configuration files) of a concrete profile (e.g. work):\n\n    `dotpyle commit -p work -m \'commit message\'`\n\n- Commit for specific program and specific dotfiles of that program for all profiles:\n    (e.g. alacritty base configuration for all profiles which have alacritty)\n\n    `dotpyle commit -n alacritty --path=alacritty.yml -m \'commit message\'`\n\n- Commit for specific program and specific dotfiles of that program on specific profile:\n    (e.g. i3 configuration for i3-resurrect and status bar on home profile)\n\n    `dotpyle commit -n i3 --path=i3-resurrect/config.json --path=i3status.conf -p home -m \'commit message\'`\n\n### Profiles\n\n#### profile create\n\n    dotpyle profile create <profile_name>\n\nCreates a new profile named `<profile_name>`, if it does not exist.\n\n#### profile list\n\n    dotpyle profile list [<profile_name>]\n\n#### profile change\n\n    dotpyle profile change <profile_name> [<program_name> ...]\n\nThis option will change the configuration file to the `<profile_name>` passed for:\n\n- all dotfiles if no `<program_name>` is passed\n- all `<program_name>`\'s passed\n\nExample:\n\n    dotpyle profile change work nvim git\n\nNeovim work profile and Git work profile will be symlinked to its corresponding path.\n\n    dotpyle profile change home\n\nAll dotfiles which have a \'home\' profile will be symlinked to its corresponding paths.\nDotfiles which does not have a configuration for given profile will not be altered.\n\nTBD\n\n### Configuration\n\n#### check\n\n    dotpyle config check [<dotpyle_config_path>]\n\nThis command will analize Dotpyle configuration file, by default\n(`XDG_CONFIG_HOME}/dotpyle/dotpyle.yml`) (or `<dotpyle_config_path>`),\nreturning descriptive errors.\n\n**Info**: any other command will anayle the configuration file before\nexecuting.  This command is useful and recomended whenever any manual change is\nmade on *dotpyle.yml*.\n\n\n### dotpyle.yml example\n\nStructure of yml (every thing inside [] are examples)\n\n```yaml\n# General settings for dotpyle\nsettings:\n\n    # Defined profiles\n    profiles:\n        - default\n        - [home]\n        - [work]\n\n    # TODO\n    TBD\n\ndotfiles:\n\n    # Top level key, the name of the program for which store config files\n    [program_name]:\n\n        # Name of the profile (default profile: default)\n        [profile_name]:\n\n            # Bash commands to be executed before configuring \'profile_name\'\n            before:\n                - [bash script 1]\n                - [bash script 2]\n\n            # Bash commands to be executed after configuring \'profile_name\'\n            after:\n                - [bash script 1]\n                - [bash script 2]\n\n            # Base path for start storing \'paths\' for \'program_name\' (default $HOME)\n            root: ~\n\n            # Configuration files for \'program_name\'. Subroutes will be created if they dont exist\n            paths:\n                - [.configuration]                # will symlink dotfiles/program_name/profile_name/.configuration => $HOME/.configuration\n                - [subroute/.filerc]              # will symlink dotfiles/program_name/profile_name/subroute/.filerc => $HOME/subroute/.filerc\n                - [subroute0/subroute1/filerc]    # will symlink dotfiles/program_name/profile_name/subroute0/subroute1/filerc => $HOME/subroute0/subroute1/filerc\n\n\n```\n\nExample of dotpyle.yml config file:\n\n```yaml\nsettings:\n    profiles:\n        - default\n        - windows\n\ndotfiles:\n    git:\n        default:\n            before:\n                - sudo pacman -S git\n            paths:\n                - .gitconfig\n\n        windows:\n            before:\n                - choco install git.install\n            root: C:\\Users\\usr\n            paths:\n                - .gitconfig\n\n    nvim:\n        default:\n            before:\n                - sudo pacman -S neovim node\n            root: ~/.config/nvim\n            paths:\n                - init.vim\n                - after/ftplugin/ada.vim\n\n        windows:\n            before:\n                - choco install neovim --pre\n            root: C:\\AppData\\Local\\nvim\n            paths:\n                - init.vim\n                - after/ftplugin/ada.vim\n```\n\nThis will be the generated file structure on the repository:\n\n```\ndotfiles\n|\n|-> git\n|   |-> default\n|   |   |-> .gitconfig\n|   |-> windows\n|       |-> .gitconfig\n|\n|-> nvim\n    |-> default\n    |   |-> init.vim\n    |   |-> after\n    |       |-> ftplugin\n    |           |-> ada.vim\n    |\n    |-> windows\n        |-> init.vim\n        |-> after\n            |-> ftplugin\n                |-> ada.vim\n```\n\n\n\n### dotpyle.local.yml structure\n\nDotpyle needs to create a local configuration file in order to keep track of\nyour configuration on the current machine.\n\nThis file will not be tracked by\ngit so non conflicts will be derived when using Dotpyle on multiple computers.\n\nAlso, this file will be generated automatically by Dotpyle on \'init\' command or\nwhenever Dotpyle can\'t find it.\n\nStructure of yml (every thing inside [] are examples)\n\n```yaml\ninstalled:\n    [program_name]:\n        profile: [profile_name]\n       # modified: [True|False]\n        TBD\nTBD\n```\n\n## TODO\n\n- [ ] Decorator / global variable to instance parser and handlers\n- [ ] Print centralized service with colorful error / warning / correct output\n- [ ] Change uninstall name for on more intuitive\n- [ ] Run command to execute alone hooks\n- [ ] Create commit on uninstall dotfile\n- [ ] Force option on link command\n\n',
    'author': 'Jorge Bodega',
    'author_email': 'jorge.bodega.f@gmail.com',
    'maintainer': 'Perseo Gutiérrez',
    'maintainer_email': 'perseo.gi98@gmail.com',
    'url': 'https://github.com/jorgebodega/dotpyle',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
