# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Certificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate': 'str',
        'key': 'str',
        'name': 'str',
        'issuer': 'str',
        'domains': 'str',
        'fingerprint': 'str',
        'not_valid_before': 'str',
        'not_valid_after': 'str',
        'expired': 'str',
        'key_matches': 'str',
        'domain_matches': 'str'
    }

    attribute_map = {
        'certificate': 'certificate',
        'key': 'key',
        'name': 'name',
        'issuer': 'issuer',
        'domains': 'domains',
        'fingerprint': 'fingerprint',
        'not_valid_before': 'not_valid_before',
        'not_valid_after': 'not_valid_after',
        'expired': 'expired',
        'key_matches': 'key_matches',
        'domain_matches': 'domain_matches'
    }

    def __init__(self, certificate=None, key=None, name=None, issuer=None, domains=None, fingerprint=None, not_valid_before=None, not_valid_after=None, expired=None, key_matches=None, domain_matches=None, local_vars_configuration=None):  # noqa: E501
        """Certificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certificate = None
        self._key = None
        self._name = None
        self._issuer = None
        self._domains = None
        self._fingerprint = None
        self._not_valid_before = None
        self._not_valid_after = None
        self._expired = None
        self._key_matches = None
        self._domain_matches = None
        self.discriminator = None

        self.certificate = certificate
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if issuer is not None:
            self.issuer = issuer
        if domains is not None:
            self.domains = domains
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if not_valid_before is not None:
            self.not_valid_before = not_valid_before
        if not_valid_after is not None:
            self.not_valid_after = not_valid_after
        if expired is not None:
            self.expired = expired
        if key_matches is not None:
            self.key_matches = key_matches
        if domain_matches is not None:
            self.domain_matches = domain_matches

    @property
    def certificate(self):
        """Gets the certificate of this Certificate.  # noqa: E501


        :return: The certificate of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this Certificate.


        :param certificate: The certificate of this Certificate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and certificate is None:  # noqa: E501
            raise ValueError("Invalid value for `certificate`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                certificate is not None and len(certificate) < 1):
            raise ValueError("Invalid value for `certificate`, length must be greater than or equal to `1`")  # noqa: E501

        self._certificate = certificate

    @property
    def key(self):
        """Gets the key of this Certificate.  # noqa: E501


        :return: The key of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Certificate.


        :param key: The key of this Certificate.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Certificate.  # noqa: E501


        :return: The name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.


        :param name: The name of this Certificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def issuer(self):
        """Gets the issuer of this Certificate.  # noqa: E501


        :return: The issuer of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Certificate.


        :param issuer: The issuer of this Certificate.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def domains(self):
        """Gets the domains of this Certificate.  # noqa: E501


        :return: The domains of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Certificate.


        :param domains: The domains of this Certificate.  # noqa: E501
        :type: str
        """

        self._domains = domains

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Certificate.  # noqa: E501


        :return: The fingerprint of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Certificate.


        :param fingerprint: The fingerprint of this Certificate.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def not_valid_before(self):
        """Gets the not_valid_before of this Certificate.  # noqa: E501


        :return: The not_valid_before of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._not_valid_before

    @not_valid_before.setter
    def not_valid_before(self, not_valid_before):
        """Sets the not_valid_before of this Certificate.


        :param not_valid_before: The not_valid_before of this Certificate.  # noqa: E501
        :type: str
        """

        self._not_valid_before = not_valid_before

    @property
    def not_valid_after(self):
        """Gets the not_valid_after of this Certificate.  # noqa: E501


        :return: The not_valid_after of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._not_valid_after

    @not_valid_after.setter
    def not_valid_after(self, not_valid_after):
        """Sets the not_valid_after of this Certificate.


        :param not_valid_after: The not_valid_after of this Certificate.  # noqa: E501
        :type: str
        """

        self._not_valid_after = not_valid_after

    @property
    def expired(self):
        """Gets the expired of this Certificate.  # noqa: E501


        :return: The expired of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Certificate.


        :param expired: The expired of this Certificate.  # noqa: E501
        :type: str
        """

        self._expired = expired

    @property
    def key_matches(self):
        """Gets the key_matches of this Certificate.  # noqa: E501


        :return: The key_matches of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._key_matches

    @key_matches.setter
    def key_matches(self, key_matches):
        """Sets the key_matches of this Certificate.


        :param key_matches: The key_matches of this Certificate.  # noqa: E501
        :type: str
        """

        self._key_matches = key_matches

    @property
    def domain_matches(self):
        """Gets the domain_matches of this Certificate.  # noqa: E501


        :return: The domain_matches of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._domain_matches

    @domain_matches.setter
    def domain_matches(self, domain_matches):
        """Sets the domain_matches of this Certificate.


        :param domain_matches: The domain_matches of this Certificate.  # noqa: E501
        :type: str
        """

        self._domain_matches = domain_matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Certificate):
            return True

        return self.to_dict() != other.to_dict()
