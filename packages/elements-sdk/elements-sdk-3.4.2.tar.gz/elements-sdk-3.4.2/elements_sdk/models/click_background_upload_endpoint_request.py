# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class ClickBackgroundUploadEndpointRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gallery': 'int',
        'links_to_send': 'list[int]',
        'notify_on_completion': 'bool'
    }

    attribute_map = {
        'gallery': 'gallery',
        'links_to_send': 'links_to_send',
        'notify_on_completion': 'notify_on_completion'
    }

    def __init__(self, gallery=None, links_to_send=None, notify_on_completion=None, local_vars_configuration=None):  # noqa: E501
        """ClickBackgroundUploadEndpointRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gallery = None
        self._links_to_send = None
        self._notify_on_completion = None
        self.discriminator = None

        self.gallery = gallery
        self.links_to_send = links_to_send
        self.notify_on_completion = notify_on_completion

    @property
    def gallery(self):
        """Gets the gallery of this ClickBackgroundUploadEndpointRequest.  # noqa: E501


        :return: The gallery of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :rtype: int
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this ClickBackgroundUploadEndpointRequest.


        :param gallery: The gallery of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and gallery is None:  # noqa: E501
            raise ValueError("Invalid value for `gallery`, must not be `None`")  # noqa: E501

        self._gallery = gallery

    @property
    def links_to_send(self):
        """Gets the links_to_send of this ClickBackgroundUploadEndpointRequest.  # noqa: E501


        :return: The links_to_send of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._links_to_send

    @links_to_send.setter
    def links_to_send(self, links_to_send):
        """Sets the links_to_send of this ClickBackgroundUploadEndpointRequest.


        :param links_to_send: The links_to_send of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and links_to_send is None:  # noqa: E501
            raise ValueError("Invalid value for `links_to_send`, must not be `None`")  # noqa: E501

        self._links_to_send = links_to_send

    @property
    def notify_on_completion(self):
        """Gets the notify_on_completion of this ClickBackgroundUploadEndpointRequest.  # noqa: E501


        :return: The notify_on_completion of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_completion

    @notify_on_completion.setter
    def notify_on_completion(self, notify_on_completion):
        """Sets the notify_on_completion of this ClickBackgroundUploadEndpointRequest.


        :param notify_on_completion: The notify_on_completion of this ClickBackgroundUploadEndpointRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notify_on_completion is None:  # noqa: E501
            raise ValueError("Invalid value for `notify_on_completion`, must not be `None`")  # noqa: E501

        self._notify_on_completion = notify_on_completion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClickBackgroundUploadEndpointRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClickBackgroundUploadEndpointRequest):
            return True

        return self.to_dict() != other.to_dict()
