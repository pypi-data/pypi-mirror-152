# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class ClickGalleryLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'email': 'str',
        'expires_at': 'datetime',
        'gallery_id': 'int',
        'notify_on_use': 'bool',
        'views_left': 'int',
        'elements_user': 'ClickLinkUser',
        'secret_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'expires_at': 'expires_at',
        'gallery_id': 'gallery_id',
        'notify_on_use': 'notify_on_use',
        'views_left': 'views_left',
        'elements_user': 'elements_user',
        'secret_key': 'secret_key'
    }

    def __init__(self, id=None, email=None, expires_at=None, gallery_id=None, notify_on_use=None, views_left=None, elements_user=None, secret_key=None, local_vars_configuration=None):  # noqa: E501
        """ClickGalleryLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email = None
        self._expires_at = None
        self._gallery_id = None
        self._notify_on_use = None
        self._views_left = None
        self._elements_user = None
        self._secret_key = None
        self.discriminator = None

        self.id = id
        self.email = email
        self.expires_at = expires_at
        self.gallery_id = gallery_id
        self.notify_on_use = notify_on_use
        self.views_left = views_left
        if elements_user is not None:
            self.elements_user = elements_user
        self.secret_key = secret_key

    @property
    def id(self):
        """Gets the id of this ClickGalleryLink.  # noqa: E501


        :return: The id of this ClickGalleryLink.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClickGalleryLink.


        :param id: The id of this ClickGalleryLink.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this ClickGalleryLink.  # noqa: E501


        :return: The email of this ClickGalleryLink.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClickGalleryLink.


        :param email: The email of this ClickGalleryLink.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def expires_at(self):
        """Gets the expires_at of this ClickGalleryLink.  # noqa: E501


        :return: The expires_at of this ClickGalleryLink.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ClickGalleryLink.


        :param expires_at: The expires_at of this ClickGalleryLink.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def gallery_id(self):
        """Gets the gallery_id of this ClickGalleryLink.  # noqa: E501


        :return: The gallery_id of this ClickGalleryLink.  # noqa: E501
        :rtype: int
        """
        return self._gallery_id

    @gallery_id.setter
    def gallery_id(self, gallery_id):
        """Sets the gallery_id of this ClickGalleryLink.


        :param gallery_id: The gallery_id of this ClickGalleryLink.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and gallery_id is None:  # noqa: E501
            raise ValueError("Invalid value for `gallery_id`, must not be `None`")  # noqa: E501

        self._gallery_id = gallery_id

    @property
    def notify_on_use(self):
        """Gets the notify_on_use of this ClickGalleryLink.  # noqa: E501


        :return: The notify_on_use of this ClickGalleryLink.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_use

    @notify_on_use.setter
    def notify_on_use(self, notify_on_use):
        """Sets the notify_on_use of this ClickGalleryLink.


        :param notify_on_use: The notify_on_use of this ClickGalleryLink.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notify_on_use is None:  # noqa: E501
            raise ValueError("Invalid value for `notify_on_use`, must not be `None`")  # noqa: E501

        self._notify_on_use = notify_on_use

    @property
    def views_left(self):
        """Gets the views_left of this ClickGalleryLink.  # noqa: E501


        :return: The views_left of this ClickGalleryLink.  # noqa: E501
        :rtype: int
        """
        return self._views_left

    @views_left.setter
    def views_left(self, views_left):
        """Sets the views_left of this ClickGalleryLink.


        :param views_left: The views_left of this ClickGalleryLink.  # noqa: E501
        :type: int
        """

        self._views_left = views_left

    @property
    def elements_user(self):
        """Gets the elements_user of this ClickGalleryLink.  # noqa: E501


        :return: The elements_user of this ClickGalleryLink.  # noqa: E501
        :rtype: ClickLinkUser
        """
        return self._elements_user

    @elements_user.setter
    def elements_user(self, elements_user):
        """Sets the elements_user of this ClickGalleryLink.


        :param elements_user: The elements_user of this ClickGalleryLink.  # noqa: E501
        :type: ClickLinkUser
        """

        self._elements_user = elements_user

    @property
    def secret_key(self):
        """Gets the secret_key of this ClickGalleryLink.  # noqa: E501


        :return: The secret_key of this ClickGalleryLink.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ClickGalleryLink.


        :param secret_key: The secret_key of this ClickGalleryLink.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                secret_key is not None and len(secret_key) < 1):
            raise ValueError("Invalid value for `secret_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClickGalleryLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClickGalleryLink):
            return True

        return self.to_dict() != other.to_dict()
