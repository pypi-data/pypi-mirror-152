# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class EditorProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file': 'int',
        'parent': 'int',
        'parent_path': 'str',
        'existing_file': 'int',
        'format': 'str',
        'project': 'object'
    }

    attribute_map = {
        'file': 'file',
        'parent': 'parent',
        'parent_path': 'parent_path',
        'existing_file': 'existing_file',
        'format': 'format',
        'project': 'project'
    }

    def __init__(self, file=None, parent=None, parent_path=None, existing_file=None, format=None, project=None, local_vars_configuration=None):  # noqa: E501
        """EditorProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file = None
        self._parent = None
        self._parent_path = None
        self._existing_file = None
        self._format = None
        self._project = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if parent is not None:
            self.parent = parent
        if parent_path is not None:
            self.parent_path = parent_path
        if existing_file is not None:
            self.existing_file = existing_file
        if format is not None:
            self.format = format
        self.project = project

    @property
    def file(self):
        """Gets the file of this EditorProject.  # noqa: E501


        :return: The file of this EditorProject.  # noqa: E501
        :rtype: int
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this EditorProject.


        :param file: The file of this EditorProject.  # noqa: E501
        :type: int
        """

        self._file = file

    @property
    def parent(self):
        """Gets the parent of this EditorProject.  # noqa: E501


        :return: The parent of this EditorProject.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this EditorProject.


        :param parent: The parent of this EditorProject.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def parent_path(self):
        """Gets the parent_path of this EditorProject.  # noqa: E501


        :return: The parent_path of this EditorProject.  # noqa: E501
        :rtype: str
        """
        return self._parent_path

    @parent_path.setter
    def parent_path(self, parent_path):
        """Sets the parent_path of this EditorProject.


        :param parent_path: The parent_path of this EditorProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                parent_path is not None and len(parent_path) < 1):
            raise ValueError("Invalid value for `parent_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._parent_path = parent_path

    @property
    def existing_file(self):
        """Gets the existing_file of this EditorProject.  # noqa: E501


        :return: The existing_file of this EditorProject.  # noqa: E501
        :rtype: int
        """
        return self._existing_file

    @existing_file.setter
    def existing_file(self, existing_file):
        """Sets the existing_file of this EditorProject.


        :param existing_file: The existing_file of this EditorProject.  # noqa: E501
        :type: int
        """

        self._existing_file = existing_file

    @property
    def format(self):
        """Gets the format of this EditorProject.  # noqa: E501


        :return: The format of this EditorProject.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this EditorProject.


        :param format: The format of this EditorProject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                format is not None and len(format) < 1):
            raise ValueError("Invalid value for `format`, length must be greater than or equal to `1`")  # noqa: E501

        self._format = format

    @property
    def project(self):
        """Gets the project of this EditorProject.  # noqa: E501


        :return: The project of this EditorProject.  # noqa: E501
        :rtype: object
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this EditorProject.


        :param project: The project of this EditorProject.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditorProject):
            return True

        return self.to_dict() != other.to_dict()
