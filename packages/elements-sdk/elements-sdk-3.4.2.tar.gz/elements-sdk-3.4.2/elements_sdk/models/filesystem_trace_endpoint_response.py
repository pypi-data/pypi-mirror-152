# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class FilesystemTraceEndpointResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'root': 'TraceNode',
        'disk_d_read': 'int',
        'disk_d_write': 'int',
        'is_flat': 'bool'
    }

    attribute_map = {
        'root': 'root',
        'disk_d_read': 'disk_d_read',
        'disk_d_write': 'disk_d_write',
        'is_flat': 'is_flat'
    }

    def __init__(self, root=None, disk_d_read=None, disk_d_write=None, is_flat=None, local_vars_configuration=None):  # noqa: E501
        """FilesystemTraceEndpointResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._root = None
        self._disk_d_read = None
        self._disk_d_write = None
        self._is_flat = None
        self.discriminator = None

        self.root = root
        self.disk_d_read = disk_d_read
        self.disk_d_write = disk_d_write
        self.is_flat = is_flat

    @property
    def root(self):
        """Gets the root of this FilesystemTraceEndpointResponse.  # noqa: E501


        :return: The root of this FilesystemTraceEndpointResponse.  # noqa: E501
        :rtype: TraceNode
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this FilesystemTraceEndpointResponse.


        :param root: The root of this FilesystemTraceEndpointResponse.  # noqa: E501
        :type: TraceNode
        """
        if self.local_vars_configuration.client_side_validation and root is None:  # noqa: E501
            raise ValueError("Invalid value for `root`, must not be `None`")  # noqa: E501

        self._root = root

    @property
    def disk_d_read(self):
        """Gets the disk_d_read of this FilesystemTraceEndpointResponse.  # noqa: E501


        :return: The disk_d_read of this FilesystemTraceEndpointResponse.  # noqa: E501
        :rtype: int
        """
        return self._disk_d_read

    @disk_d_read.setter
    def disk_d_read(self, disk_d_read):
        """Sets the disk_d_read of this FilesystemTraceEndpointResponse.


        :param disk_d_read: The disk_d_read of this FilesystemTraceEndpointResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and disk_d_read is None:  # noqa: E501
            raise ValueError("Invalid value for `disk_d_read`, must not be `None`")  # noqa: E501

        self._disk_d_read = disk_d_read

    @property
    def disk_d_write(self):
        """Gets the disk_d_write of this FilesystemTraceEndpointResponse.  # noqa: E501


        :return: The disk_d_write of this FilesystemTraceEndpointResponse.  # noqa: E501
        :rtype: int
        """
        return self._disk_d_write

    @disk_d_write.setter
    def disk_d_write(self, disk_d_write):
        """Sets the disk_d_write of this FilesystemTraceEndpointResponse.


        :param disk_d_write: The disk_d_write of this FilesystemTraceEndpointResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and disk_d_write is None:  # noqa: E501
            raise ValueError("Invalid value for `disk_d_write`, must not be `None`")  # noqa: E501

        self._disk_d_write = disk_d_write

    @property
    def is_flat(self):
        """Gets the is_flat of this FilesystemTraceEndpointResponse.  # noqa: E501


        :return: The is_flat of this FilesystemTraceEndpointResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_flat

    @is_flat.setter
    def is_flat(self, is_flat):
        """Sets the is_flat of this FilesystemTraceEndpointResponse.


        :param is_flat: The is_flat of this FilesystemTraceEndpointResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_flat is None:  # noqa: E501
            raise ValueError("Invalid value for `is_flat`, must not be `None`")  # noqa: E501

        self._is_flat = is_flat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesystemTraceEndpointResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesystemTraceEndpointResponse):
            return True

        return self.to_dict() != other.to_dict()
