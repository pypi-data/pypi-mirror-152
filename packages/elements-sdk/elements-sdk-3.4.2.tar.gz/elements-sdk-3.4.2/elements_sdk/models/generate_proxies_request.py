# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class GenerateProxiesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bundles': 'list[int]',
        'directories': 'list[int]',
        'proxy_profiles': 'list[int]',
        'enqueue_at_front': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'bundles': 'bundles',
        'directories': 'directories',
        'proxy_profiles': 'proxy_profiles',
        'enqueue_at_front': 'enqueue_at_front',
        'force': 'force'
    }

    def __init__(self, bundles=None, directories=None, proxy_profiles=None, enqueue_at_front=None, force=None, local_vars_configuration=None):  # noqa: E501
        """GenerateProxiesRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bundles = None
        self._directories = None
        self._proxy_profiles = None
        self._enqueue_at_front = None
        self._force = None
        self.discriminator = None

        if bundles is not None:
            self.bundles = bundles
        if directories is not None:
            self.directories = directories
        self.proxy_profiles = proxy_profiles
        if enqueue_at_front is not None:
            self.enqueue_at_front = enqueue_at_front
        if force is not None:
            self.force = force

    @property
    def bundles(self):
        """Gets the bundles of this GenerateProxiesRequest.  # noqa: E501


        :return: The bundles of this GenerateProxiesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this GenerateProxiesRequest.


        :param bundles: The bundles of this GenerateProxiesRequest.  # noqa: E501
        :type: list[int]
        """

        self._bundles = bundles

    @property
    def directories(self):
        """Gets the directories of this GenerateProxiesRequest.  # noqa: E501


        :return: The directories of this GenerateProxiesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this GenerateProxiesRequest.


        :param directories: The directories of this GenerateProxiesRequest.  # noqa: E501
        :type: list[int]
        """

        self._directories = directories

    @property
    def proxy_profiles(self):
        """Gets the proxy_profiles of this GenerateProxiesRequest.  # noqa: E501


        :return: The proxy_profiles of this GenerateProxiesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._proxy_profiles

    @proxy_profiles.setter
    def proxy_profiles(self, proxy_profiles):
        """Sets the proxy_profiles of this GenerateProxiesRequest.


        :param proxy_profiles: The proxy_profiles of this GenerateProxiesRequest.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and proxy_profiles is None:  # noqa: E501
            raise ValueError("Invalid value for `proxy_profiles`, must not be `None`")  # noqa: E501

        self._proxy_profiles = proxy_profiles

    @property
    def enqueue_at_front(self):
        """Gets the enqueue_at_front of this GenerateProxiesRequest.  # noqa: E501


        :return: The enqueue_at_front of this GenerateProxiesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enqueue_at_front

    @enqueue_at_front.setter
    def enqueue_at_front(self, enqueue_at_front):
        """Sets the enqueue_at_front of this GenerateProxiesRequest.


        :param enqueue_at_front: The enqueue_at_front of this GenerateProxiesRequest.  # noqa: E501
        :type: bool
        """

        self._enqueue_at_front = enqueue_at_front

    @property
    def force(self):
        """Gets the force of this GenerateProxiesRequest.  # noqa: E501


        :return: The force of this GenerateProxiesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GenerateProxiesRequest.


        :param force: The force of this GenerateProxiesRequest.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateProxiesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateProxiesRequest):
            return True

        return self.to_dict() != other.to_dict()
