# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'product': 'str',
        'serial': 'str',
        'partner': 'str',
        'hardware': 'str',
        'hardware_key': 'str',
        'expiry': 'datetime',
        'components': 'dict(str, bool)',
        'components_expiry': 'dict(str, datetime)',
        'components_enabled': 'dict(str, bool)',
        'rdc_slots': 'int',
        'users': 'int',
        'third_party_capacity': 'int'
    }

    attribute_map = {
        'name': 'name',
        'product': 'product',
        'serial': 'serial',
        'partner': 'partner',
        'hardware': 'hardware',
        'hardware_key': 'hardware_key',
        'expiry': 'expiry',
        'components': 'components',
        'components_expiry': 'components_expiry',
        'components_enabled': 'components_enabled',
        'rdc_slots': 'rdc_slots',
        'users': 'users',
        'third_party_capacity': 'third_party_capacity'
    }

    def __init__(self, name=None, product=None, serial=None, partner=None, hardware=None, hardware_key=None, expiry=None, components=None, components_expiry=None, components_enabled=None, rdc_slots=None, users=None, third_party_capacity=None, local_vars_configuration=None):  # noqa: E501
        """License - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._product = None
        self._serial = None
        self._partner = None
        self._hardware = None
        self._hardware_key = None
        self._expiry = None
        self._components = None
        self._components_expiry = None
        self._components_enabled = None
        self._rdc_slots = None
        self._users = None
        self._third_party_capacity = None
        self.discriminator = None

        self.name = name
        self.product = product
        self.serial = serial
        self.partner = partner
        if hardware is not None:
            self.hardware = hardware
        if hardware_key is not None:
            self.hardware_key = hardware_key
        self.expiry = expiry
        self.components = components
        self.components_expiry = components_expiry
        self.components_enabled = components_enabled
        self.rdc_slots = rdc_slots
        self.users = users
        self.third_party_capacity = third_party_capacity

    @property
    def name(self):
        """Gets the name of this License.  # noqa: E501


        :return: The name of this License.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def product(self):
        """Gets the product of this License.  # noqa: E501


        :return: The product of this License.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this License.


        :param product: The product of this License.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product is None:  # noqa: E501
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product is not None and len(product) < 1):
            raise ValueError("Invalid value for `product`, length must be greater than or equal to `1`")  # noqa: E501

        self._product = product

    @property
    def serial(self):
        """Gets the serial of this License.  # noqa: E501


        :return: The serial of this License.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this License.


        :param serial: The serial of this License.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                serial is not None and len(serial) < 1):
            raise ValueError("Invalid value for `serial`, length must be greater than or equal to `1`")  # noqa: E501

        self._serial = serial

    @property
    def partner(self):
        """Gets the partner of this License.  # noqa: E501


        :return: The partner of this License.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this License.


        :param partner: The partner of this License.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                partner is not None and len(partner) < 1):
            raise ValueError("Invalid value for `partner`, length must be greater than or equal to `1`")  # noqa: E501

        self._partner = partner

    @property
    def hardware(self):
        """Gets the hardware of this License.  # noqa: E501


        :return: The hardware of this License.  # noqa: E501
        :rtype: str
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this License.


        :param hardware: The hardware of this License.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                hardware is not None and len(hardware) < 1):
            raise ValueError("Invalid value for `hardware`, length must be greater than or equal to `1`")  # noqa: E501

        self._hardware = hardware

    @property
    def hardware_key(self):
        """Gets the hardware_key of this License.  # noqa: E501


        :return: The hardware_key of this License.  # noqa: E501
        :rtype: str
        """
        return self._hardware_key

    @hardware_key.setter
    def hardware_key(self, hardware_key):
        """Sets the hardware_key of this License.


        :param hardware_key: The hardware_key of this License.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                hardware_key is not None and len(hardware_key) < 1):
            raise ValueError("Invalid value for `hardware_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._hardware_key = hardware_key

    @property
    def expiry(self):
        """Gets the expiry of this License.  # noqa: E501


        :return: The expiry of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this License.


        :param expiry: The expiry of this License.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def components(self):
        """Gets the components of this License.  # noqa: E501


        :return: The components of this License.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this License.


        :param components: The components of this License.  # noqa: E501
        :type: dict(str, bool)
        """
        if self.local_vars_configuration.client_side_validation and components is None:  # noqa: E501
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components

    @property
    def components_expiry(self):
        """Gets the components_expiry of this License.  # noqa: E501


        :return: The components_expiry of this License.  # noqa: E501
        :rtype: dict(str, datetime)
        """
        return self._components_expiry

    @components_expiry.setter
    def components_expiry(self, components_expiry):
        """Sets the components_expiry of this License.


        :param components_expiry: The components_expiry of this License.  # noqa: E501
        :type: dict(str, datetime)
        """
        if self.local_vars_configuration.client_side_validation and components_expiry is None:  # noqa: E501
            raise ValueError("Invalid value for `components_expiry`, must not be `None`")  # noqa: E501

        self._components_expiry = components_expiry

    @property
    def components_enabled(self):
        """Gets the components_enabled of this License.  # noqa: E501


        :return: The components_enabled of this License.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._components_enabled

    @components_enabled.setter
    def components_enabled(self, components_enabled):
        """Sets the components_enabled of this License.


        :param components_enabled: The components_enabled of this License.  # noqa: E501
        :type: dict(str, bool)
        """
        if self.local_vars_configuration.client_side_validation and components_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `components_enabled`, must not be `None`")  # noqa: E501

        self._components_enabled = components_enabled

    @property
    def rdc_slots(self):
        """Gets the rdc_slots of this License.  # noqa: E501


        :return: The rdc_slots of this License.  # noqa: E501
        :rtype: int
        """
        return self._rdc_slots

    @rdc_slots.setter
    def rdc_slots(self, rdc_slots):
        """Sets the rdc_slots of this License.


        :param rdc_slots: The rdc_slots of this License.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and rdc_slots is None:  # noqa: E501
            raise ValueError("Invalid value for `rdc_slots`, must not be `None`")  # noqa: E501

        self._rdc_slots = rdc_slots

    @property
    def users(self):
        """Gets the users of this License.  # noqa: E501


        :return: The users of this License.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this License.


        :param users: The users of this License.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and users is None:  # noqa: E501
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def third_party_capacity(self):
        """Gets the third_party_capacity of this License.  # noqa: E501


        :return: The third_party_capacity of this License.  # noqa: E501
        :rtype: int
        """
        return self._third_party_capacity

    @third_party_capacity.setter
    def third_party_capacity(self, third_party_capacity):
        """Sets the third_party_capacity of this License.


        :param third_party_capacity: The third_party_capacity of this License.  # noqa: E501
        :type: int
        """

        self._third_party_capacity = third_party_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
