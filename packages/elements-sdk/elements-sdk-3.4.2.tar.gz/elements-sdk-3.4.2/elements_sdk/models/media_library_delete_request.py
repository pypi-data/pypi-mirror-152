# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class MediaLibraryDeleteRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bundles': 'list[int]',
        'files': 'list[int]',
        'assets': 'list[int]',
        'delete_from_database': 'bool',
        'delete_from_storage': 'bool'
    }

    attribute_map = {
        'bundles': 'bundles',
        'files': 'files',
        'assets': 'assets',
        'delete_from_database': 'delete_from_database',
        'delete_from_storage': 'delete_from_storage'
    }

    def __init__(self, bundles=None, files=None, assets=None, delete_from_database=False, delete_from_storage=False, local_vars_configuration=None):  # noqa: E501
        """MediaLibraryDeleteRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bundles = None
        self._files = None
        self._assets = None
        self._delete_from_database = None
        self._delete_from_storage = None
        self.discriminator = None

        if bundles is not None:
            self.bundles = bundles
        if files is not None:
            self.files = files
        if assets is not None:
            self.assets = assets
        if delete_from_database is not None:
            self.delete_from_database = delete_from_database
        if delete_from_storage is not None:
            self.delete_from_storage = delete_from_storage

    @property
    def bundles(self):
        """Gets the bundles of this MediaLibraryDeleteRequest.  # noqa: E501


        :return: The bundles of this MediaLibraryDeleteRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this MediaLibraryDeleteRequest.


        :param bundles: The bundles of this MediaLibraryDeleteRequest.  # noqa: E501
        :type: list[int]
        """

        self._bundles = bundles

    @property
    def files(self):
        """Gets the files of this MediaLibraryDeleteRequest.  # noqa: E501


        :return: The files of this MediaLibraryDeleteRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this MediaLibraryDeleteRequest.


        :param files: The files of this MediaLibraryDeleteRequest.  # noqa: E501
        :type: list[int]
        """

        self._files = files

    @property
    def assets(self):
        """Gets the assets of this MediaLibraryDeleteRequest.  # noqa: E501


        :return: The assets of this MediaLibraryDeleteRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this MediaLibraryDeleteRequest.


        :param assets: The assets of this MediaLibraryDeleteRequest.  # noqa: E501
        :type: list[int]
        """

        self._assets = assets

    @property
    def delete_from_database(self):
        """Gets the delete_from_database of this MediaLibraryDeleteRequest.  # noqa: E501


        :return: The delete_from_database of this MediaLibraryDeleteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._delete_from_database

    @delete_from_database.setter
    def delete_from_database(self, delete_from_database):
        """Sets the delete_from_database of this MediaLibraryDeleteRequest.


        :param delete_from_database: The delete_from_database of this MediaLibraryDeleteRequest.  # noqa: E501
        :type: bool
        """

        self._delete_from_database = delete_from_database

    @property
    def delete_from_storage(self):
        """Gets the delete_from_storage of this MediaLibraryDeleteRequest.  # noqa: E501


        :return: The delete_from_storage of this MediaLibraryDeleteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._delete_from_storage

    @delete_from_storage.setter
    def delete_from_storage(self, delete_from_storage):
        """Sets the delete_from_storage of this MediaLibraryDeleteRequest.


        :param delete_from_storage: The delete_from_storage of this MediaLibraryDeleteRequest.  # noqa: E501
        :type: bool
        """

        self._delete_from_storage = delete_from_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaLibraryDeleteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaLibraryDeleteRequest):
            return True

        return self.to_dict() != other.to_dict()
