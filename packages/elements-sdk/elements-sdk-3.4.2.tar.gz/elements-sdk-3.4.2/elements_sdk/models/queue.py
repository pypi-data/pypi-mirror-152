# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class Queue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'group': 'str',
        'priority': 'str',
        'input_based': 'bool',
        'is_serviced': 'bool',
        'node': 'StorageNodeMini',
        'volume': 'VolumeMini'
    }

    attribute_map = {
        'id': 'id',
        'group': 'group',
        'priority': 'priority',
        'input_based': 'input_based',
        'is_serviced': 'is_serviced',
        'node': 'node',
        'volume': 'volume'
    }

    def __init__(self, id=None, group=None, priority=None, input_based=None, is_serviced=None, node=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """Queue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._group = None
        self._priority = None
        self._input_based = None
        self._is_serviced = None
        self._node = None
        self._volume = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if group is not None:
            self.group = group
        if priority is not None:
            self.priority = priority
        self.input_based = input_based
        if is_serviced is not None:
            self.is_serviced = is_serviced
        if node is not None:
            self.node = node
        if volume is not None:
            self.volume = volume

    @property
    def id(self):
        """Gets the id of this Queue.  # noqa: E501


        :return: The id of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queue.


        :param id: The id of this Queue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group(self):
        """Gets the group of this Queue.  # noqa: E501


        :return: The group of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Queue.


        :param group: The group of this Queue.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def priority(self):
        """Gets the priority of this Queue.  # noqa: E501


        :return: The priority of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Queue.


        :param priority: The priority of this Queue.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def input_based(self):
        """Gets the input_based of this Queue.  # noqa: E501


        :return: The input_based of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._input_based

    @input_based.setter
    def input_based(self, input_based):
        """Sets the input_based of this Queue.


        :param input_based: The input_based of this Queue.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and input_based is None:  # noqa: E501
            raise ValueError("Invalid value for `input_based`, must not be `None`")  # noqa: E501

        self._input_based = input_based

    @property
    def is_serviced(self):
        """Gets the is_serviced of this Queue.  # noqa: E501


        :return: The is_serviced of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._is_serviced

    @is_serviced.setter
    def is_serviced(self, is_serviced):
        """Sets the is_serviced of this Queue.


        :param is_serviced: The is_serviced of this Queue.  # noqa: E501
        :type: bool
        """

        self._is_serviced = is_serviced

    @property
    def node(self):
        """Gets the node of this Queue.  # noqa: E501


        :return: The node of this Queue.  # noqa: E501
        :rtype: StorageNodeMini
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Queue.


        :param node: The node of this Queue.  # noqa: E501
        :type: StorageNodeMini
        """

        self._node = node

    @property
    def volume(self):
        """Gets the volume of this Queue.  # noqa: E501


        :return: The volume of this Queue.  # noqa: E501
        :rtype: VolumeMini
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Queue.


        :param volume: The volume of this Queue.  # noqa: E501
        :type: VolumeMini
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Queue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Queue):
            return True

        return self.to_dict() != other.to_dict()
