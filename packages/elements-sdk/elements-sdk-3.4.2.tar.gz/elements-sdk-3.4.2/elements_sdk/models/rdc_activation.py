# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class RDCActivation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requested_by': 'str',
        'client_workstation': 'Workstation',
        'host_workstation': 'Workstation',
        'peer_id': 'str',
        'session_id': 'str',
        'user': 'ElementsUserMini'
    }

    attribute_map = {
        'requested_by': 'requested_by',
        'client_workstation': 'client_workstation',
        'host_workstation': 'host_workstation',
        'peer_id': 'peer_id',
        'session_id': 'session_id',
        'user': 'user'
    }

    def __init__(self, requested_by=None, client_workstation=None, host_workstation=None, peer_id=None, session_id=None, user=None, local_vars_configuration=None):  # noqa: E501
        """RDCActivation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._requested_by = None
        self._client_workstation = None
        self._host_workstation = None
        self._peer_id = None
        self._session_id = None
        self._user = None
        self.discriminator = None

        self.requested_by = requested_by
        self.client_workstation = client_workstation
        self.host_workstation = host_workstation
        self.peer_id = peer_id
        self.session_id = session_id
        self.user = user

    @property
    def requested_by(self):
        """Gets the requested_by of this RDCActivation.  # noqa: E501


        :return: The requested_by of this RDCActivation.  # noqa: E501
        :rtype: str
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this RDCActivation.


        :param requested_by: The requested_by of this RDCActivation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requested_by is None:  # noqa: E501
            raise ValueError("Invalid value for `requested_by`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                requested_by is not None and len(requested_by) < 1):
            raise ValueError("Invalid value for `requested_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._requested_by = requested_by

    @property
    def client_workstation(self):
        """Gets the client_workstation of this RDCActivation.  # noqa: E501


        :return: The client_workstation of this RDCActivation.  # noqa: E501
        :rtype: Workstation
        """
        return self._client_workstation

    @client_workstation.setter
    def client_workstation(self, client_workstation):
        """Sets the client_workstation of this RDCActivation.


        :param client_workstation: The client_workstation of this RDCActivation.  # noqa: E501
        :type: Workstation
        """
        if self.local_vars_configuration.client_side_validation and client_workstation is None:  # noqa: E501
            raise ValueError("Invalid value for `client_workstation`, must not be `None`")  # noqa: E501

        self._client_workstation = client_workstation

    @property
    def host_workstation(self):
        """Gets the host_workstation of this RDCActivation.  # noqa: E501


        :return: The host_workstation of this RDCActivation.  # noqa: E501
        :rtype: Workstation
        """
        return self._host_workstation

    @host_workstation.setter
    def host_workstation(self, host_workstation):
        """Sets the host_workstation of this RDCActivation.


        :param host_workstation: The host_workstation of this RDCActivation.  # noqa: E501
        :type: Workstation
        """
        if self.local_vars_configuration.client_side_validation and host_workstation is None:  # noqa: E501
            raise ValueError("Invalid value for `host_workstation`, must not be `None`")  # noqa: E501

        self._host_workstation = host_workstation

    @property
    def peer_id(self):
        """Gets the peer_id of this RDCActivation.  # noqa: E501


        :return: The peer_id of this RDCActivation.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this RDCActivation.


        :param peer_id: The peer_id of this RDCActivation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and peer_id is None:  # noqa: E501
            raise ValueError("Invalid value for `peer_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                peer_id is not None and len(peer_id) < 1):
            raise ValueError("Invalid value for `peer_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._peer_id = peer_id

    @property
    def session_id(self):
        """Gets the session_id of this RDCActivation.  # noqa: E501


        :return: The session_id of this RDCActivation.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this RDCActivation.


        :param session_id: The session_id of this RDCActivation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                session_id is not None and len(session_id) < 1):
            raise ValueError("Invalid value for `session_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._session_id = session_id

    @property
    def user(self):
        """Gets the user of this RDCActivation.  # noqa: E501


        :return: The user of this RDCActivation.  # noqa: E501
        :rtype: ElementsUserMini
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RDCActivation.


        :param user: The user of this RDCActivation.  # noqa: E501
        :type: ElementsUserMini
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RDCActivation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RDCActivation):
            return True

        return self.to_dict() != other.to_dict()
