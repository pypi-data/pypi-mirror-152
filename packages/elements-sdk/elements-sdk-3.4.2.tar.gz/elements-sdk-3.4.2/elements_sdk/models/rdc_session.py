# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class RDCSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'user': 'ElementsUserMiniReference',
        'client_session': 'int',
        'host_workstation': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'client_session': 'client_session',
        'host_workstation': 'host_workstation'
    }

    def __init__(self, id=None, user=None, client_session=None, host_workstation=None, local_vars_configuration=None):  # noqa: E501
        """RDCSession - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user = None
        self._client_session = None
        self._host_workstation = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user = user
        self.client_session = client_session
        self.host_workstation = host_workstation

    @property
    def id(self):
        """Gets the id of this RDCSession.  # noqa: E501


        :return: The id of this RDCSession.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RDCSession.


        :param id: The id of this RDCSession.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this RDCSession.  # noqa: E501


        :return: The user of this RDCSession.  # noqa: E501
        :rtype: ElementsUserMiniReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RDCSession.


        :param user: The user of this RDCSession.  # noqa: E501
        :type: ElementsUserMiniReference
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def client_session(self):
        """Gets the client_session of this RDCSession.  # noqa: E501


        :return: The client_session of this RDCSession.  # noqa: E501
        :rtype: int
        """
        return self._client_session

    @client_session.setter
    def client_session(self, client_session):
        """Sets the client_session of this RDCSession.


        :param client_session: The client_session of this RDCSession.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and client_session is None:  # noqa: E501
            raise ValueError("Invalid value for `client_session`, must not be `None`")  # noqa: E501

        self._client_session = client_session

    @property
    def host_workstation(self):
        """Gets the host_workstation of this RDCSession.  # noqa: E501


        :return: The host_workstation of this RDCSession.  # noqa: E501
        :rtype: str
        """
        return self._host_workstation

    @host_workstation.setter
    def host_workstation(self, host_workstation):
        """Sets the host_workstation of this RDCSession.


        :param host_workstation: The host_workstation of this RDCSession.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host_workstation is None:  # noqa: E501
            raise ValueError("Invalid value for `host_workstation`, must not be `None`")  # noqa: E501

        self._host_workstation = host_workstation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RDCSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RDCSession):
            return True

        return self.to_dict() != other.to_dict()
