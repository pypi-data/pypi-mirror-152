# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class RestoreEndpointRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'source': 'list[TapeJobSource]',
        'exclude': 'list[str]',
        'tape': 'str',
        'export': 'bool',
        'start_date': 'datetime',
        'destination': 'str'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'exclude': 'exclude',
        'tape': 'tape',
        'export': 'export',
        'start_date': 'start_date',
        'destination': 'destination'
    }

    def __init__(self, name=None, source=None, exclude=None, tape=None, export=None, start_date=None, destination=None, local_vars_configuration=None):  # noqa: E501
        """RestoreEndpointRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._source = None
        self._exclude = None
        self._tape = None
        self._export = None
        self._start_date = None
        self._destination = None
        self.discriminator = None

        self.name = name
        self.source = source
        self.exclude = exclude
        self.tape = tape
        if export is not None:
            self.export = export
        self.start_date = start_date
        self.destination = destination

    @property
    def name(self):
        """Gets the name of this RestoreEndpointRequest.  # noqa: E501


        :return: The name of this RestoreEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestoreEndpointRequest.


        :param name: The name of this RestoreEndpointRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this RestoreEndpointRequest.  # noqa: E501


        :return: The source of this RestoreEndpointRequest.  # noqa: E501
        :rtype: list[TapeJobSource]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RestoreEndpointRequest.


        :param source: The source of this RestoreEndpointRequest.  # noqa: E501
        :type: list[TapeJobSource]
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def exclude(self):
        """Gets the exclude of this RestoreEndpointRequest.  # noqa: E501


        :return: The exclude of this RestoreEndpointRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this RestoreEndpointRequest.


        :param exclude: The exclude of this RestoreEndpointRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and exclude is None:  # noqa: E501
            raise ValueError("Invalid value for `exclude`, must not be `None`")  # noqa: E501

        self._exclude = exclude

    @property
    def tape(self):
        """Gets the tape of this RestoreEndpointRequest.  # noqa: E501


        :return: The tape of this RestoreEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._tape

    @tape.setter
    def tape(self, tape):
        """Sets the tape of this RestoreEndpointRequest.


        :param tape: The tape of this RestoreEndpointRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tape is None:  # noqa: E501
            raise ValueError("Invalid value for `tape`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                tape is not None and len(tape) < 1):
            raise ValueError("Invalid value for `tape`, length must be greater than or equal to `1`")  # noqa: E501

        self._tape = tape

    @property
    def export(self):
        """Gets the export of this RestoreEndpointRequest.  # noqa: E501


        :return: The export of this RestoreEndpointRequest.  # noqa: E501
        :rtype: bool
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this RestoreEndpointRequest.


        :param export: The export of this RestoreEndpointRequest.  # noqa: E501
        :type: bool
        """

        self._export = export

    @property
    def start_date(self):
        """Gets the start_date of this RestoreEndpointRequest.  # noqa: E501


        :return: The start_date of this RestoreEndpointRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RestoreEndpointRequest.


        :param start_date: The start_date of this RestoreEndpointRequest.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def destination(self):
        """Gets the destination of this RestoreEndpointRequest.  # noqa: E501


        :return: The destination of this RestoreEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RestoreEndpointRequest.


        :param destination: The destination of this RestoreEndpointRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                destination is not None and len(destination) < 1):
            raise ValueError("Invalid value for `destination`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination = destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestoreEndpointRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RestoreEndpointRequest):
            return True

        return self.to_dict() != other.to_dict()
