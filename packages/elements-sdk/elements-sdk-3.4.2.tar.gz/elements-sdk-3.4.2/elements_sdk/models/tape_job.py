# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TapeJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'TapeGroup',
        'id': 'int',
        'exclude': 'list[str]',
        'selected_tape': 'str',
        'has_copy2': 'str',
        'copy2_id': 'str',
        'status': 'str',
        'copied': 'str',
        'total': 'str',
        'type': 'str',
        'export': 'bool',
        'start': 'str',
        'duration': 'str',
        'name': 'str',
        'destination': 'str',
        'delete_source': 'bool',
        'destination2': 'str',
        'group2': 'str',
        'export2': 'bool',
        'md5': 'bool',
        'start_date': 'str',
        'log_path': 'str',
        'log_exists': 'bool'
    }

    attribute_map = {
        'group': 'group',
        'id': 'id',
        'exclude': 'exclude',
        'selected_tape': 'selected_tape',
        'has_copy2': 'has_copy2',
        'copy2_id': 'copy2_id',
        'status': 'status',
        'copied': 'copied',
        'total': 'total',
        'type': 'type',
        'export': 'export',
        'start': 'start',
        'duration': 'duration',
        'name': 'name',
        'destination': 'destination',
        'delete_source': 'delete_source',
        'destination2': 'destination2',
        'group2': 'group2',
        'export2': 'export2',
        'md5': 'md5',
        'start_date': 'start_date',
        'log_path': 'log_path',
        'log_exists': 'log_exists'
    }

    def __init__(self, group=None, id=None, exclude=None, selected_tape=None, has_copy2=None, copy2_id=None, status=None, copied=None, total=None, type=None, export=None, start=None, duration=None, name=None, destination=None, delete_source=None, destination2=None, group2=None, export2=None, md5=None, start_date=None, log_path=None, log_exists=None, local_vars_configuration=None):  # noqa: E501
        """TapeJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group = None
        self._id = None
        self._exclude = None
        self._selected_tape = None
        self._has_copy2 = None
        self._copy2_id = None
        self._status = None
        self._copied = None
        self._total = None
        self._type = None
        self._export = None
        self._start = None
        self._duration = None
        self._name = None
        self._destination = None
        self._delete_source = None
        self._destination2 = None
        self._group2 = None
        self._export2 = None
        self._md5 = None
        self._start_date = None
        self._log_path = None
        self._log_exists = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if exclude is not None:
            self.exclude = exclude
        if selected_tape is not None:
            self.selected_tape = selected_tape
        if has_copy2 is not None:
            self.has_copy2 = has_copy2
        if copy2_id is not None:
            self.copy2_id = copy2_id
        if status is not None:
            self.status = status
        if copied is not None:
            self.copied = copied
        if total is not None:
            self.total = total
        if type is not None:
            self.type = type
        if export is not None:
            self.export = export
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration
        if name is not None:
            self.name = name
        if destination is not None:
            self.destination = destination
        if delete_source is not None:
            self.delete_source = delete_source
        if destination2 is not None:
            self.destination2 = destination2
        self.group2 = group2
        if export2 is not None:
            self.export2 = export2
        if md5 is not None:
            self.md5 = md5
        if start_date is not None:
            self.start_date = start_date
        self.log_path = log_path
        if log_exists is not None:
            self.log_exists = log_exists

    @property
    def group(self):
        """Gets the group of this TapeJob.  # noqa: E501


        :return: The group of this TapeJob.  # noqa: E501
        :rtype: TapeGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this TapeJob.


        :param group: The group of this TapeJob.  # noqa: E501
        :type: TapeGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this TapeJob.  # noqa: E501


        :return: The id of this TapeJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TapeJob.


        :param id: The id of this TapeJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def exclude(self):
        """Gets the exclude of this TapeJob.  # noqa: E501


        :return: The exclude of this TapeJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this TapeJob.


        :param exclude: The exclude of this TapeJob.  # noqa: E501
        :type: list[str]
        """

        self._exclude = exclude

    @property
    def selected_tape(self):
        """Gets the selected_tape of this TapeJob.  # noqa: E501


        :return: The selected_tape of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._selected_tape

    @selected_tape.setter
    def selected_tape(self, selected_tape):
        """Sets the selected_tape of this TapeJob.


        :param selected_tape: The selected_tape of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                selected_tape is not None and len(selected_tape) < 1):
            raise ValueError("Invalid value for `selected_tape`, length must be greater than or equal to `1`")  # noqa: E501

        self._selected_tape = selected_tape

    @property
    def has_copy2(self):
        """Gets the has_copy2 of this TapeJob.  # noqa: E501


        :return: The has_copy2 of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._has_copy2

    @has_copy2.setter
    def has_copy2(self, has_copy2):
        """Sets the has_copy2 of this TapeJob.


        :param has_copy2: The has_copy2 of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                has_copy2 is not None and len(has_copy2) < 1):
            raise ValueError("Invalid value for `has_copy2`, length must be greater than or equal to `1`")  # noqa: E501

        self._has_copy2 = has_copy2

    @property
    def copy2_id(self):
        """Gets the copy2_id of this TapeJob.  # noqa: E501


        :return: The copy2_id of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._copy2_id

    @copy2_id.setter
    def copy2_id(self, copy2_id):
        """Sets the copy2_id of this TapeJob.


        :param copy2_id: The copy2_id of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                copy2_id is not None and len(copy2_id) < 1):
            raise ValueError("Invalid value for `copy2_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._copy2_id = copy2_id

    @property
    def status(self):
        """Gets the status of this TapeJob.  # noqa: E501


        :return: The status of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TapeJob.


        :param status: The status of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def copied(self):
        """Gets the copied of this TapeJob.  # noqa: E501


        :return: The copied of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._copied

    @copied.setter
    def copied(self, copied):
        """Sets the copied of this TapeJob.


        :param copied: The copied of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                copied is not None and len(copied) < 1):
            raise ValueError("Invalid value for `copied`, length must be greater than or equal to `1`")  # noqa: E501

        self._copied = copied

    @property
    def total(self):
        """Gets the total of this TapeJob.  # noqa: E501


        :return: The total of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TapeJob.


        :param total: The total of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                total is not None and len(total) < 1):
            raise ValueError("Invalid value for `total`, length must be greater than or equal to `1`")  # noqa: E501

        self._total = total

    @property
    def type(self):
        """Gets the type of this TapeJob.  # noqa: E501


        :return: The type of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TapeJob.


        :param type: The type of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def export(self):
        """Gets the export of this TapeJob.  # noqa: E501


        :return: The export of this TapeJob.  # noqa: E501
        :rtype: bool
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this TapeJob.


        :param export: The export of this TapeJob.  # noqa: E501
        :type: bool
        """

        self._export = export

    @property
    def start(self):
        """Gets the start of this TapeJob.  # noqa: E501


        :return: The start of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TapeJob.


        :param start: The start of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                start is not None and len(start) < 1):
            raise ValueError("Invalid value for `start`, length must be greater than or equal to `1`")  # noqa: E501

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this TapeJob.  # noqa: E501


        :return: The duration of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TapeJob.


        :param duration: The duration of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                duration is not None and len(duration) < 1):
            raise ValueError("Invalid value for `duration`, length must be greater than or equal to `1`")  # noqa: E501

        self._duration = duration

    @property
    def name(self):
        """Gets the name of this TapeJob.  # noqa: E501


        :return: The name of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TapeJob.


        :param name: The name of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def destination(self):
        """Gets the destination of this TapeJob.  # noqa: E501


        :return: The destination of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this TapeJob.


        :param destination: The destination of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                destination is not None and len(destination) < 1):
            raise ValueError("Invalid value for `destination`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination = destination

    @property
    def delete_source(self):
        """Gets the delete_source of this TapeJob.  # noqa: E501


        :return: The delete_source of this TapeJob.  # noqa: E501
        :rtype: bool
        """
        return self._delete_source

    @delete_source.setter
    def delete_source(self, delete_source):
        """Sets the delete_source of this TapeJob.


        :param delete_source: The delete_source of this TapeJob.  # noqa: E501
        :type: bool
        """

        self._delete_source = delete_source

    @property
    def destination2(self):
        """Gets the destination2 of this TapeJob.  # noqa: E501


        :return: The destination2 of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._destination2

    @destination2.setter
    def destination2(self, destination2):
        """Sets the destination2 of this TapeJob.


        :param destination2: The destination2 of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                destination2 is not None and len(destination2) < 1):
            raise ValueError("Invalid value for `destination2`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination2 = destination2

    @property
    def group2(self):
        """Gets the group2 of this TapeJob.  # noqa: E501


        :return: The group2 of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._group2

    @group2.setter
    def group2(self, group2):
        """Sets the group2 of this TapeJob.


        :param group2: The group2 of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                group2 is not None and len(group2) < 1):
            raise ValueError("Invalid value for `group2`, length must be greater than or equal to `1`")  # noqa: E501

        self._group2 = group2

    @property
    def export2(self):
        """Gets the export2 of this TapeJob.  # noqa: E501


        :return: The export2 of this TapeJob.  # noqa: E501
        :rtype: bool
        """
        return self._export2

    @export2.setter
    def export2(self, export2):
        """Sets the export2 of this TapeJob.


        :param export2: The export2 of this TapeJob.  # noqa: E501
        :type: bool
        """

        self._export2 = export2

    @property
    def md5(self):
        """Gets the md5 of this TapeJob.  # noqa: E501


        :return: The md5 of this TapeJob.  # noqa: E501
        :rtype: bool
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this TapeJob.


        :param md5: The md5 of this TapeJob.  # noqa: E501
        :type: bool
        """

        self._md5 = md5

    @property
    def start_date(self):
        """Gets the start_date of this TapeJob.  # noqa: E501


        :return: The start_date of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TapeJob.


        :param start_date: The start_date of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                start_date is not None and len(start_date) < 1):
            raise ValueError("Invalid value for `start_date`, length must be greater than or equal to `1`")  # noqa: E501

        self._start_date = start_date

    @property
    def log_path(self):
        """Gets the log_path of this TapeJob.  # noqa: E501


        :return: The log_path of this TapeJob.  # noqa: E501
        :rtype: str
        """
        return self._log_path

    @log_path.setter
    def log_path(self, log_path):
        """Sets the log_path of this TapeJob.


        :param log_path: The log_path of this TapeJob.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                log_path is not None and len(log_path) < 1):
            raise ValueError("Invalid value for `log_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._log_path = log_path

    @property
    def log_exists(self):
        """Gets the log_exists of this TapeJob.  # noqa: E501


        :return: The log_exists of this TapeJob.  # noqa: E501
        :rtype: bool
        """
        return self._log_exists

    @log_exists.setter
    def log_exists(self, log_exists):
        """Sets the log_exists of this TapeJob.


        :param log_exists: The log_exists of this TapeJob.  # noqa: E501
        :type: bool
        """

        self._log_exists = log_exists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TapeJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TapeJob):
            return True

        return self.to_dict() != other.to_dict()
