# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TapeLibrarySlot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drive': 'int',
        'status': 'str',
        'barcode': 'str',
        'origin': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'drive': 'drive',
        'status': 'status',
        'barcode': 'barcode',
        'origin': 'origin',
        'locked': 'locked'
    }

    def __init__(self, drive=None, status=None, barcode=None, origin=None, locked=None, local_vars_configuration=None):  # noqa: E501
        """TapeLibrarySlot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._drive = None
        self._status = None
        self._barcode = None
        self._origin = None
        self._locked = None
        self.discriminator = None

        self.drive = drive
        if status is not None:
            self.status = status
        if barcode is not None:
            self.barcode = barcode
        if origin is not None:
            self.origin = origin
        if locked is not None:
            self.locked = locked

    @property
    def drive(self):
        """Gets the drive of this TapeLibrarySlot.  # noqa: E501


        :return: The drive of this TapeLibrarySlot.  # noqa: E501
        :rtype: int
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this TapeLibrarySlot.


        :param drive: The drive of this TapeLibrarySlot.  # noqa: E501
        :type: int
        """

        self._drive = drive

    @property
    def status(self):
        """Gets the status of this TapeLibrarySlot.  # noqa: E501


        :return: The status of this TapeLibrarySlot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TapeLibrarySlot.


        :param status: The status of this TapeLibrarySlot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def barcode(self):
        """Gets the barcode of this TapeLibrarySlot.  # noqa: E501


        :return: The barcode of this TapeLibrarySlot.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this TapeLibrarySlot.


        :param barcode: The barcode of this TapeLibrarySlot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                barcode is not None and len(barcode) < 1):
            raise ValueError("Invalid value for `barcode`, length must be greater than or equal to `1`")  # noqa: E501

        self._barcode = barcode

    @property
    def origin(self):
        """Gets the origin of this TapeLibrarySlot.  # noqa: E501


        :return: The origin of this TapeLibrarySlot.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this TapeLibrarySlot.


        :param origin: The origin of this TapeLibrarySlot.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                origin is not None and len(origin) < 1):
            raise ValueError("Invalid value for `origin`, length must be greater than or equal to `1`")  # noqa: E501

        self._origin = origin

    @property
    def locked(self):
        """Gets the locked of this TapeLibrarySlot.  # noqa: E501


        :return: The locked of this TapeLibrarySlot.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this TapeLibrarySlot.


        :param locked: The locked of this TapeLibrarySlot.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TapeLibrarySlot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TapeLibrarySlot):
            return True

        return self.to_dict() != other.to_dict()
