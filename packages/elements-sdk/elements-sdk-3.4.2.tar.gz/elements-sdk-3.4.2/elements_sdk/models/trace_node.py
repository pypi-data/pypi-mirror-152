# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class TraceNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'children': 'list[object]',
        'name': 'str',
        'r': 'int',
        'w': 'int',
        'total_children': 'int'
    }

    attribute_map = {
        'children': 'children',
        'name': 'name',
        'r': 'r',
        'w': 'w',
        'total_children': 'total_children'
    }

    def __init__(self, children=None, name=None, r=None, w=None, total_children=None, local_vars_configuration=None):  # noqa: E501
        """TraceNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._children = None
        self._name = None
        self._r = None
        self._w = None
        self._total_children = None
        self.discriminator = None

        self.children = children
        self.name = name
        if r is not None:
            self.r = r
        if w is not None:
            self.w = w
        if total_children is not None:
            self.total_children = total_children

    @property
    def children(self):
        """Gets the children of this TraceNode.  # noqa: E501


        :return: The children of this TraceNode.  # noqa: E501
        :rtype: list[object]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TraceNode.


        :param children: The children of this TraceNode.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and children is None:  # noqa: E501
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def name(self):
        """Gets the name of this TraceNode.  # noqa: E501


        :return: The name of this TraceNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TraceNode.


        :param name: The name of this TraceNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def r(self):
        """Gets the r of this TraceNode.  # noqa: E501


        :return: The r of this TraceNode.  # noqa: E501
        :rtype: int
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this TraceNode.


        :param r: The r of this TraceNode.  # noqa: E501
        :type: int
        """

        self._r = r

    @property
    def w(self):
        """Gets the w of this TraceNode.  # noqa: E501


        :return: The w of this TraceNode.  # noqa: E501
        :rtype: int
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this TraceNode.


        :param w: The w of this TraceNode.  # noqa: E501
        :type: int
        """

        self._w = w

    @property
    def total_children(self):
        """Gets the total_children of this TraceNode.  # noqa: E501


        :return: The total_children of this TraceNode.  # noqa: E501
        :rtype: int
        """
        return self._total_children

    @total_children.setter
    def total_children(self, total_children):
        """Sets the total_children of this TraceNode.


        :param total_children: The total_children of this TraceNode.  # noqa: E501
        :type: int
        """

        self._total_children = total_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TraceNode):
            return True

        return self.to_dict() != other.to_dict()
