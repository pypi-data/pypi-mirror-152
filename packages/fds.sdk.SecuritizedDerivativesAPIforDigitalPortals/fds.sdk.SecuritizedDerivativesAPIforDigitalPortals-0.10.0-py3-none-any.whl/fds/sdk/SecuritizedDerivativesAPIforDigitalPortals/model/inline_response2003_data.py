"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_agio import InlineResponse2003DataAgio
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_bonus_yield import InlineResponse2003DataBonusYield
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_break_even import InlineResponse2003DataBreakEven
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_currency import InlineResponse2003DataCurrency
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_delta import InlineResponse2003DataDelta
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_discount import InlineResponse2003DataDiscount
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_maximum_yield import InlineResponse2003DataMaximumYield
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_performance_issue import InlineResponse2003DataPerformanceIssue
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_prices import InlineResponse2003DataPrices
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_sideways_yield import InlineResponse2003DataSidewaysYield
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_spread import InlineResponse2003DataSpread
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_theta_one_week import InlineResponse2003DataThetaOneWeek
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_underlyings import InlineResponse2003DataUnderlyings
    from fds.sdk.SecuritizedDerivativesAPIforDigitalPortals.model.inline_response2003_data_vega import InlineResponse2003DataVega
    globals()['InlineResponse2003DataAgio'] = InlineResponse2003DataAgio
    globals()['InlineResponse2003DataBonusYield'] = InlineResponse2003DataBonusYield
    globals()['InlineResponse2003DataBreakEven'] = InlineResponse2003DataBreakEven
    globals()['InlineResponse2003DataCurrency'] = InlineResponse2003DataCurrency
    globals()['InlineResponse2003DataDelta'] = InlineResponse2003DataDelta
    globals()['InlineResponse2003DataDiscount'] = InlineResponse2003DataDiscount
    globals()['InlineResponse2003DataMaximumYield'] = InlineResponse2003DataMaximumYield
    globals()['InlineResponse2003DataPerformanceIssue'] = InlineResponse2003DataPerformanceIssue
    globals()['InlineResponse2003DataPrices'] = InlineResponse2003DataPrices
    globals()['InlineResponse2003DataSidewaysYield'] = InlineResponse2003DataSidewaysYield
    globals()['InlineResponse2003DataSpread'] = InlineResponse2003DataSpread
    globals()['InlineResponse2003DataThetaOneWeek'] = InlineResponse2003DataThetaOneWeek
    globals()['InlineResponse2003DataUnderlyings'] = InlineResponse2003DataUnderlyings
    globals()['InlineResponse2003DataVega'] = InlineResponse2003DataVega


class InlineResponse2003Data(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'prices': (InlineResponse2003DataPrices,),  # noqa: E501
            'underlyings': ([InlineResponse2003DataUnderlyings],),  # noqa: E501
            'currency': (InlineResponse2003DataCurrency,),  # noqa: E501
            'performance_issue': (InlineResponse2003DataPerformanceIssue,),  # noqa: E501
            'bonus_yield': (InlineResponse2003DataBonusYield,),  # noqa: E501
            'sideways_yield': (InlineResponse2003DataSidewaysYield,),  # noqa: E501
            'maximum_yield': (InlineResponse2003DataMaximumYield,),  # noqa: E501
            'agio': (InlineResponse2003DataAgio,),  # noqa: E501
            'discount': (InlineResponse2003DataDiscount,),  # noqa: E501
            'break_even': (InlineResponse2003DataBreakEven,),  # noqa: E501
            'spread': (InlineResponse2003DataSpread,),  # noqa: E501
            'delta': (InlineResponse2003DataDelta,),  # noqa: E501
            'theta_one_week': (InlineResponse2003DataThetaOneWeek,),  # noqa: E501
            'vega': (InlineResponse2003DataVega,),  # noqa: E501
            'leverage': (float,),  # noqa: E501
            'omega': (float,),  # noqa: E501
            'implied_volatility': (float,),  # noqa: E501
            'intrinsic_value': (float,),  # noqa: E501
            'time_value': (float,),  # noqa: E501
            'outperformance_point': (float,),  # noqa: E501
            'parity': (float,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'prices': 'prices',  # noqa: E501
        'underlyings': 'underlyings',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'performance_issue': 'performanceIssue',  # noqa: E501
        'bonus_yield': 'bonusYield',  # noqa: E501
        'sideways_yield': 'sidewaysYield',  # noqa: E501
        'maximum_yield': 'maximumYield',  # noqa: E501
        'agio': 'agio',  # noqa: E501
        'discount': 'discount',  # noqa: E501
        'break_even': 'breakEven',  # noqa: E501
        'spread': 'spread',  # noqa: E501
        'delta': 'delta',  # noqa: E501
        'theta_one_week': 'thetaOneWeek',  # noqa: E501
        'vega': 'vega',  # noqa: E501
        'leverage': 'leverage',  # noqa: E501
        'omega': 'omega',  # noqa: E501
        'implied_volatility': 'impliedVolatility',  # noqa: E501
        'intrinsic_value': 'intrinsicValue',  # noqa: E501
        'time_value': 'timeValue',  # noqa: E501
        'outperformance_point': 'outperformancePoint',  # noqa: E501
        'parity': 'parity',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse2003Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            prices (InlineResponse2003DataPrices): [optional]  # noqa: E501
            underlyings ([InlineResponse2003DataUnderlyings]): Details of the underlyings.. [optional]  # noqa: E501
            currency (InlineResponse2003DataCurrency): [optional]  # noqa: E501
            performance_issue (InlineResponse2003DataPerformanceIssue): [optional]  # noqa: E501
            bonus_yield (InlineResponse2003DataBonusYield): [optional]  # noqa: E501
            sideways_yield (InlineResponse2003DataSidewaysYield): [optional]  # noqa: E501
            maximum_yield (InlineResponse2003DataMaximumYield): [optional]  # noqa: E501
            agio (InlineResponse2003DataAgio): [optional]  # noqa: E501
            discount (InlineResponse2003DataDiscount): [optional]  # noqa: E501
            break_even (InlineResponse2003DataBreakEven): [optional]  # noqa: E501
            spread (InlineResponse2003DataSpread): [optional]  # noqa: E501
            delta (InlineResponse2003DataDelta): [optional]  # noqa: E501
            theta_one_week (InlineResponse2003DataThetaOneWeek): [optional]  # noqa: E501
            vega (InlineResponse2003DataVega): [optional]  # noqa: E501
            leverage (float): Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates).. [optional]  # noqa: E501
            omega (float): Ask-based omega. It represents unadjusted delta (see attribute `delta.unadjusted`) multiplied with the leverage (see attribute `leverage`), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative's price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            implied_volatility (float): Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative's pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            intrinsic_value (float): Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            time_value (float): Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute `intrinsicValue`). This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            outperformance_point (float): Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute `underlyings.valueUnit`.. [optional]  # noqa: E501
            parity (float): Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse2003Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            prices (InlineResponse2003DataPrices): [optional]  # noqa: E501
            underlyings ([InlineResponse2003DataUnderlyings]): Details of the underlyings.. [optional]  # noqa: E501
            currency (InlineResponse2003DataCurrency): [optional]  # noqa: E501
            performance_issue (InlineResponse2003DataPerformanceIssue): [optional]  # noqa: E501
            bonus_yield (InlineResponse2003DataBonusYield): [optional]  # noqa: E501
            sideways_yield (InlineResponse2003DataSidewaysYield): [optional]  # noqa: E501
            maximum_yield (InlineResponse2003DataMaximumYield): [optional]  # noqa: E501
            agio (InlineResponse2003DataAgio): [optional]  # noqa: E501
            discount (InlineResponse2003DataDiscount): [optional]  # noqa: E501
            break_even (InlineResponse2003DataBreakEven): [optional]  # noqa: E501
            spread (InlineResponse2003DataSpread): [optional]  # noqa: E501
            delta (InlineResponse2003DataDelta): [optional]  # noqa: E501
            theta_one_week (InlineResponse2003DataThetaOneWeek): [optional]  # noqa: E501
            vega (InlineResponse2003DataVega): [optional]  # noqa: E501
            leverage (float): Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates).. [optional]  # noqa: E501
            omega (float): Ask-based omega. It represents unadjusted delta (see attribute `delta.unadjusted`) multiplied with the leverage (see attribute `leverage`), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative's price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            implied_volatility (float): Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative's pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            intrinsic_value (float): Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            time_value (float): Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute `intrinsicValue`). This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
            outperformance_point (float): Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute `underlyings.valueUnit`.. [optional]  # noqa: E501
            parity (float): Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
