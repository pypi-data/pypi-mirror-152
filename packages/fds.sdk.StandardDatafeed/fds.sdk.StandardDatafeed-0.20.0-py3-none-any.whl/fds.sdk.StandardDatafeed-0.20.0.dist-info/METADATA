Metadata-Version: 2.1
Name: fds.sdk.StandardDatafeed
Version: 0.20.0
Summary: Standard Datafeed client library for Python
Home-page: https://github.com/FactSet/enterprise-sdk/tree/main/code/python/StandardDatafeed/v1
Author: FactSet Research Systems
License: Apache-2.0
Keywords: FactSet,API,SDK
Platform: UNKNOWN
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: urllib3 (>=1.25.3)
Requires-Dist: python-dateutil
Requires-Dist: fds.sdk.utils (>=1.0.0)

<img alt="FactSet" src="https://www.factset.com/hubfs/Assets/images/factset-logo.svg" height="56" width="290">

# Standard Datafeed client library for Python

[![PyPi](https://img.shields.io/pypi/v/fds.sdk.StandardDatafeed)](https://pypi.org/project/fds.sdk.StandardDatafeed/)
[![Apache-2 license](https://img.shields.io/badge/license-Apache2-brightgreen.svg)](https://www.apache.org/licenses/LICENSE-2.0)

The Standard Datafeed (SDF) API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader. This API provides an alternative for users who are unable to utilize the Loader due to:

Unable to install 3rd party executables due to Corporate Security policies
Unable to utilize the Loader due to limitations or restrictions with the environment used to consume Standard Datafeed
Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution
This API allows users to retrieve SDF packages they have subscriptions for, going back to August 31, 2021. Additional parameters are available to filter requests to get the exact files users are looking for.


This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 1.0
- Package version: 0.20.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements

* Python >= 3.6

## Installation

### Poetry

```shell
poetry add fds.sdk.utils fds.sdk.StandardDatafeed
```

### pip

```shell
pip install fds.sdk.utils fds.sdk.StandardDatafeed
```

## Usage

1. [Generate authentication credentials](../../../../README.md#authentication).
2. Setup Python environment.
   1. Install and activate python 3.6+. If you're using [pyenv](https://github.com/pyenv/pyenv):

      ```sh
      pyenv install 3.9.7
      pyenv shell 3.9.7
      ```

   2. (optional) [Install poetry](https://python-poetry.org/docs/#installation).
3. [Install dependencies](#installation).
4. Run the following:

```python

from fds.sdk.utils.authentication import ConfidentialClient
import fds.sdk.StandardDatafeed
from fds.sdk.StandardDatafeed.api import schema_api
from fds.sdk.StandardDatafeed.model.list_schema200_response import ListSchema200Response
from fds.sdk.StandardDatafeed.model.list_schema400_response import ListSchema400Response
from pprint import pprint

# See configuration.py for a list of all supported configuration parameters.

# Examples for each supported authentication method are below,
# choose one that satisfies your use case.

# (Preferred) OAuth 2.0: FactSetOAuth2
# See https://github.com/FactSet/enterprise-sdk#oauth-20
# for information on how to create the app-config.json file
# See https://github.com/FactSet/enterprise-sdk-utils-python#authentication
# for more information on using the ConfidentialClient class
configuration = fds.sdk.StandardDatafeed.Configuration(
    fds_oauth_client=ConfidentialClient('/path/to/app-config.json')
)

# Basic authentication: FactSetApiKey
# See https://github.com/FactSet/enterprise-sdk#api-key
# for information how to create an API key
# configuration = fds.sdk.StandardDatafeed.Configuration(
#     username='USERNAME-SERIAL',
#     password='API-KEY'
# )

# Enter a context with an instance of the API client
with fds.sdk.StandardDatafeed.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = schema_api.SchemaApi(api_client)
    schema = "schema_example" # str | schema name</p> Default is all schemas & bundles subscribed by the client</p> **Example: acta_v1, fgp_v1, yn_v1** (optional)
    sequence = 1 # int | Enter the sequence number associated with a schema</p> Provides a pre-signed url to download the respective schema file</p> \"**Example: \"8\" from acta_v1: [8],** (optional)

    # Get response
    try:
        # schemas
        api_response = api_instance.get_v1_list_schemas(schema=schema, sequence=sequence)
        pprint(api_response)
    except fds.sdk.StandardDatafeed.ApiException as e:
        print("Exception when calling SchemaApi->get_v1_list_schemas: %s\n" % e)

    # Get response, http status code and response headers
    # try:
    #     # schemas
    #     api_response, http_status_code, response_headers = api_instance.get_v1_list_schemas_with_http_info(schema=schema, sequence=sequence)
    #     pprint(api_response)
    #     pprint(http_status_code)
    #     pprint(response_headers)
    # except fds.sdk.StandardDatafeed.ApiException as e:
    #     print("Exception when calling SchemaApi->get_v1_list_schemas: %s\n" % e)

    # Get response asynchronous
    # try:
    #     # schemas
    #     async_result = api_instance.get_v1_list_schemas_async(schema=schema, sequence=sequence)
    #     api_response = async_result.get()
    #     pprint(api_response)
    # except fds.sdk.StandardDatafeed.ApiException as e:
    #     print("Exception when calling SchemaApi->get_v1_list_schemas: %s\n" % e)

    # Get response, http status code and response headers asynchronous
    # try:
    #     # schemas
    #     async_result = api_instance.get_v1_list_schemas_with_http_info_async(schema=schema, sequence=sequence)
    #     api_response, http_status_code, response_headers = async_result.get()
    #     pprint(api_response)
    #     pprint(http_status_code)
    #     pprint(response_headers)
    # except fds.sdk.StandardDatafeed.ApiException as e:
    #     print("Exception when calling SchemaApi->get_v1_list_schemas: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *https://api.factset.com/bulk-documents/sdf*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*SchemaApi* | [**get_v1_list_schemas**](docs/SchemaApi.md#get_v1_list_schemas) | **GET** /v1/list-schemas | schemas
*SchemasBundlesApi* | [**get_v1_list_files**](docs/SchemasBundlesApi.md#get_v1_list_files) | **GET** /v1/list-files | 


## Documentation For Models

 - [Data](docs/Data.md)
 - [ListFiles200Response](docs/ListFiles200Response.md)
 - [ListFiles400Response](docs/ListFiles400Response.md)
 - [ListSchema200Response](docs/ListSchema200Response.md)
 - [ListSchema400Response](docs/ListSchema400Response.md)
 - [Meta](docs/Meta.md)
 - [Pagination](docs/Pagination.md)
 - [Partial](docs/Partial.md)


## Documentation For Authorization


## FactSetApiKey

- **Type**: HTTP basic authentication


## FactSetOAuth2

- **Type**: OAuth
- **Flow**: application
- **Authorization URL**: 
- **Scopes**: N/A


## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in fds.sdk.StandardDatafeed.apis and fds.sdk.StandardDatafeed.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from fds.sdk.StandardDatafeed.api.default_api import DefaultApi`
- `from fds.sdk.StandardDatafeed.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import fds.sdk.StandardDatafeed
from fds.sdk.StandardDatafeed.apis import *
from fds.sdk.StandardDatafeed.models import *
```

## Contributing

Please refer to the [contributing guide](../../../../CONTRIBUTING.md).

## Copyright

Copyright 2022 FactSet Research Systems Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



