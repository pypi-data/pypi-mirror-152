{"version":3,"file":"93019e86.js","mappings":";AA+CA;AAEA;AACA;;AAIA;AAEA;AAIA;AACA;;AAEA;AACA;;;AAMA;AAEA;AACA;;AAIA;AACA;;AAIA;AACA;;AAIA;AACA;;AAIA;AAhDA;;;;;;AAvBA","sources":["webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/integration-elements/zha/ha-device-actions-zha.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { navigate } from \"../../../../../../common/navigate\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport { fetchZHADevice, ZHADevice } from \"../../../../../../data/zha\";\nimport { showConfirmationDialog } from \"../../../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\nimport { showZHAClusterDialog } from \"../../../../integrations/integration-panels/zha/show-dialog-zha-cluster\";\nimport { showZHADeviceChildrenDialog } from \"../../../../integrations/integration-panels/zha/show-dialog-zha-device-children\";\nimport { showZHADeviceZigbeeInfoDialog } from \"../../../../integrations/integration-panels/zha/show-dialog-zha-device-zigbee-info\";\nimport { showZHAReconfigureDeviceDialog } from \"../../../../integrations/integration-panels/zha/show-dialog-zha-reconfigure-device\";\n\n@customElement(\"ha-device-actions-zha\")\nexport class HaDeviceActionsZha extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device!: DeviceRegistryEntry;\n\n  @state() private _zhaDevice?: ZHADevice;\n\n  protected updated(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"device\")) {\n      const zigbeeConnection = this.device.connections.find(\n        (conn) => conn[0] === \"zigbee\"\n      );\n      if (!zigbeeConnection) {\n        return;\n      }\n      fetchZHADevice(this.hass, zigbeeConnection[1]).then((device) => {\n        this._zhaDevice = device;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._zhaDevice) {\n      return html``;\n    }\n    return html`\n      ${this._zhaDevice.device_type !== \"Coordinator\"\n        ? html`\n            <mwc-button @click=${this._onReconfigureNodeClick}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.reconfigure\"\n              )}\n            </mwc-button>\n          `\n        : \"\"}\n      ${this._zhaDevice.power_source === \"Mains\" &&\n      (this._zhaDevice.device_type === \"Router\" ||\n        this._zhaDevice.device_type === \"Coordinator\")\n        ? html`\n            <mwc-button @click=${this._onAddDevicesClick}>\n              ${this.hass!.localize(\"ui.dialogs.zha_device_info.buttons.add\")}\n            </mwc-button>\n            <mwc-button @click=${this._handleDeviceChildrenClicked}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.device_children\"\n              )}\n            </mwc-button>\n          `\n        : \"\"}\n      ${this._zhaDevice.device_type !== \"Coordinator\"\n        ? html`\n            <mwc-button @click=${this._handleZigbeeInfoClicked}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.zigbee_information\"\n              )}\n            </mwc-button>\n            <mwc-button @click=${this._showClustersDialog}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.clusters\"\n              )}\n            </mwc-button>\n            <mwc-button @click=${this._onViewInVisualizationClick}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.view_in_visualization\"\n              )}\n            </mwc-button>\n            <mwc-button class=\"warning\" @click=${this._removeDevice}>\n              ${this.hass!.localize(\n                \"ui.dialogs.zha_device_info.buttons.remove\"\n              )}\n            </mwc-button>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _showClustersDialog(): Promise<void> {\n    await showZHAClusterDialog(this, { device: this._zhaDevice! });\n  }\n\n  private async _onReconfigureNodeClick(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    showZHAReconfigureDeviceDialog(this, { device: this._zhaDevice! });\n  }\n\n  private _onAddDevicesClick() {\n    navigate(`/config/zha/add/${this._zhaDevice!.ieee}`);\n  }\n\n  private _onViewInVisualizationClick() {\n    navigate(`/config/zha/visualization/${this._zhaDevice!.device_reg_id}`);\n  }\n\n  private async _handleZigbeeInfoClicked() {\n    showZHADeviceZigbeeInfoDialog(this, { device: this._zhaDevice! });\n  }\n\n  private async _handleDeviceChildrenClicked() {\n    showZHADeviceChildrenDialog(this, { device: this._zhaDevice! });\n  }\n\n  private async _removeDevice() {\n    const confirmed = await showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.dialogs.zha_device_info.confirmations.remove\"\n      ),\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    await this.hass.callService(\"zha\", \"remove\", {\n      ieee: this._zhaDevice!.ieee,\n    });\n\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          align-items: flex-start;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}