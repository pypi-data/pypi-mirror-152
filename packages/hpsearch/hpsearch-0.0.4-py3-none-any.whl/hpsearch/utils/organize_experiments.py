# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils/organize_experiments.ipynb (unless otherwise specified).

__all__ = ['join_experiments', 'remove_defaults_from_experiment_data', 'remove_experiments']

# Cell
import pandas as pd
import numpy as np
import shutil

from . import experiment_utils
import hpsearch.config.hp_defaults as dflt
from .experiment_utils import read_df, write_df

# Cell
def join_experiments (path_source, path_destination, key_score=None):
    experiment_data_source = read_df (path_source)
    experiment_data_destination = read_df (path_destination)
    experiment_data_source, changed_source = remove_defaults_from_experiment_data (experiment_data_source)
    experiment_data_destination, changed_destination = remove_defaults_from_experiment_data (experiment_data_destination)

    for experiment_number_source in range(experiment_data_source.shape[0]):
        path_experiment_source = '%s/experiments/%05d' %(path_source, experiment_number_source)
        parameters_source, _ = joblib.load(f'{path_experiment_source}/parameters.pk')
        experiment_number_destination, changed_dataframe, _ = experiment_utils.find_rows_with_parameters_dict (experiment_data_destination, parameters_source)
        path_experiment_destination = f'{path_destination}/experiments/{experiment_number_destination:5d}'
        if changed_dataframe:
            # move folders
            os.rename (path_experiment_source, path_experiment_destination)
            # copy results to dataframe
            missing_cols = [col for col in experiment_data_source.columns if col not in experiment_data_destination.columns]
            for column in missing_cols:
                experiment_data_destination[column] = None
            experiment_data_destination.loc[experiment_number_destination] = experiment_data_source.loc[experiment_number_source]
        else:
            class_ids_source = [int(x) for x in os.listdir(path_experiment_source) if os.path.isdir('%s/%s' %(path_experiment_source, x))]
            class_ids_destination = [int(x) for x in os.listdir(path_experiment_destination) if os.path.isdir('%s/%s' %(path_experiment_destination, x))]
            last_id_destination = max(class_ids_destination)

            class_ids_both = [x for x in class_ids_source if x in class_ids_destination]
            class_ids_source = [x for x in class_ids_source if x not in class_ids_both]
            class_ids_destination = [x for x in class_ids_destination if x not in class_ids_both]
            for (idx, class_id_source) in enumerate(class_ids_both):
                if key_score is not None:
                    scores_name = '%d_%s' %(class_id_source, key_score)
                    if experiment_data_source.loc[experiment_number_source, scores_name] != experiment_data_destination.loc[experiment_number_destination, scores_name]:
                        is_new = True
                else:
                    is_new = False
                    scores_name_source = [x for x in experiment_data_source.columns if x.startswith('%d_' %class_id_source)]
                    scores_name_source = [x for x in scores_name_source if not np.isnan(experiment_data_source.loc[experiment_number_source, x])]
                    for scores_name in scores_name_source:
                        if experiment_data_source.loc[experiment_number_source, scores_name] != experiment_data_destination.loc[experiment_number_destination, scores_name]:
                            is_new = True
                            break
                if not is_new:
                    del class_ids_both[idx]
            class_ids_source += class_ids_both
            class_ids_destination += class_ids_both

            last_id_source = len(class_ids_source)
            new_ids_destination = range(last_id_destination+1, last_id_destination+last_id_source)
            for (new_id_destination, class_id_source) in zip(new_ids_destination, class_ids_source):
                # move folders
                os.rename ('%s/%d' %(path_experiment_source, class_id_source), '%s/%d' %(path_experiment_destination, new_id_destination))
                # copy results to dataframe
                scores_name_source = [x for x in experiment_data_source.columns if x.startswith('%d_' %class_id_source)]
                scores_name_destination = ['%d_%s' (new_id_destination, x[len('%d_' %class_id_source):]) for x in scores_name_source]
                for score_name_source, score_name_destination in zip(scores_name_source, scores_name_destination):
                    experiment_data_destination.loc[experiment_number_destination, score_name_destination] = experiment_data_source.loc[experiment_number_source, score_name_source]

        write_df (experiment_data_destination, path_destination)

# Cell
def remove_defaults_from_experiment_data (experiment_data):
    from ..config.hpconfig import get_default_parameters

    experiment_data_original = experiment_data.copy()
    parameters_names = experiment_utils.get_parameters_columns (experiment_data)
    parameters_data = experiment_data_original[parameters_names]
    changed_df = False
    for experiment_number in range(experiment_data.shape[0]):
        good_params = ~(experiment_data.loc[experiment_number, parameters_names].isna()).values
        parameters_names_i = np.array(parameters_names)[good_params]
        parameters_names_i = parameters_names_i.tolist()
        parameters = experiment_data.loc[experiment_number, parameters_names_i].to_dict()

        defaults = get_default_parameters(parameters)
        default_names = [default_name for default_name in defaults.keys() if default_name in parameters_names_i]

        for default_name in default_names:
            has_default = experiment_data.loc[experiment_number, default_name] == defaults[default_name]
            if has_default:
                print ('found experiment with default in experiment_number {}, parameter {}, values: {}'.format(experiment_number, default_name, experiment_data.loc[experiment_number, default_name]))
                changed_df = True
                experiment_data.loc[experiment_number, default_name] = None

    # check if there are repeated experiments
    if changed_df:
        if experiment_data[parameters_names].duplicated().any():
            print ('duplicated experiments: {}'.format(experiment_data[parameters_names].duplicated()))
            experiment_data = experiment_data_original
            changed_df = False

    return experiment_data, changed_df

# Cell
def remove_experiments (experiments=[], folder=None, manager_path=dflt.manager_path):
    from ..config.hpconfig import get_experiment_manager
    em = get_experiment_manager (manager_path=dflt.manager_path)
    if folder is not None: em.set_path_experiments (folder=folder)
    if type(experiments) is not list:
        experiments = [experiments]
    path_experiments = em.path_experiments

    # 1. remove experiments from csv file
    experiment_data = read_df (path_experiments)
    experiment_data = experiment_data.drop (index=experiments)

    # 2. remove experiments folders
    for experiment in experiments:
        path_experiment = em.get_path_experiment (experiment)
        shutil.rmtree(path_experiment)

    # 3. move experiment folders
    for new_number, original_number in enumerate(experiment_data.index):
        path_new_experiment = em.get_path_experiment (new_number)
        path_original_experiment = em.get_path_experiment (original_number)
        if path_new_experiment != path_original_experiment:
            shutil.move (path_original_experiment, path_new_experiment)

    # 4. move experiment indexes
    experiment_data.index = range(len(experiment_data.index))

    # 5. save experiment data
    write_df (experiment_data, path_experiments)