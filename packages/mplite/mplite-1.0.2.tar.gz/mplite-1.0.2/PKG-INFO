Metadata-Version: 2.1
Name: mplite
Version: 1.0.2
Summary: A module that makes multiprocessing easy.
Home-page: https://github.com/root-11/mplite
Author: root-11
License: MIT
Keywords: multiprocessing,tasks
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Description-Content-Type: text/markdown
License-File: LICENSE

# mplite
A light weight wrapper for pythons multiprocessing module that makes multiprocessing easy.

In case anyone is looking for a very easy way to use multiprocessing with args and kwargs, here is a neat wrapper as [mplite](https://pypi.org/project/mplite/):

The [test](https://github.com/root-11/mplite/blob/main/tests/test_basics.py) is also the showcase:
```
from mplite import TaskManager, Task
import time

# first create the function that each cpu should work on individually.
def f(*args, **kwargs):
    print(args, kwargs)
    time.sleep(args[0])
    return args[0]

# Next create the main function you'd like to run everything from:
def main():
    tasks = []   # create a tasklist and populate it with tasks
    for n in list(range(10))*5:
        t = Task(f, *(n/10,), **{'hello': n})  
        tasks.append(t)

    with TaskManager() as tm:
        results = tm.execute(tasks)

if __name__ == "__main__":
    main()
```



