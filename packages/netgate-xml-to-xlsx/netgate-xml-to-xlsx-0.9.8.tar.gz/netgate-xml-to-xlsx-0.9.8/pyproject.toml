[tool.poetry]
name = "netgate-xml-to-xlsx"
version = "0.9.8"
description = "Translate Netgate firewall rules to spreadsheet for review."
authors = ["Raymond GA Côté <ray@AppropriateSolutions.com>"]
keywords = ["firewall", "netgate"]
readme = "README.md"
license = "BSD-3-Clause"
homepage = "https://gitlab.com/appropriate-solutions-inc/netgate-xml-to-xlsx"
repository = "https://gitlab.com/appropriate-solutions-inc/netgate-xml-to-xlsx.git"
include = [
    "LICENSE",
    "CHANGELOG.md",
    "TODO.md"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Topic :: System :: Networking :: Firewalls",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.10"
xmltodict = "^0.13.0"
openpyxl = "^3.0.9"
defusedxml = "^0.7.1"
toml = "^0.10.2"
lxml = "^4.8.0"


[tool.poetry.dev-dependencies]
pre-commit = "^2.17.0"
nox = "^2022.1.7"
nox-poetry = "^1."
pyupgrade = "^2.32.0"
pyflakes = "^2.4.0"
pydocstyle = "^6.1.1"
types-toml = "^0.10.7"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
netgate-xml-to-xlsx = "netgate_xml_to_xlsx.main:main"
flakeheaven = "flakeheaven:entrypoint"

#[tool.poetry.plugins."flake8.extension"]
#pylint = "flakeheaven.plugins:PyLintChecker"

[tool.bandit]
skips =["B101"]

[tool.black]
target-version = ["py310",]

[tool.isort]
profile = "black"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
ignore_missing_imports = true
warn_return_any = true
disallow_untyped_defs = true

# Haven't yet figured out how to make this work.
[tool.pylint.'MESSAGES CONTROL']
good-names=[
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_",
    "fh",
    "fn",
    "el",
    "dt",
    "ok",
    "yy",
    "mm",
    "dd"]

[tool.flake8]
exclude = [".git", "build", "dist","tests", "__pycache__", "docs"]
include = ["src", ]
max_line_length = 99
# Select only default flake8 checks
select = ['E', 'F', 'W', 'C90']

[tool.flakeheaven]
# See canonical example: https://raw.githubusercontent.com/flakeheaven/flakeheaven/master/pyproject.toml
exclude = [".git", "dist","tests"]
max_line_length = 99
format = "grouped"
# show_source = true

[tool.flakeheaven.plugins]
pycodestyle = ["+*"]
pyflakes = ["+*"]
flake8-aaa = ["+*", "+**/tests*"]
flake8-bandit = ["+*", "-**/tests*.py", "-S101"]
# flake8-black unnecessary as black runs as a pre-commit
#flake8-black = ["+*"]
flake8-broken-line = ["+*"]
flake8-bugbear = ["+*"]
flake8-builtins = ["+*"]
# Class IS complex
#flake8-cognitive-complexity = ["+*"]
flake8-comprehensions = ["+*"]
flake8-docstrings = ["+*"]
flake8-eradicate = ["+*"]
flake8-executable = ["+*"]
flake8-expression-complexity = ["+*"]
# flake8-fixme = ["+*"]
flake8-functions = ["+*", "-CFQ004"]
flake8-logging-format = ["+*"]
flake8-mutable = ["+*"]
flake8-printf-formatting = ["+*"]
flake8-pylint-plugin = ["+*","-PLR0201", "-PLR0902", "-PLR0903", "-PLR0911"]
# Add back the test
flake8-pytest = ["+*"]
flake8-pytest-style = ["+*", "+**/tests*"]
pylint = ["+*", "-R0903", "-R0902", "-R0911"]

