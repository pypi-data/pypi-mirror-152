{% from 'tf1x_utils.j2' import build_output_dict, check_input_vars %}
{% from 'controlflow.j2' import indented_if %}


{% macro layer_objectdetectionmodel(layer_spec, graph_spec) %}
class {{layer_spec.sanitized_name}}Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):
    def call(self, inputs, training=True):
        """ Takes a tensor and sends it as input to the loaded tensorflow model."""
        {{ check_input_vars(layer_spec, ['input'])|indent(width=8) }}           
        inputs = inputs['input']
        {% call indented_if(not layer_spec.trainable) %}
            cls_outputs, box_outputs = self.model(inputs, training=False)
        {% endcall %} 
        {% call indented_if(layer_spec.trainable) %}
            cls_outputs, box_outputs = self.model(inputs, training=training)
        {% endcall %}
        for i in range({{layer_spec.max_level}} - {{layer_spec.min_level}} + 1):
            cls_outputs[i] = self.classes(cls_outputs[i])
            box_outputs[i] = self.boxes(box_outputs[i])
        output = {"cls_outputs": cls_outputs, "box_outputs": box_outputs}
        preview = tf.expand_dims(tf.reshape(tf.concat([cls_outputs[0], box_outputs[0]], 3), [-1]), 0)
        {{ build_output_dict(
            'self._outputs',
            {'output': 'output', 'preview': 'preview'},
            ['output', 'preview'])|indent(width=8)
        }}
        return self._outputs

    def build(self, input_shape):
        """ Called by the Keras framework upon the first invocation of the call method """        
        handle = "{{layer_spec.url}}"
        num_anchors = len({{layer_spec.aspect_ratios}}) * {{layer_spec.num_scales}}
        self.model = hub.KerasLayer(handle=handle, trainable={{layer_spec.trainable}})
        if {{layer_spec.separable_conv}}:
            conv2d_layer = functools.partial(
            tf.keras.layers.SeparableConv2D, depth_multiplier=1)
        else:
            conv2d_layer = tf.keras.layers.Conv2D
        self.classes = conv2d_layer(
            {{layer_spec.num_classes}} * num_anchors,
            kernel_size=3,
            bias_initializer=tf.constant_initializer(-np.log((1 - 0.01) / 0.01)),
            padding='same',
            name='class_net/class-predict')

        if {{layer_spec.separable_conv}}:
            self.boxes = tf.keras.layers.SeparableConv2D(
                filters=4 * num_anchors,
                depth_multiplier=1,
                pointwise_initializer=tf.initializers.variance_scaling(),
                depthwise_initializer=tf.initializers.variance_scaling(),
                data_format='{{layer_spec.data_format}}',
                kernel_size=3,
                activation=None,
                bias_initializer=tf.zeros_initializer(),
                padding='same',
                name='box_net/box-predict')
        else:
            self.boxes = tf.keras.layers.Conv2D(
                filters=4 * num_anchors,
                kernel_initializer=tf.random_normal_initializer(stddev=0.01),
                data_format='{{layer_spec.data_format}}',
                kernel_size=3,
                activation=None,
                bias_initializer=tf.zeros_initializer(),
                padding='same',
                name='box_net/box-predict')

        self.kernel = 0 
        self.bias = 0

    def get_config(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return {}

    @property
    def visualized_trainables(self):
        """ Returns two tf.Variables (weights, biases) to be visualized in the frontend """    
        return self.kernel, self.bias

        
class {{layer_spec.sanitized_name}}(Tf2xLayer):
    def __init__(self):
        super().__init__(
            keras_class={{layer_spec.sanitized_name}}Keras
        )        
{% endmacro %}

