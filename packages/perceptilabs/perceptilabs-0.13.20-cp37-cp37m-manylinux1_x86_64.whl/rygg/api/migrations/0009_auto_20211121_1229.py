# Generated by Django 3.2 on 2021-11-21 12:29

from django.db import migrations, models
from rygg.api.models import Model
import json
import logging
import os

logger = logging.getLogger(__name__)
# rygg.settings isn't obeyed. Make it obey
logger.setLevel(os.getenv("PL_RYGG_LOG_LEVEL", "WARNING"))


def path_join(*paths):
    return os.path.join(*paths).replace("\\", "/")


def dig(d, *keys):
    cur = d
    for k in keys:
        if not cur or not hasattr(cur, "get"):
            return None
        elif k in cur:
            cur = cur.get(k)
    return cur


def fix_path(path):
    return os.path.expanduser(path).replace("\\", "/")


def log_update(pre, post):
    if post == pre:
        logger.debug(f"Path '{pre}' is already updated.")
    else:
        logger.debug(f"Updating '{pre}' to '{post}'.")


def fix_model_dict(m):
    dss = dig(m, "networkMeta", "datasetSettings")
    if "filePath" in dss:
        pre = dss["filePath"]
        post = fix_path(pre)
        dss["filePath"] = post
        log_update(pre, post)

    ne = dig(m, "networkElementList")
    if not ne:
        return
    for v in ne.values():
        ck = dig(v, "checkpoint")
        for ix, p in enumerate(ck):
            if p:
                pre = p
                ck[ix] = fix_path(p)
                log_update(pre, ck[ix])


def fix_model_file(filename):
    logger.debug(f"Migrating {filename}...")
    j = open(filename, "r").read()
    as_dict = json.loads(j)
    fix_model_dict(as_dict)
    j = json.dumps(as_dict)
    open(filename, "w").write(j)


def files_to_fix():
    # call objects() instead of available_objects() to migrate all models, just in case...
    for result in Model.objects.values("location"):
        raw_location = result.get("location")
        if not raw_location:
            continue

        logging.debug(f"Found model with location {raw_location}")
        abs_location = fix_path(raw_location)
        if not os.path.isdir(abs_location):
            logging.debug(f"Location {raw_location} doesn't exist on disk. Skipping.")
            continue

        yield path_join(abs_location, "model.json")


def fix_model_paths(app, schema_editor):
    logging.debug(f"Starting...")
    for f in files_to_fix():
        fix_model_file(f)


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0008_dataset_root_dir"),
    ]

    operations = [
        migrations.RunPython(
            fix_model_paths,
            # Unapply isn't needed since apply just expands the ~
            migrations.RunPython.noop,
        ),
    ]
