{% from 'tf1x_utils.j2' import build_output_dict, check_input_vars %}
{% from 'controlflow.j2' import indented_if %}


{% macro layer_pretrained_vgg16(layer_spec, graph_spec) %}
class {{layer_spec.sanitized_name}}Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):
    def call(self, inputs, training=True):
        """ Takes a tensor and sends it as input to the pretrained VGG16 model."""
        {{ check_input_vars(layer_spec, ['input'])|indent(width=8) }}           
        input_ = inputs['input']
        input_ = self.preprocess_input(input_)
        {% call indented_if(not layer_spec.trainable) %}
            output = self.vgg16(input_, training=False)
        {% endcall %}
        {% call indented_if(layer_spec.trainable) %}
            output = self.vgg16(input_, training=training)
        {% endcall %}
        {{ build_output_dict(
            'self._outputs',
            {'output': 'output', 'preview': 'output'},
            ['output', 'preview'])|indent(width=8)
        }}
        return self._outputs

    def build(self, input_shape):
        """ Called by the Keras framework upon the first invocation of the call method """
        {% call indented_if(layer_spec.pooling == 'None' ) %}
            pooling_ = None
        {% endcall %}
        input_shape_ = input_shape['input']
        {% call indented_if(layer_spec.weights == 'None') %}
            weights_ = None
        {% endcall %}
        {% call indented_if(layer_spec.weights != 'None') %}
            weights_ = '{{layer_spec.weights}}'
        {% endcall %}

        {% call indented_if(layer_spec.include_top == True) %}
            {% call indented_if(layer_spec.weights == 'None') %}
                classes_ = {{layer_spec.classes}}
                self.vgg16 = tf.keras.applications.VGG16(include_top={{layer_spec.include_top}}, weights=weights_, classes=classes_)
            {% endcall %}
            {% call indented_if(layer_spec.weights != 'None') %}
                self.vgg16 = tf.keras.applications.VGG16(include_top={{layer_spec.include_top}}, weights=weights_)
            {% endcall %}
        {% endcall %}
        {% call indented_if(layer_spec.include_top == False) %}
            {% call indented_if(layer_spec.pooling != 'None' ) %}
                pooling_ = "{{layer_spec.pooling}}"
            {% endcall %}
            if len(input_shape_) > 3:
                input_shape_ = input_shape_[1:]
            self.vgg16 = tf.keras.applications.VGG16(include_top={{layer_spec.include_top}}, input_shape=input_shape_, weights=weights_, pooling=pooling_)
        {% endcall %}

        {% call indented_if(not layer_spec.trainable) %}
            self.vgg16.trainable = False
        {% endcall %}

        {% call indented_if(layer_spec.include_top == True) %}
            self.kernel = self.vgg16.layers[-1].weights
            self.bias = self.vgg16.layers[-1].bias
        {% endcall %}
        {% call indented_if(layer_spec.include_top == False) %}
            {% call indented_if(layer_spec.pooling == 'None') %}
                self.kernel = self.vgg16.layers[-2].weights
                self.bias = self.vgg16.layers[-2].bias
            {% endcall %}
            {% call indented_if(layer_spec.pooling != 'None') %}
                self.kernel = self.vgg16.layers[-3].weights
                self.bias = self.vgg16.layers[-3].bias
            {% endcall %}
        {% endcall %}

        self.preprocess_input = tf.keras.applications.vgg16.preprocess_input

        

    def get_config(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return {}

    @property
    def visualized_trainables(self):
        """ Returns two tf.Variables (weights, biases) to be visualized in the frontend """    
        return self.kernel, self.bias

class {{layer_spec.sanitized_name}}(Tf2xLayer):
    def __init__(self):
        super().__init__(
            keras_class={{layer_spec.sanitized_name}}Keras
        )        
    
{% endmacro %}

