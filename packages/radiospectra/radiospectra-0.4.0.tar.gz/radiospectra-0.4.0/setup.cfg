[metadata]
name = radiospectra
provides = radiospectra
description = Provide support for some type of radio spectra in solar physics
long_description = file: README.rst
long_description_content_type = text/x-rst
author = The SunPy Community
author_email = sunpy@googlegroups.com
license = BSD 2-Clause
license_file = LICENSE.rst
url = https://sunpy.org
edit_on_github = True
github_project = sunpy/radiospectra
platform = any
keywords = solar physics, solar, science, sun, wcs, coordinates, radio, spectra
classifiers = 
	Development Status :: 3 - Alpha
	Intended Audience :: Science/Research
	License :: OSI Approved :: BSD License
	Natural Language :: English
	Operating System :: OS Independent
	Programming Language :: Python
	Programming Language :: Python :: 3
	Programming Language :: Python :: 3.8
	Programming Language :: Python :: 3.9
	Programming Language :: Python :: 3.10
	Topic :: Scientific/Engineering :: Physics

[options]
zip_safe = False
python_requires = >=3.8
packages = find:
include_package_data = True
setup_requires = 
	setuptools_scm
install_requires = 
	sunpy[net]>=4.0.0
	numpy
	matplotlib
	scipy
	cdflib>=0.3.20

[options.packages.find]
exclude = radiospectra._dev

[options.extras_require]
tests = 
	pytest-astropy >= 0.8  # 0.8 is the first release to include filter-subpackage
	pytest-doctestplus >= 0.5 # We require the newest version of doctest plus to use +IGNORE_WARNINGS
	tox
docs = 
	sphinx-automodapi
	sphinx-changelog
	sphinx-gallery>=0.7.0 # First to include the mini-galleries directive
	sphinx>=3
	sunpy-sphinx-theme

[options.package_data]
radiospectra = data/*

[tool:pytest]
testpaths = "radiospectra" "docs"
norecursedirs = ".tox" "build" "docs[\/]_build" "docs[\/]generated" "*.egg-info" "examples" ".jupyter" ".history" "tools" "radiospectra[\/]_dev"
doctest_plus = enabled
doctest_optionflags = NORMALIZE_WHITESPACE FLOAT_CMP ELLIPSIS
addopts = --doctest-rst --doctest-ignore-import-errors -p no:unraisableexception -p no:threadexception
markers = 
	remote_data: marks this test function as needing remote data.
	online: marks this test function as needing online connectivity.
remote_data_strict = True
junit_family = xunit1
filterwarnings = 
	error
	error::sunpy.util.exceptions.SunpyDeprecationWarning
	ignore:direct construction of AsdfSchemaFile has been deprecated
	ignore:direct construction of AsdfSchemaItem has been deprecated
	ignore:direct construction of AsdfSchemaExampleItem has been deprecated
	ignore:The loop argument is deprecated
	ignore:numpy.ufunc size changed:RuntimeWarning
	ignore:numpy.ndarray size changed:RuntimeWarning
	ignore:defusedxml.lxml is no longer supported:DeprecationWarning
	ignore:"@coroutine" decorator is deprecated
	ignore:direct construction of AsdfSchemaFile has been deprecated
	ignore:direct construction of AsdfSchemaItem has been deprecated
	ignore:direct construction of AsdfSchemaExampleItem has been deprecated
	ignore:Converting `np.inexact` or `np.floating` to a dtype is deprecated
	ignore:leap-second auto-update failed
	ignore:Distutils was imported before Setuptools
	ignore:The toolz.compatibility module is no longer needed:DeprecationWarning
	ignore:distutils Version classes are deprecated. Use packaging.version instead.

[pycodestyle]
max_line_length = 100

[flake8]
max-line-length = 100
exclude = 
	.git,
	__pycache__,
	docs/conf.py,
	build,
rst-directives = 
	plot

[isort]
balanced_wrapping = True
skip = docs/conf.py
default_section = THIRDPARTY
include_trailing_comma = True
known_astropy = astropy, asdf, sunpy
length_sort = False
length_sort_sections = stdlib
line_length = 110
multi_line_output = 3
no_lines_before = LOCALFOLDER
sections = STDLIB, THIRDPARTY, ASTROPY, FIRSTPARTY, LOCALFOLDER

[coverage:run]
omit = 
	radiospectra/_sunpy_init*
	radiospectra/conftest.py
	radiospectra/*setup_package*
	radiospectra/tests/*
	radiospectra/*/tests/*
	radiospectra/extern/*
	radiospectra/version*
	*/radiospectra/_sunpy_init*
	*/radiospectra/conftest.py
	*/radiospectra/*setup_package*
	*/radiospectra/tests/*
	*/radiospectra/*/tests/*
	*/radiospectra/extern/*
	*/radiospectra/version*

[coverage:report]
exclude_lines = 
	pragma: no cover
	except ImportError
	raise AssertionError
	raise NotImplementedError
	def main\(.*\):
	pragma: py{ignore_python_version}
	def _ipython_key_completions_

[egg_info]
tag_build = 
tag_date = 0

