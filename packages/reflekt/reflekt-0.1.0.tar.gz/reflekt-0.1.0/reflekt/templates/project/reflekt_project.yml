# Configurations are REQUIRED unless flagged by an '# OPTIONAL (optional_config:)' comment
# Uncomment OPTIONAL configurations to use them

name: default_project

config_profile: default_profile  # Profile defined in reflekt_config.yml

# OPTIONAL (config_path:)
# config_path: /absolute/path/to/reflekt_config.yml  # OPTIONAL

tracking_plans:
  naming:                     # Naming conventions for tracking plans
    events:
      case: title             # title|snake|camel
      allow_numbers: false    # Allow numbers in event names
      reserved: []            # Reserved event names (casing matters)

    properties:
      case: snake             # title|snake|camel
      allow_numbers: false    # Allow numbers in property names
      reserved: []            # Reserved property names (casing matters)

  data_types: # Specify allowed data types. Available types listed below
    allowed:
      - string
      - integer
      - boolean
      - number
      - object
      - array
      - any
      - 'null'  # Specify null type in quotes

  plan_schemas:
    # For each reflekt tracking plan, specify schema in database with raw event data.
    # Replace the example mapping below with your mappings
    example-plan: example_schema

  # OPTIONAL (metadata:)
  # Define a validation schema for your metadata. This is tested when running
  #     reflekt test --name <plan-name>
  # Uses Cerberus validation rules (https://bit.ly/3vIsAfs) to define schemas.
  # metadata:
  #   schema:
  #     code_owner:
  #       required: true
  #       type: string
  #       allowed:
  #         - Jane
  #         - John
  #     stakeholder:
  #       type: string
  #       allowed:
  #         - Product
  #         - Engineering
  #         - Data

dbt:
  templater:
    sources:
      prefix: src_reflekt_       # Prefix for templated dbt package sources

    models:
      prefix: reflekt_           # Prefix for models & docs in templated dbt package
      materialized: incremental  # One of view|incremental
      # OPTIONAL (incremental_logic:) [REQUIRED if 'materialized: incremental']
      # Specify the incremental logic to use when templating dbt models.
      # Must include the {%- if is_incremental() %} ... {%- endif %} block
      incremental_logic: |
        {%- if is_incremental() %}
        where received_at >= ( select max(received_at_tstamp)::date from {{ this }} )
        {%- endif %}

    # OPTIONAL (package_schemas:)
    # For each tracking plan, specify schema where models in Reflekt dbt package will be materialized.
    # package_schemas:
    #   example-plan: example_schema
