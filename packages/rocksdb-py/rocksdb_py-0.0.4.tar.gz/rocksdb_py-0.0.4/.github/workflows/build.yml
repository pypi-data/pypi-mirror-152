name: Package build

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: "Build on ${{ matrix.platform.name }} with Python ${{ matrix.python.version }}"
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        python: [
          {
            name: "cp37-cp37m",
            version: "3.7"
          },
          {
            name: "cp38-cp38",
            version: "3.8"
          },
          {
            name: "cp39-cp39",
            version: "3.9"
          },
          {
            name: "cp310-cp310",
            version: "3.10"
          },
        ]
        rust: [stable]
        platform: [
          {
            os: "ubuntu-latest",
            python-architecture: "x64",
            rust-target: "x86_64-unknown-linux-gnu",
            name: "Linux x64"
          },
          {
            os: "macOS-latest",
            python-architecture: "x64",
            rust-target: "x86_64-apple-darwin",
            name: "macOS x64"
          },
          {
            os: "macOS-11",
            python-architecture: "x64",
            rust-target: "aarch64-apple-darwin",
            name: "macOS arm64"
          },
          {
            os: "windows-latest",
            python-architecture: "x86",
            rust-target: "i686-pc-windows-msvc",
            name: "Windows x86"
          },
          {
            os: "windows-latest",
            python-architecture: "x64",
            rust-target: "x86_64-pc-windows-msvc",
            name: "Windows x64"
          },
        ]
      fail-fast: false
    env:
      CARGO_BUILD_TARGET: ${{ matrix.platform.rust-target }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.platform.python-architecture }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.python-architecture }}-cargo-${{ matrix.rust }}-
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python.version }}
          architecture: ${{ matrix.platform.python-architecture }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.platform.rust-target }}
          default: true
          profile: minimal
          override: true
      - name: Install CLang
        uses: KyleMayes/install-llvm-action@v1
        if: runner.os == 'Windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> ${GITHUB_ENV}
        if: runner.os == 'Windows'
      - name: Install dependencies
        run: pip install maturin pygithub
      - name: Build package Linux
        env:
          PY_VERSION: ${{ matrix.python.name }}
        run: docker run -v ${GITHUB_WORKSPACE}:/io -e PY_VERSION=${PY_VERSION} trk54ylmz/maturin-custom --interpreter /opt/python/${PY_VERSION}/bin/python
        if: runner.os == 'Linux'
      - name: Build package macOS
        env:
          PY_LOCATION: ${{ env.pythonLocation }}
        run: maturin build --release --no-sdist --interpreter ${PY_LOCATION}/bin/python
        if: runner.os == 'macOS'
      - name: Build package Windows
        env:
          PY_LOCATION: ${{ env.pythonLocation }}
        run: maturin build --release --no-sdist --interpreter ${env:PY_LOCATION}\python.exe
        if: runner.os == 'Windows'
      - name: Install package
        run: python .github/build/install.py ${{ matrix.python.name }}
      - name: Run pytest
        run: python -m unittest test
        if: matrix.platform.os != 'macOS-11'
      - name: Upload package
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          GIT_REPO: ${{ secrets.GIT_REPO }}
        run: python .github/build/upload.py
