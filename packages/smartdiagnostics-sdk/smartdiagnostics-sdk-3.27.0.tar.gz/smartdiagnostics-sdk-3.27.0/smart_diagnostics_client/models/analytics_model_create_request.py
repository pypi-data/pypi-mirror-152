# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsModelCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'location_id': 'str',
        'corporation_id': 'str',
        'group_type': 'GroupTypeCodes',
        'indicators': 'list[AnalyticsModelIndicatorChild]',
        'properties': 'list[PropertyRequestChild]',
        'trigger_interval_in_seconds': 'int',
        'tag_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'Name',
        'version': 'Version',
        'location_id': 'LocationId',
        'corporation_id': 'CorporationId',
        'group_type': 'GroupType',
        'indicators': 'Indicators',
        'properties': 'Properties',
        'trigger_interval_in_seconds': 'TriggerIntervalInSeconds',
        'tag_ids': 'TagIds'
    }

    def __init__(self, name=None, version=None, location_id=None, corporation_id=None, group_type=None, indicators=None, properties=None, trigger_interval_in_seconds=None, tag_ids=None):  # noqa: E501
        """AnalyticsModelCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._location_id = None
        self._corporation_id = None
        self._group_type = None
        self._indicators = None
        self._properties = None
        self._trigger_interval_in_seconds = None
        self._tag_ids = None
        self.discriminator = None
        self.name = name
        self.version = version
        if location_id is not None:
            self.location_id = location_id
        if corporation_id is not None:
            self.corporation_id = corporation_id
        self.group_type = group_type
        if indicators is not None:
            self.indicators = indicators
        if properties is not None:
            self.properties = properties
        self.trigger_interval_in_seconds = trigger_interval_in_seconds
        if tag_ids is not None:
            self.tag_ids = tag_ids

    @property
    def name(self):
        """Gets the name of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The name of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsModelCreateRequest.


        :param name: The name of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The version of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnalyticsModelCreateRequest.


        :param version: The version of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def location_id(self):
        """Gets the location_id of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The location_id of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AnalyticsModelCreateRequest.


        :param location_id: The location_id of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def corporation_id(self):
        """Gets the corporation_id of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The corporation_id of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this AnalyticsModelCreateRequest.


        :param corporation_id: The corporation_id of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: str
        """

        self._corporation_id = corporation_id

    @property
    def group_type(self):
        """Gets the group_type of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The group_type of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: GroupTypeCodes
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this AnalyticsModelCreateRequest.


        :param group_type: The group_type of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: GroupTypeCodes
        """
        if group_type is None:
            raise ValueError("Invalid value for `group_type`, must not be `None`")  # noqa: E501

        self._group_type = group_type

    @property
    def indicators(self):
        """Gets the indicators of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The indicators of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: list[AnalyticsModelIndicatorChild]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this AnalyticsModelCreateRequest.


        :param indicators: The indicators of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: list[AnalyticsModelIndicatorChild]
        """

        self._indicators = indicators

    @property
    def properties(self):
        """Gets the properties of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The properties of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: list[PropertyRequestChild]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AnalyticsModelCreateRequest.


        :param properties: The properties of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: list[PropertyRequestChild]
        """

        self._properties = properties

    @property
    def trigger_interval_in_seconds(self):
        """Gets the trigger_interval_in_seconds of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The trigger_interval_in_seconds of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._trigger_interval_in_seconds

    @trigger_interval_in_seconds.setter
    def trigger_interval_in_seconds(self, trigger_interval_in_seconds):
        """Sets the trigger_interval_in_seconds of this AnalyticsModelCreateRequest.


        :param trigger_interval_in_seconds: The trigger_interval_in_seconds of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: int
        """
        if trigger_interval_in_seconds is None:
            raise ValueError("Invalid value for `trigger_interval_in_seconds`, must not be `None`")  # noqa: E501

        self._trigger_interval_in_seconds = trigger_interval_in_seconds

    @property
    def tag_ids(self):
        """Gets the tag_ids of this AnalyticsModelCreateRequest.  # noqa: E501


        :return: The tag_ids of this AnalyticsModelCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this AnalyticsModelCreateRequest.


        :param tag_ids: The tag_ids of this AnalyticsModelCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._tag_ids = tag_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsModelCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsModelCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
