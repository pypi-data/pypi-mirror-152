{"version":3,"sources":["CardSelectable.tsx","index.tsx"],"names":["engine","Styletron","CardSelectable","props","render","label","String","args","options","explanation","defaultValue","length","Alert","key","variant","Row","className","value","theme","LightTheme","map","option","index","Card","style","width","flex","onClick","onSelectionChanged","Header","state","selectedIndex","Body","Text","val","setState","console","log","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iTAcMA,EAAS,IAAIC,IAabC,E,kDACJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAkBDC,OAAS,WACd,IAAMC,EAAQC,OAAO,EAAKH,MAAMI,KAAX,OACjBC,EAAU,EAAKL,MAAMI,KAAX,QACVE,EAAc,EAAKN,MAAMI,KAAX,YACdG,EAAe,EAAKP,MAAMI,KAAX,QAEnB,OAAe,MAAXC,GAAsC,IAAnBA,EAAQG,OAE3B,kBAACC,EAAA,EAAD,CAAOC,IAAI,aAAaC,QAAQ,QAAhC,yBAMAL,EAAYE,SAAWH,EAAQG,OAE/B,kBAACC,EAAA,EAAD,CAAOC,IAAI,aAAaC,QAAQ,UAAhC,4EAMAJ,EAAe,GAAKA,EAAeF,EAAQG,OAAS,EAEpD,kBAACC,EAAA,EAAD,CAAOC,IAAI,aAAaC,QAAQ,UAAhC,gCAOA,kBAACC,EAAA,EAAD,CAAKC,UAAU,OACb,+BAAQX,GACR,kBAAC,IAAD,CAAmBY,MAASjB,GAC1B,kBAAC,IAAD,CAAckB,MAAOC,KAClBX,EAAQY,KAAI,SAACC,EAAgBC,GAAjB,OACX,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,OAAQC,KAAM,GAAKV,UAAU,OACjDW,QAAS,WAAO,EAAKC,mBAAmBN,KAExC,kBAACC,EAAA,EAAKM,OAAN,CAAab,UAAa,EAAKc,MAAMC,gBAAkBT,EAAQ,eAAiB,IAC3ED,GAEL,kBAACE,EAAA,EAAKS,KAAN,KACE,kBAACT,EAAA,EAAKU,KAAN,SAAaxB,EAAYa,GAAzB,cA9DwB,EAwElCM,mBAAqB,SAC3BM,GAGA,IAAMZ,EAAQY,EACd,EAAKC,SAAS,CAAEJ,cAAeT,IAAS,WAEtC,IAAMd,EAAU,EAAKL,MAAMI,KAAX,QACVG,EAAe,EAAKP,MAAMI,KAAX,QACjBU,EAAQ,KACZA,EAAmB,MAAXT,GAAmBc,EAAQd,EAAQG,OAASH,EAAQc,GAAS,KACrEc,QAAQC,IAAI,SACQ,MAAhB3B,IACFO,EAAQT,EAAQE,IAGlB4B,IAAUC,kBAAkBtB,OApF9B,IAAMT,EAAU,EAAKL,MAAMI,KAAX,QACVG,EAAe,EAAKP,MAAMI,KAAX,QACjBwB,GAAiB,EANmB,OAQzB,MAAXvB,GAAmC,MAAhBE,IACrBqB,EAAgBrB,GAGlB,EAAKoB,MAAQ,CAAEC,kBAEQ,IAAnBA,GACFO,IAAUC,kBAAkB/B,EAAQuB,IAfE,E,uBADfS,KA8FdC,cAAwBvC,GCrHvCwC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8c9573d2.chunk.js","sourcesContent":["import { BaseProvider, LightTheme } from \"baseui\"\nimport React from \"react\"\n\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from \"streamlit-component-lib\"\nimport { Alert, Card, Row } from \"react-bootstrap\"\n\n// Initialize our Styletron engine\nconst engine = new Styletron()\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  selectedIndex: number\n}\n\n/**\n * Radio Button example, using BaseUI.\n */\nclass CardSelectable extends StreamlitComponentBase<State> {\n  public constructor(props: ComponentProps) {\n    super(props)\n    \n    // Determine our initially selected index\n    const options = this.props.args[\"options\"] as string[]\n    const defaultValue = this.props.args[\"default\"] as number\n    let selectedIndex = -1\n  \n    if (options != null && defaultValue != null) {\n      selectedIndex = defaultValue\n    }\n    \n    this.state = { selectedIndex }\n\n    if (selectedIndex !== -1) {\n      Streamlit.setComponentValue(options[selectedIndex])\n    }\n  }\n\n  public render = (): React.ReactNode => {\n    const label = String(this.props.args[\"label\"])\n    let options = this.props.args[\"options\"] as string[]\n    let explanation = this.props.args[\"explanation\"] as string[]\n    let defaultValue = this.props.args[\"default\"] as number\n\n    if (options == null || options.length === 0) {\n      return (\n        <Alert key='size_error' variant=\"info\">\n        No options to select.\n        </Alert>\n      )\n    }\n\n    if (explanation.length !== options.length) {\n      return (\n        <Alert key='size_error' variant=\"danger\">\n        The amount of explanatory text differs from the amount of options given.\n        </Alert>\n      )\n    }\n\n    if (defaultValue < 0 || defaultValue > options.length - 1) {\n      return (\n        <Alert key='size_error' variant=\"danger\">\n        Invalid default value index.\n        </Alert>\n      )\n    }\n\n    return (\n        <Row className=\"m-0\">\n          <label>{label}</label>\n          <StyletronProvider value = {engine}>\n            <BaseProvider theme={LightTheme}>\n              {options.map((option: string, index: number) => (\n                <Card style={{ width: '100%', flex: 1 }} className=\"mb-3\"\n                  onClick={() => {this.onSelectionChanged(index)}}\n                  >\n                  <Card.Header className = {this.state.selectedIndex === index ? \"cardSelected\" : \"\"}>\n                      {option}\n                  </Card.Header>\n                  <Card.Body>\n                    <Card.Text> {explanation[index]} </Card.Text>\n                  </Card.Body>\n                </Card>\n              ))}\n            </BaseProvider>\n          </StyletronProvider>\n        </Row>\n    )\n  }\n\n  private onSelectionChanged = (\n    val: number\n    // e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const index = val\n    this.setState({ selectedIndex: index }, () => {\n      // Get the option name at the selected index\n      const options = this.props.args[\"options\"] as string[]\n      const defaultValue = this.props.args[\"default\"] as number\n      let value = null\n      value = options != null && index < options.length ? options[index] : null\n      console.log(\"Teste\")\n      if (defaultValue != null) {\n        value = options[defaultValue]\n      }\n      // Send our current value to Streamlit!\n      Streamlit.setComponentValue(value)\n    })\n  }\n}\n\nexport default withStreamlitConnection(CardSelectable)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CardSelectable from \"./CardSelectable\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardSelectable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}